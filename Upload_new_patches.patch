Subject: [PATCH] Upload new patches
---
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java	(date 1729674280047)
@@ -45,23 +45,23 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!this.getTileEntity().opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             net.minecraft.world.level.Level world = this.getTileEntity().getLevel();
             world.blockEvent(this.getPosition(), this.getTileEntity().getBlockState().getBlock(), 1, 1);
             world.playSound(null, this.getPosition(), SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         }
-        this.getTileEntity().banner$setOpened(true);
+        this.getTileEntity().opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (this.getTileEntity().opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             net.minecraft.world.level.Level world = this.getTileEntity().getLevel();
             world.blockEvent(this.getPosition(), this.getTileEntity().getBlockState().getBlock(), 1, 0);
             world.playSound(null, this.getPosition(), SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         }
-        this.getTileEntity().banner$setOpened(false);
+        this.getTileEntity().opened = false;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java	(date 1729674280337)
@@ -15,7 +15,7 @@
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".nbt.place", "Gives the user the ability to place restricted blocks with NBT in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".nbt.copy", "Gives the user the ability to copy NBT in creative", org.bukkit.permissions.PermissionDefault.TRUE, parent);
         DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick", "Gives the user the ability to use the debug stick in creative", org.bukkit.permissions.PermissionDefault.OP, parent);
-        DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick.always", "Gives the user the ability to use the debug stick in all game modes", org.bukkit.permissions.PermissionDefault.FALSE/* , parent */); // Paper - should not have this parent, as it's not a "vanilla" utility
+        DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".debugstick.always", "Gives the user the ability to use the debug stick in all game modes", org.bukkit.permissions.PermissionDefault.FALSE, parent);
         // Spigot end
         parent.recalculatePermissibles();
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiglinWallSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiglinWallSkull.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiglinWallSkull.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiglinWallSkull.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiglinWallSkull.java	(date 1729674280100)
@@ -3,7 +3,7 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
-public final class CraftPiglinWallSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
+public final class CraftPiglinWallSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.WallSkull, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftPiglinWallSkull() {
         super();
@@ -31,4 +31,18 @@
     public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
         return this.getValues(CraftPiglinWallSkull.FACING, org.bukkit.block.BlockFace.class);
     }
+
+    // org.bukkit.craftbukkit.block.data.CraftPowerable
+
+    private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.PiglinWallSkullBlock.class, "powered");
+
+    @Override
+    public boolean isPowered() {
+        return this.get(CraftPiglinWallSkull.POWERED);
+    }
+
+    @Override
+    public void setPowered(boolean powered) {
+        this.set(CraftPiglinWallSkull.POWERED, powered);
+    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteMethodData.java	(date 1729674280299)
@@ -4,8 +4,8 @@
 import org.jetbrains.annotations.Nullable;
 import org.objectweb.asm.Type;
 
-public record RerouteMethodData(String source, Type sourceDesc, Type sourceOwner, String sourceName,
+public record RerouteMethodData(String methodKey, Type sourceDesc, Type sourceOwner, String sourceName,
                                 boolean staticReroute, Type targetType, String targetOwner, String targetName,
                                 List<RerouteArgument> arguments, RerouteReturn rerouteReturn, boolean isInBukkit,
-                                @Nullable String requiredCompatibility, @Nullable RequirePluginVersionData requiredPluginVersion) {
+                                @Nullable RequirePluginVersionData requiredPluginVersion) {
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java	(date 1729674280117)
@@ -3,7 +3,7 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
-public final class CraftWitherSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rotatable {
+public final class CraftWitherSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Skull, org.bukkit.block.data.Powerable, org.bukkit.block.data.Rotatable {
 
     public CraftWitherSkull() {
         super();
@@ -13,6 +13,20 @@
         super(state);
     }
 
+    // org.bukkit.craftbukkit.block.data.CraftPowerable
+
+    private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.WitherSkullBlock.class, "powered");
+
+    @Override
+    public boolean isPowered() {
+        return this.get(CraftWitherSkull.POWERED);
+    }
+
+    @Override
+    public void setPowered(boolean powered) {
+        this.set(CraftWitherSkull.POWERED, powered);
+    }
+
     // org.bukkit.craftbukkit.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.WitherSkullBlock.class, "rotation");
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java	(date 1729674280328)
@@ -10,8 +10,6 @@
 import java.util.Optional;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.ChatFormatting;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.ClickEvent.Action;
@@ -21,6 +19,7 @@
 import net.minecraft.network.chat.TextColor;
 import net.minecraft.network.chat.contents.PlainTextContents;
 import net.minecraft.network.chat.contents.TranslatableContents;
+import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 
 public final class CraftChatMessage {
@@ -81,62 +80,62 @@
                     this.appendNewComponent(index);
                 }
                 switch (groupId) {
-                    case 1:
-                        char c = match.toLowerCase(Locale.ROOT).charAt(1);
-                        ChatFormatting format = CraftChatMessage.formatMap.get(c);
+                case 1:
+                    char c = match.toLowerCase(Locale.ROOT).charAt(1);
+                    ChatFormatting format = CraftChatMessage.formatMap.get(c);
 
-                        if (c == 'x') {
-                            this.hex = new StringBuilder("#");
-                        } else if (this.hex != null) {
-                            this.hex.append(c);
+                    if (c == 'x') {
+                        this.hex = new StringBuilder("#");
+                    } else if (this.hex != null) {
+                        this.hex.append(c);
 
-                            if (this.hex.length() == 7) {
-                                this.modifier = StringMessage.RESET.withColor(TextColor.parseColor(this.hex.toString()).result().get());
-                                this.hex = null;
-                            }
-                        } else if (format.isFormat() && format != ChatFormatting.RESET) {
-                            switch (format) {
-                                case BOLD:
-                                    this.modifier = this.modifier.withBold(Boolean.TRUE);
-                                    break;
-                                case ITALIC:
-                                    this.modifier = this.modifier.withItalic(Boolean.TRUE);
-                                    break;
-                                case STRIKETHROUGH:
-                                    this.modifier = this.modifier.withStrikethrough(Boolean.TRUE);
-                                    break;
-                                case UNDERLINE:
-                                    this.modifier = this.modifier.withUnderlined(Boolean.TRUE);
-                                    break;
-                                case OBFUSCATED:
-                                    this.modifier = this.modifier.withObfuscated(Boolean.TRUE);
-                                    break;
-                                default:
-                                    throw new AssertionError("Unexpected message format");
-                            }
-                        } else { // Color resets formatting
-                            this.modifier = StringMessage.RESET.withColor(format);
-                        }
-                        needsAdd = true;
-                        break;
-                    case 2:
-                        if (plain) {
-                            this.appendNewComponent(matcher.end(groupId));
-                        } else {
-                            if (!(match.startsWith("http://") || match.startsWith("https://"))) {
-                                match = "http://" + match;
-                            }
-                            this.modifier = this.modifier.withClickEvent(new ClickEvent(Action.OPEN_URL, match));
-                            this.appendNewComponent(matcher.end(groupId));
-                            this.modifier = this.modifier.withClickEvent((ClickEvent) null);
-                        }
-                        break;
-                    case 3:
-                        if (needsAdd) {
-                            this.appendNewComponent(index);
-                        }
-                        this.currentChatComponent = null;
-                        break;
+                        if (this.hex.length() == 7) {
+                            this.modifier = StringMessage.RESET.withColor(TextColor.parseColor(this.hex.toString()).result().get());
+                            this.hex = null;
+                        }
+                    } else if (format.isFormat() && format != ChatFormatting.RESET) {
+                        switch (format) {
+                        case BOLD:
+                            this.modifier = this.modifier.withBold(Boolean.TRUE);
+                            break;
+                        case ITALIC:
+                            this.modifier = this.modifier.withItalic(Boolean.TRUE);
+                            break;
+                        case STRIKETHROUGH:
+                            this.modifier = this.modifier.withStrikethrough(Boolean.TRUE);
+                            break;
+                        case UNDERLINE:
+                            this.modifier = this.modifier.withUnderlined(Boolean.TRUE);
+                            break;
+                        case OBFUSCATED:
+                            this.modifier = this.modifier.withObfuscated(Boolean.TRUE);
+                            break;
+                        default:
+                            throw new AssertionError("Unexpected message format");
+                        }
+                    } else { // Color resets formatting
+                        this.modifier = StringMessage.RESET.withColor(format);
+                    }
+                    needsAdd = true;
+                    break;
+                case 2:
+                    if (plain) {
+                        this.appendNewComponent(matcher.end(groupId));
+                    } else {
+                        if (!(match.startsWith("http://") || match.startsWith("https://"))) {
+                            match = "http://" + match;
+                        }
+                        this.modifier = this.modifier.withClickEvent(new ClickEvent(Action.OPEN_URL, match));
+                        this.appendNewComponent(matcher.end(groupId));
+                        this.modifier = this.modifier.withClickEvent((ClickEvent) null);
+                    }
+                    break;
+                case 3:
+                    if (needsAdd) {
+                        this.appendNewComponent(index);
+                    }
+                    this.currentChatComponent = null;
+                    break;
                 }
                 this.currentIndex = matcher.end(groupId);
             }
@@ -200,7 +199,7 @@
     }
 
     public static String toJSON(Component component) {
-        return Component.Serializer.toJson(component, BukkitMethodHooks.getDefaultRegistryAccess());
+        return Component.Serializer.toJson(component, MinecraftServer.getDefaultRegistryAccess());
     }
 
     public static String toJSONOrNull(Component component) {
@@ -211,7 +210,7 @@
     public static Component fromJSON(String jsonMessage) throws JsonParseException {
         // Note: This also parses plain Strings to text components.
         // Note: An empty message (empty, or only consisting of whitespace) results in null rather than a parse exception.
-        return Component.Serializer.fromJson(jsonMessage, BukkitMethodHooks.getDefaultRegistryAccess());
+        return Component.Serializer.fromJson(jsonMessage, MinecraftServer.getDefaultRegistryAccess());
     }
 
     public static Component fromJSONOrNull(String jsonMessage) {
@@ -268,13 +267,13 @@
         StringBuilder out = new StringBuilder();
 
         boolean hadFormat = false;
-        for (Component c : list(component)) {
+        for (Component c : component) {
             Style modi = c.getStyle();
             TextColor color = modi.getColor();
             if (c.getContents() != PlainTextContents.EMPTY || color != null) {
                 if (color != null) {
-                    if (color.bridge$format() != null) {
-                        out.append(color.bridge$format());
+                    if (color.format != null) {
+                        out.append(color.format);
                     } else {
                         out.append(ChatColor.COLOR_CHAR).append("x");
                         for (char magic : color.serialize().substring(1).toCharArray()) {
@@ -315,16 +314,6 @@
         return out.toString();
     }
 
-    public static ArrayList<Component> list(Component txt) {
-        ArrayList<Component> arr = new ArrayList<>();
-        if (!arr.contains(txt))
-            arr.add(txt);
-        for (Component tx : txt.getSiblings()) {
-            arr.addAll(list(tx) );
-        }
-        return arr;
-    }
-
     public static Component fixComponent(MutableComponent component) {
         Matcher matcher = CraftChatMessage.LINK_PATTERN.matcher("");
         return CraftChatMessage.fixComponent(component, matcher);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java	(date 1729674280326)
@@ -113,8 +113,8 @@
 
     // For tree generation
     @Override
-    public int getMinBuildHeight() {
-        return this.getWorld().getMinBuildHeight();
+    public int getMinY() {
+        return this.getWorld().getMinY();
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/FieldRename.java	(date 1729674280289)
@@ -175,6 +175,8 @@
             .change("SNOWMAN", "SNOW_GOLEM")
             .change("FISHING_HOOK", "FISHING_BOBBER")
             .change("LIGHTNING", "LIGHTNING_BOLT")
+            .change("BOAT", "OAK_BOAT")
+            .change("CHEST_BOAT", "OAK_CHEST_BOAT")
             .withKeyRename()
             .change("XP_ORB", "EXPERIENCE_ORB")
             .change("EYE_OF_ENDER_SIGNAL", "EYE_OF_ENDER")
Index: banner-server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java b/banner-server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java	(date 1729674280123)
@@ -29,7 +29,7 @@
                 return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
             }
         };
-        this.server.getServer().bridge$processQueue().add(waitable);
+        this.server.getServer().processQueue.add(waitable);
         try {
             List<String> offers = waitable.get();
             if (offers == null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java b/banner-server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java	(date 1729674280122)
@@ -14,6 +14,7 @@
 import org.fusesource.jansi.Ansi.Attribute;
 
 public class ColouredConsoleSender extends CraftConsoleCommandSender {
+    private final Terminal terminal;
     private final Map<ChatColor, String> replacements = new EnumMap<ChatColor, String>(ChatColor.class);
     private final ChatColor[] colors = ChatColor.values();
     private final boolean jansiPassthrough;
@@ -23,7 +24,7 @@
 
     protected ColouredConsoleSender() {
         super();
-        //this.terminal = ((CraftServer) this.getServer()).getReader().getTerminal();
+        this.terminal = ((CraftServer) this.getServer()).getReader().getTerminal();
         this.jansiPassthrough = Boolean.getBoolean("jansi.passthrough");
 
         this.replacements.put(ChatColor.BLACK, Ansi.ansi().a(Attribute.RESET).fg(Ansi.Color.BLACK).boldOff().toString());
@@ -53,7 +54,7 @@
     @Override
     public void sendMessage(String message) {
         // support jansi passthrough VM option when jansi doesn't detect an ANSI supported terminal
-        if (this.jansiPassthrough) {
+        if (this.jansiPassthrough || this.terminal.isAnsiSupported()) {
             if (!this.conversationTracker.isConversingModaly()) {
                 String result = ColouredConsoleSender.convertRGBColors(message);
                 for (ChatColor color : this.colors) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java b/banner-server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java	(date 1729674280122)
@@ -39,12 +39,12 @@
 
     @Override
     public boolean test(CommandSourceStack wrapper) {
-        return this.command.testPermissionSilent(wrapper.banner$getBukkitSender());
+        return this.command.testPermissionSilent(wrapper.getBukkitSender());
     }
 
     @Override
     public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
-        CommandSender sender = context.getSource().banner$getBukkitSender();
+        CommandSender sender = context.getSource().getBukkitSender();
 
         try {
             return this.server.dispatchCommand(sender, context.getInput()) ? 1 : 0;
@@ -57,7 +57,7 @@
 
     @Override
     public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
-        List<String> results = this.server.tabComplete(context.getSource().banner$getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
+        List<String> results = this.server.tabComplete(context.getSource().getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
 
         // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
         builder = builder.createOffset(builder.getInput().lastIndexOf(' ') + 1);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequirePluginVersionData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequirePluginVersionData.java b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequirePluginVersionData.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequirePluginVersionData.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RequirePluginVersionData.java	(date 1729674280297)
@@ -7,7 +7,7 @@
     public static RequirePluginVersionData create(RequirePluginVersion requirePluginVersion) {
         if (!requirePluginVersion.value().isBlank()) {
             if (!requirePluginVersion.minInclusive().isBlank() || !requirePluginVersion.maxInclusive().isBlank()) {
-                throw new RuntimeException("When setting value, min inclusive and max inclusive data is not allowed.");
+                throw new IllegalArgumentException("When setting value, min inclusive and max inclusive data is not allowed.");
             }
 
             return new RequirePluginVersionData(ApiVersion.getOrCreateVersion(requirePluginVersion.value()), ApiVersion.getOrCreateVersion(requirePluginVersion.value()));
@@ -23,6 +23,12 @@
             maxInclusive = ApiVersion.getOrCreateVersion(requirePluginVersion.maxInclusive());
         }
 
+        if (minInclusive != null && maxInclusive != null) {
+            if (minInclusive.isNewerThan(maxInclusive)) {
+                throw new IllegalArgumentException("Min inclusive cannot be newer than max inclusive.");
+            }
+        }
+
         return new RequirePluginVersionData(minInclusive, maxInclusive);
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/reroute/RerouteBuilder.java	(date 1729674280299)
@@ -1,53 +1,69 @@
 package org.bukkit.craftbukkit.legacy.reroute;
 
 import com.google.common.base.Preconditions;
+import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Parameter;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.function.Predicate;
 import org.bukkit.craftbukkit.util.ApiVersion;
 import org.objectweb.asm.Type;
 
 public class RerouteBuilder {
 
-    public static Map<String, RerouteMethodData> buildFromClass(Class<?> clazz) {
+    private final List<Class<?>> classes = new ArrayList<>();
+    private final Predicate<String> compatibilityPresent;
+
+    private RerouteBuilder(Predicate<String> compatibilityPresent) {
+        this.compatibilityPresent = compatibilityPresent;
+    }
+
+    public static RerouteBuilder create(Predicate<String> compatibilityPresent) {
+        return new RerouteBuilder(compatibilityPresent);
+    }
+
+    public RerouteBuilder forClass(Class<?> clazz) {
+        this.classes.add(clazz);
+        return this;
+    }
+
+    public Reroute build() {
+        Map<String, Reroute.RerouteDataHolder> rerouteDataHolderMap = new HashMap<>();
+
+        for (Class<?> clazz : this.classes) {
+            List<RerouteMethodData> data = RerouteBuilder.buildFromClass(clazz, this.compatibilityPresent);
+            data.forEach(value -> rerouteDataHolderMap.computeIfAbsent(value.methodKey(), v -> new Reroute.RerouteDataHolder()).add(value));
+        }
+
+        return new Reroute(rerouteDataHolderMap);
+    }
+
+    private static List<RerouteMethodData> buildFromClass(Class<?> clazz, Predicate<String> compatibilityPresent) {
         Preconditions.checkArgument(!clazz.isInterface(), "Interface Classes are currently not supported");
 
-        Map<String, RerouteMethodData> result = new HashMap<>();
+        List<RerouteMethodData> result = new ArrayList<>();
+        boolean shouldInclude = RerouteBuilder.shouldInclude(RerouteBuilder.getRequireCompatibility(clazz), true, compatibilityPresent);
 
         for (Method method : clazz.getDeclaredMethods()) {
-            if (method.isBridge()) {
-                continue;
-            }
-
-            if (method.isSynthetic()) {
+            if (!RerouteBuilder.isMethodValid(method)) {
                 continue;
             }
 
-            if (!Modifier.isPublic(method.getModifiers())) {
+            if (!RerouteBuilder.shouldInclude(RerouteBuilder.getRequireCompatibility(method), shouldInclude, compatibilityPresent)) {
                 continue;
             }
 
-            if (!Modifier.isStatic(method.getModifiers())) {
-                continue;
-            }
-
-            if (method.isAnnotationPresent(DoNotReroute.class)) {
-                continue;
-            }
-
-            RerouteMethodData rerouteMethodData = RerouteBuilder.buildFromMethod(method);
-            result.put(rerouteMethodData.source(), rerouteMethodData);
+            result.add(RerouteBuilder.buildFromMethod(method));
         }
 
-        return Collections.unmodifiableMap(result);
+        return result;
     }
 
-    public static RerouteMethodData buildFromMethod(Method method) {
+    private static RerouteMethodData buildFromMethod(Method method) {
         RerouteReturn rerouteReturn = new RerouteReturn(Type.getReturnType(method));
         List<RerouteArgument> arguments = new ArrayList<>();
         List<RerouteArgument> sourceArguments = new ArrayList<>();
@@ -113,7 +129,10 @@
         if (rerouteStatic != null) {
             sourceOwner = Type.getObjectType(rerouteStatic.value());
         } else {
-            RerouteArgument argument = sourceArguments.get(0);
+            if (sourceArguments.isEmpty()) {
+                throw new RuntimeException("Source argument list is empty, no owner class found");
+            }
+            RerouteArgument argument = sourceArguments.getFirst();
             sourceOwner = argument.sourceType();
             sourceArguments.remove(argument);
         }
@@ -135,23 +154,12 @@
             methodName = method.getName();
         }
 
-        String methodKey = sourceOwner.getInternalName()
-                + " "
-                + sourceDesc.getDescriptor()
-                + " "
-                + methodName;
+        String methodKey = sourceDesc.getDescriptor() + methodName;
 
         Type targetType = Type.getType(method);
 
         boolean inBukkit = !method.isAnnotationPresent(NotInBukkit.class) && !method.getDeclaringClass().isAnnotationPresent(NotInBukkit.class);
 
-        String requiredCompatibility = null;
-        if (method.isAnnotationPresent(RequireCompatibility.class)) {
-            requiredCompatibility = method.getAnnotation(RequireCompatibility.class).value();
-        } else if (method.getDeclaringClass().isAnnotationPresent(RequireCompatibility.class)) {
-            requiredCompatibility = method.getDeclaringClass().getAnnotation(RequireCompatibility.class).value();
-        }
-
         RequirePluginVersionData requiredPluginVersion = null;
         if (method.isAnnotationPresent(RequirePluginVersion.class)) {
             requiredPluginVersion = RequirePluginVersionData.create(method.getAnnotation(RequirePluginVersion.class));
@@ -159,6 +167,47 @@
             requiredPluginVersion = RequirePluginVersionData.create(method.getDeclaringClass().getAnnotation(RequirePluginVersion.class));
         }
 
-        return new RerouteMethodData(methodKey, sourceDesc, sourceOwner, methodName, rerouteStatic != null, targetType, Type.getInternalName(method.getDeclaringClass()), method.getName(), arguments, rerouteReturn, inBukkit, requiredCompatibility, requiredPluginVersion);
+        return new RerouteMethodData(methodKey, sourceDesc, sourceOwner, methodName, rerouteStatic != null, targetType, Type.getInternalName(method.getDeclaringClass()), method.getName(), arguments, rerouteReturn, inBukkit, requiredPluginVersion);
+    }
+
+    private static boolean isMethodValid(Method method) {
+        if (method.isBridge()) {
+            return false;
+        }
+
+        if (method.isSynthetic()) {
+            return false;
+        }
+
+        if (!Modifier.isPublic(method.getModifiers())) {
+            return false;
+        }
+
+        if (!Modifier.isStatic(method.getModifiers())) {
+            return false;
+        }
+
+        if (method.isAnnotationPresent(DoNotReroute.class)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    private static String getRequireCompatibility(AnnotatedElement element) {
+        RequireCompatibility annotation = element.getAnnotation(RequireCompatibility.class);
+        if (annotation == null) {
+            return null;
+        }
+
+        return annotation.value();
+    }
+
+    private static boolean shouldInclude(String string, boolean parent, Predicate<String> compatibilityPresent) {
+        if (string == null) {
+            return parent;
+        }
+
+        return compatibilityPresent.test(string);
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java	(date 1729674280108)
@@ -3,7 +3,7 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
-public final class CraftSkullWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
+public final class CraftSkullWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.WallSkull, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftSkullWall() {
         super();
@@ -31,4 +31,18 @@
     public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
         return this.getValues(CraftSkullWall.FACING, org.bukkit.block.BlockFace.class);
     }
+
+    // org.bukkit.craftbukkit.block.data.CraftPowerable
+
+    private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.WallSkullBlock.class, "powered");
+
+    @Override
+    public boolean isPowered() {
+        return this.get(CraftSkullWall.POWERED);
+    }
+
+    @Override
+    public void setPowered(boolean powered) {
+        this.set(CraftSkullWall.POWERED, powered);
+    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java	(date 1729674280047)
@@ -1,10 +1,10 @@
 package org.bukkit.craftbukkit.block;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import com.mojang.authlib.GameProfile;
 import net.minecraft.Util;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.component.ResolvableProfile;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import org.bukkit.Bukkit;
@@ -27,7 +27,7 @@
 public class CraftSkull extends CraftBlockEntityState<SkullBlockEntity> implements Skull {
 
     private static final int MAX_OWNER_LENGTH = 16;
-    private GameProfile profile;
+    private ResolvableProfile profile;
 
     public CraftSkull(World world, SkullBlockEntity tileEntity) {
         super(world, tileEntity);
@@ -43,7 +43,7 @@
 
         ResolvableProfile owner = skull.getOwnerProfile();
         if (owner != null) {
-            this.profile = owner.gameProfile();
+            this.profile = owner;
         }
     }
 
@@ -54,7 +54,7 @@
 
     @Override
     public String getOwner() {
-        return this.hasOwner() ? this.profile.getName() : null;
+        return this.hasOwner() ? this.profile.name().orElse(null) : null;
     }
 
     @Override
@@ -63,24 +63,24 @@
             return false;
         }
 
-        GameProfile profile = BukkitMethodHooks.getServer().getProfileCache().get(name).orElse(null);
+        GameProfile profile = MinecraftServer.getServer().getProfileCache().get(name).orElse(null);
         if (profile == null) {
             return false;
         }
 
-        this.profile = profile;
+        this.profile = new ResolvableProfile(profile);
         return true;
     }
 
     @Override
     public OfflinePlayer getOwningPlayer() {
-        if (this.profile != null) {
-            if (!this.profile.getId().equals(Util.NIL_UUID)) {
-                return Bukkit.getOfflinePlayer(this.profile.getId());
+        if (this.hasOwner()) {
+            if (this.profile.id().filter(u -> !u.equals(Util.NIL_UUID)).isPresent()) {
+                return Bukkit.getOfflinePlayer(this.profile.id().get());
             }
 
-            if (!this.profile.getName().isEmpty()) {
-                return Bukkit.getOfflinePlayer(this.profile.getName());
+            if (this.profile.name().filter(s -> !s.isEmpty()).isPresent()) {
+                return Bukkit.getOfflinePlayer(this.profile.name().get());
             }
         }
 
@@ -91,10 +91,10 @@
     public void setOwningPlayer(OfflinePlayer player) {
         Preconditions.checkNotNull(player, "player");
 
-        if (player instanceof CraftPlayer) {
-            this.profile = ((CraftPlayer) player).getProfile();
+        if (player instanceof CraftPlayer craftPlayer) {
+            this.profile = new ResolvableProfile(craftPlayer.getProfile());
         } else {
-            this.profile = new GameProfile(player.getUniqueId(), player.getName());
+            this.profile = new ResolvableProfile(new GameProfile(player.getUniqueId(), (player.getName() == null) ? "" : player.getName()));
         }
     }
 
@@ -112,7 +112,7 @@
         if (profile == null) {
             this.profile = null;
         } else {
-            this.profile = CraftPlayerProfile.validateSkullProfile(((CraftPlayerProfile) profile).buildGameProfile());
+            this.profile = new ResolvableProfile(CraftPlayerProfile.validateSkullProfile(((CraftPlayerProfile) profile).buildGameProfile()));
         }
     }
 
@@ -134,7 +134,7 @@
     @Override
     public BlockFace getRotation() {
         BlockData blockData = this.getBlockData();
-        return (blockData instanceof Rotatable) ? ((Rotatable) blockData).getRotation() : ((Directional) blockData).getFacing();
+        return (blockData instanceof Rotatable rotatable) ? rotatable.getRotation() : ((Directional) blockData).getFacing();
     }
 
     @Override
@@ -187,7 +187,7 @@
         super.applyTo(skull);
 
         if (this.getSkullType() == SkullType.PLAYER) {
-            skull.setOwner(new ResolvableProfile(this.profile));
+            skull.setOwner(this.hasOwner() ? this.profile : null);
         }
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java	(date 1729674280031)
@@ -53,14 +53,14 @@
 
     @Override
     public int getMaxEntities() {
-        return this.getSnapshot().bridge$maxBees();
+        return this.getSnapshot().maxBees;
     }
 
     @Override
     public void setMaxEntities(int max) {
         Preconditions.checkArgument(max > 0, "Max bees must be more than 0");
 
-        this.getSnapshot().banner$setMaxBees(max);
+        this.getSnapshot().maxBees = max;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java b/banner-server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java	(date 1729674280312)
@@ -12,6 +12,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.stream.Collectors;
@@ -19,13 +20,15 @@
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.server.dedicated.DedicatedServer;
-import org.apache.commons.lang3.StringUtils;
+import net.minecraft.world.item.component.ResolvableProfile;
+import org.apache.commons.lang.StringUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.configuration.ConfigSerializationUtil;
 import org.bukkit.profile.PlayerProfile;
 import org.bukkit.profile.PlayerTextures;
+import org.jetbrains.annotations.ApiStatus;
 
 @SerializableAs("PlayerProfile")
 public final class CraftPlayerProfile implements PlayerProfile {
@@ -40,6 +43,15 @@
         return gameProfile;
     }
 
+    @Nonnull
+    public static ResolvableProfile validateSkullProfile(@Nonnull ResolvableProfile resolvableProfile) {
+        // The ResolvableProfile needs to contain either both a uuid and textures, or a name.
+        boolean isValidSkullProfile = (resolvableProfile.name().isPresent())
+                || (resolvableProfile.id().isPresent() || resolvableProfile.properties().containsKey(CraftPlayerTextures.PROPERTY_NAME));
+        Preconditions.checkArgument(isValidSkullProfile, "The skull profile is missing a name or textures!");
+        return resolvableProfile;
+    }
+
     @Nullable
     public static Property getProperty(@Nonnull GameProfile profile, String propertyName) {
         return Iterables.getFirst(profile.getProperties().get(propertyName), null);
@@ -51,10 +63,23 @@
     private final PropertyMap properties = new PropertyMap();
     private final CraftPlayerTextures textures = new CraftPlayerTextures(this);
 
-    public CraftPlayerProfile(UUID uniqueId, String name) {
-        Preconditions.checkArgument((uniqueId != null) || !StringUtils.isBlank(name), "uniqueId is null or name is blank");
-        this.uniqueId = (uniqueId == null) ? Util.NIL_UUID : uniqueId;
-        this.name = (name == null) ? "" : name;
+    private CraftPlayerProfile(UUID uniqueId, String name, boolean applyPreconditions) {
+        if (applyPreconditions) {
+            Preconditions.checkArgument((uniqueId != null) || !StringUtils.isBlank(name), "uniqueId is null or name is blank");
+        }
+        this.uniqueId = uniqueId;
+        this.name = name;
+    }
+
+    public CraftPlayerProfile(UUID uniqueId, String name) {
+        this(uniqueId, name, true);
+    }
+
+    // The ResolvableProfile used in Components can have just the properties then need ignore all checks internally
+    @ApiStatus.Internal
+    public CraftPlayerProfile(@Nonnull ResolvableProfile resolvableProfile) {
+        this(resolvableProfile.id().orElse(null), resolvableProfile.name().orElse(null), false);
+        this.properties.putAll(resolvableProfile.properties());
     }
 
     // The Map of properties of the given GameProfile is not immutable. This captures a snapshot of the properties of
@@ -72,12 +97,12 @@
 
     @Override
     public UUID getUniqueId() {
-        return (this.uniqueId.equals(Util.NIL_UUID)) ? null : this.uniqueId;
+        return (Objects.equals(this.uniqueId, Util.NIL_UUID)) ? null : this.uniqueId;
     }
 
     @Override
     public String getName() {
-        return (this.name.isEmpty()) ? null : this.name;
+        return (StringUtils.isBlank(this.name)) ? null : this.name;
     }
 
     @Nullable
@@ -145,6 +170,14 @@
         return new CraftPlayerProfile(profile);
     }
 
+    // This always returns a new GameProfile instance to ensure that property changes to the original or previously
+    // built ResolvableProfile don't affect the use of this profile in other contexts.
+    @Nonnull
+    public ResolvableProfile buildResolvableProfile() {
+        this.rebuildDirtyProperties();
+        return new ResolvableProfile(Optional.ofNullable(this.name), Optional.ofNullable(this.uniqueId), this.properties);
+    }
+
     // This always returns a new GameProfile instance to ensure that property changes to the original or previously
     // built GameProfiles don't affect the use of this profile in other contexts.
     @Nonnull
@@ -184,8 +217,7 @@
     @Override
     public boolean equals(Object obj) {
         if (this == obj) return true;
-        if (!(obj instanceof CraftPlayerProfile)) return false;
-        CraftPlayerProfile other = (CraftPlayerProfile) obj;
+        if (!(obj instanceof CraftPlayerProfile other)) return false;
         if (!Objects.equals(this.uniqueId, other.uniqueId)) return false;
         if (!Objects.equals(this.name, other.name)) return false;
 
@@ -238,18 +270,16 @@
     @Override
     public Map<String, Object> serialize() {
         Map<String, Object> map = new LinkedHashMap<>();
-        if (this.getUniqueId() != null) {
-            map.put("uniqueId", this.getUniqueId().toString());
+        if (this.uniqueId != null) {
+            map.put("uniqueId", this.uniqueId.toString());
         }
-        if (this.getName() != null) {
+        if (this.name != null) {
             map.put("name", this.getName());
         }
         this.rebuildDirtyProperties();
         if (!this.properties.isEmpty()) {
             List<Object> propertiesData = new ArrayList<>();
-            this.properties.forEach((propertyName, property) -> {
-                propertiesData.add(CraftProfileProperty.serialize(property));
-            });
+            this.properties.forEach((propertyName, property) -> propertiesData.add(CraftProfileProperty.serialize(property)));
             map.put("properties", propertiesData);
         }
         return map;
@@ -264,7 +294,7 @@
 
         if (map.containsKey("properties")) {
             for (Object propertyData : (List<?>) map.get("properties")) {
-                Preconditions.checkArgument(propertyData instanceof Map, "Propertu data (%s) is not a valid Map", propertyData);
+                Preconditions.checkArgument(propertyData instanceof Map, "Property data (%s) is not a valid Map", propertyData);
                 Property property = CraftProfileProperty.deserialize((Map<?, ?>) propertyData);
                 profile.properties.put(property.name(), property);
             }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java	(date 1729674280026)
@@ -2,8 +2,13 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import java.util.Collections;
+import java.util.Optional;
+import net.minecraft.advancements.critereon.ItemPredicate;
+import net.minecraft.advancements.critereon.MinMaxBounds;
+import net.minecraft.core.component.DataComponentPredicate;
+import net.minecraft.core.component.DataComponents;
+import net.minecraft.network.chat.Component;
 import net.minecraft.world.LockCode;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.entity.BeaconBlockEntity;
@@ -11,9 +16,11 @@
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.Beacon;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.LivingEntity;
+import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
@@ -35,7 +42,7 @@
         if (tileEntity instanceof BeaconBlockEntity) {
             BeaconBlockEntity beacon = (BeaconBlockEntity) tileEntity;
 
-            Collection<Player> nms = BukkitMethodHooks.getHumansInRange(beacon.getLevel(), beacon.getBlockPos(), beacon.levels);
+            Collection<Player> nms = BeaconBlockEntity.getHumansInRange(beacon.getLevel(), beacon.getBlockPos(), beacon.levels);
             Collection<LivingEntity> bukkit = new ArrayList<LivingEntity>(nms.size());
 
             for (Player human : nms) {
@@ -87,17 +94,33 @@
 
     @Override
     public boolean isLocked() {
-        return !this.getSnapshot().lockKey.key().isEmpty();
+        return this.getSnapshot().lockKey != LockCode.NO_LOCK;
     }
 
     @Override
     public String getLock() {
-        return this.getSnapshot().lockKey.key();
+        Optional<? extends Component> customName = this.getSnapshot().lockKey.predicate().components().asPatch().get(DataComponents.CUSTOM_NAME);
+
+        return (customName != null) ? customName.map(CraftChatMessage::fromComponent).orElse("") : "";
     }
 
     @Override
     public void setLock(String key) {
-        this.getSnapshot().lockKey = (key == null) ? LockCode.NO_LOCK : new LockCode(key);
+        if (key == null) {
+            this.getSnapshot().lockKey = LockCode.NO_LOCK;
+        } else {
+            DataComponentPredicate predicate = DataComponentPredicate.builder().expect(DataComponents.CUSTOM_NAME, CraftChatMessage.fromStringOrNull(key)).build();
+            this.getSnapshot().lockKey = new LockCode(new ItemPredicate(Optional.empty(), MinMaxBounds.Ints.ANY, predicate, Collections.emptyMap()));
+        }
+    }
+
+    @Override
+    public void setLockItem(ItemStack key) {
+        if (key == null) {
+            this.getSnapshot().lockKey = LockCode.NO_LOCK;
+        } else {
+            this.getSnapshot().lockKey = new LockCode(CraftItemStack.asCriterionConditionItem(key));
+        }
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java	(date 1729674280036)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.block;
 
-import com.mohistmc.banner.bukkit.DoubleChestInventory;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.ChestBlock;
@@ -52,8 +51,8 @@
         ChestBlock blockChest = (ChestBlock) (this.getType() == Material.CHEST ? Blocks.CHEST : Blocks.TRAPPED_CHEST);
         MenuProvider nms = blockChest.getMenuProvider(this.data, world.getHandle(), this.getPosition(), true);
 
-        if (nms instanceof DoubleChestInventory) {
-            inventory = new CraftInventoryDoubleChest((DoubleChestInventory) nms);
+        if (nms instanceof ChestBlock.DoubleInventory) {
+            inventory = new CraftInventoryDoubleChest((ChestBlock.DoubleInventory) nms);
         }
         return inventory;
     }
@@ -61,27 +60,27 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIOpen((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, openCount + 1);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(true);
+        this.getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIClose((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, 0);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(false);
+        this.getTileEntity().openersCounter.opened = false;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java b/banner-server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java	(date 1729674280124)
@@ -19,7 +19,7 @@
 
     @Override
     public SocketAddress getAddress() {
-       return this.listener.bridge$socketAddress();
+       return this.listener.socketAddress;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/banner-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java	(date 1729674280124)
@@ -9,6 +9,7 @@
 import java.util.List;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
 import org.bukkit.Location;
 import org.bukkit.command.BlockCommandSender;
@@ -20,7 +21,6 @@
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftMinecartCommand;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.minecart.CommandMinecart;
 
 public final class VanillaCommandWrapper extends BukkitCommand {
@@ -62,12 +62,12 @@
     }
 
     public static CommandSourceStack getListener(CommandSender sender) {
-        if (sender instanceof Entity) {
+        if (sender instanceof CraftEntity entity) {
             if (sender instanceof CommandMinecart) {
                 return ((MinecartCommandBlock) ((CraftMinecartCommand) sender).getHandle()).getCommandBlock().createCommandSourceStack();
             }
 
-            return ((CraftEntity) sender).getHandle().createCommandSourceStack();
+            return entity.getHandle().createCommandSourceStackForNameResolution((ServerLevel) entity.getHandle().level());
         }
         if (sender instanceof BlockCommandSender) {
             return ((CraftBlockCommandSender) sender).getWrapper();
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java	(date 1729674280045)
@@ -19,27 +19,27 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (!this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIOpen((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, openCount + 1);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(true);
+        this.getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().openersCounter.bridge$opened() && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
+        if (this.getTileEntity().openersCounter.opened && this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
             BlockState block = this.getTileEntity().getBlockState();
             int openCount = this.getTileEntity().openersCounter.getOpenerCount();
 
             this.getTileEntity().openersCounter.onAPIClose((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block);
             this.getTileEntity().openersCounter.openerAPICountChanged((net.minecraft.world.level.Level) this.getWorldHandle(), this.getPosition(), block, openCount, 0);
         }
-        this.getTileEntity().openersCounter.banner$setOpened(false);
+        this.getTileEntity().openersCounter.opened = false;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java	(date 1729674280047)
@@ -83,8 +83,7 @@
         ItemStack nms = CraftItemStack.asNMSCopy(record);
 
         JukeboxBlockEntity snapshot = this.getSnapshot();
-        // Banner TODO fixme
-        snapshot.setSongItemWithoutPlaying(nms/*, snapshot.getSongPlayer().getTicksSinceSongStarted()*/);
+        snapshot.setSongItemWithoutPlaying(nms, snapshot.getSongPlayer().getTicksSinceSongStarted());
 
         this.data = this.data.setValue(JukeboxBlock.HAS_RECORD, !nms.isEmpty());
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftStructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftStructure.java b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftStructure.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftStructure.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftStructure.java	(date 1729674280219)
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.generator.structure;
 
+import com.google.common.base.Suppliers;
+import java.util.function.Supplier;
 import net.minecraft.core.registries.Registries;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
@@ -20,12 +22,12 @@
 
     private final NamespacedKey key;
     private final net.minecraft.world.level.levelgen.structure.Structure structure;
-    private final StructureType structureType;
+    private final Supplier<StructureType> structureType;
 
     public CraftStructure(NamespacedKey key, net.minecraft.world.level.levelgen.structure.Structure structure) {
         this.key = key;
         this.structure = structure;
-        this.structureType = CraftStructureType.minecraftToBukkit(structure.type());
+        this.structureType = Suppliers.memoize(() -> CraftStructureType.minecraftToBukkit(structure.type()));
     }
 
     @Override
@@ -35,7 +37,7 @@
 
     @Override
     public StructureType getStructureType() {
-        return this.structureType;
+        return this.structureType.get();
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/structure/CraftGeneratedStructure.java	(date 1729674280219)
@@ -46,9 +46,6 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        /*
-        return this.handle.persistentDataContainer;*/
-        return null;
-        // Banner TODO
+        return this.handle.persistentDataContainer;
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java	(date 1729674280219)
@@ -10,6 +10,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.WorldGenLevel;
@@ -83,9 +84,9 @@
             for (int z = -(this.buffer >> 4); z <= (this.buffer >> 4); z++) {
                 ProtoChunk chunk = (ProtoChunk) access.getChunk(this.centerChunkX + x, this.centerChunkZ + z);
                 for (CompoundTag compound : chunk.getEntities()) {
-                    EntityType.loadEntityRecursive(compound, access.getMinecraftWorld(), (entity) -> {
+                    EntityType.loadEntityRecursive(compound, access.getMinecraftWorld(), EntitySpawnReason.LOAD, (entity) -> {
                         if (this.region.contains(entity.getX(), entity.getY(), entity.getZ())) {
-                            entity.banner$setGeneration(true);
+                            entity.generation = true;
                             this.entities.add(entity);
                         } else {
                             this.outsideEntities.add(entity);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java	(date 1729674280219)
@@ -26,7 +26,6 @@
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGeneratorStructureState;
 import net.minecraft.world.level.chunk.LevelChunkSection;
-import net.minecraft.world.level.levelgen.GenerationStep;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.LegacyRandomSource;
 import net.minecraft.world.level.levelgen.RandomState;
@@ -223,14 +222,14 @@
     }
 
     @Override
-    public void applyCarvers(WorldGenRegion chunkRegion, long seed, RandomState noiseConfig, BiomeManager biomeAccess, StructureManager structureAccessor, ChunkAccess chunk, GenerationStep.Carving carverStep) {
+    public void applyCarvers(WorldGenRegion chunkRegion, long seed, RandomState noiseConfig, BiomeManager biomeAccess, StructureManager structureAccessor, ChunkAccess chunk) {
         WorldgenRandom random = CustomChunkGenerator.getSeededRandom();
         int x = chunk.getPos().x;
         int z = chunk.getPos().z;
 
         random.setSeed(Mth.getSeed(x, "should-caves".hashCode(), z) ^ chunkRegion.getSeed());
         if (this.generator.shouldGenerateCaves(this.world.getWorld(), new RandomSourceWrapper.RandomWrapper(random), x, z)) {
-            this.delegate.applyCarvers(chunkRegion, seed, noiseConfig, biomeAccess, structureAccessor, chunk, carverStep);
+            this.delegate.applyCarvers(chunkRegion, seed, noiseConfig, biomeAccess, structureAccessor, chunk);
         }
 
         // Minecraft removed the LIQUID_CARVERS stage from world generation, without removing the LIQUID Carving enum.
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java	(date 1729674280032)
@@ -1,8 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
 import java.util.Set;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.component.DataComponentMap;
 import net.minecraft.core.component.DataComponentPatch;
@@ -11,6 +9,7 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import org.bukkit.Location;
@@ -49,7 +48,7 @@
 
     private RegistryAccess getRegistryAccess() {
         LevelAccessor worldHandle = this.getWorldHandle();
-        return (worldHandle != null) ? worldHandle.registryAccess() : BukkitMethodHooks.getDefaultRegistryAccess();
+        return (worldHandle != null) ? worldHandle.registryAccess() : MinecraftServer.getDefaultRegistryAccess();
     }
 
     private T createSnapshot(T tileEntity) {
@@ -86,7 +85,7 @@
     }
 
     // gets the wrapped TileEntity
-    public T getTileEntity() {
+    protected T getTileEntity() {
         return this.tileEntity;
     }
 
@@ -110,12 +109,28 @@
         return this.snapshot.saveWithFullMetadata(this.getRegistryAccess());
     }
 
-    public CompoundTag getSnapshotNBTWithoutComponents() {
-        CompoundTag nbt = this.getSnapshotNBT();
+    public CompoundTag getItemNBT() {
+        // update snapshot
+        this.applyTo(this.snapshot);
+
+        // See TileEntity#saveToItem
+        CompoundTag nbt = this.snapshot.saveCustomOnly(this.getRegistryAccess());
         this.snapshot.removeComponentsFromTag(nbt);
         return nbt;
     }
 
+    public void addEntityType(CompoundTag nbt) {
+        BlockEntity.addEntityType(nbt, this.snapshot.getType());
+    }
+
+    // gets the packet data of the TileEntity represented by this block state
+    public CompoundTag getUpdateNBT() {
+        // update snapshot
+        this.applyTo(this.snapshot);
+
+        return this.snapshot.getUpdateTag(this.getRegistryAccess());
+    }
+
     // copies the data of the given tile entity to this block state
     protected void load(T tileEntity) {
         if (tileEntity != null && tileEntity != this.snapshot) {
@@ -152,13 +167,12 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return this.getSnapshot().bridge$persistentDataContainer();
+        return this.getSnapshot().persistentDataContainer;
     }
 
     @Nullable
     public Packet<ClientGamePacketListener> getUpdatePacket(@NotNull Location location) {
-        T vanillaTileEntitiy = (T) BlockEntity.loadStatic(CraftLocation.toBlockPosition(location), this.getHandle(), this.getSnapshotNBT(), this.getRegistryAccess());
-        return ClientboundBlockEntityDataPacket.create(vanillaTileEntitiy);
+        return new ClientboundBlockEntityDataPacket(CraftLocation.toBlockPosition(location), this.snapshot.getType(), this.getUpdateNBT());
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java	(date 1729674280038)
@@ -2,8 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.level.block.entity.ConduitBlockEntity;
 import net.minecraft.world.phys.AABB;
@@ -75,7 +73,7 @@
     public int getRange() {
         this.ensureNoWorldGeneration();
         ConduitBlockEntity conduit = (ConduitBlockEntity) this.getTileEntityFromWorld();
-        return (conduit != null) ? BukkitMethodHooks.getRange(conduit.effectBlocks) : 0;
+        return (conduit != null) ? ConduitBlockEntity.getRange(conduit.effectBlocks) : 0;
     }
 
     @Override
@@ -103,8 +101,7 @@
             conduit.destroyTargetUUID = target.getUniqueId();
         }
 
-        // Banner TODO fixme
-        ConduitBlockEntity.updateDestroyTarget(conduit.getLevel(), this.getPosition(), this.data, conduit.effectBlocks, conduit/*, *false*/);
+        ConduitBlockEntity.updateDestroyTarget(conduit.getLevel(), this.getPosition(), this.data, conduit.effectBlocks, conduit, false);
         return true;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftTrialSpawner.java	(date 1729674280047)
@@ -4,6 +4,7 @@
 import com.google.common.collect.ImmutableSet;
 import java.util.Collection;
 import java.util.UUID;
+import net.minecraft.core.Holder;
 import net.minecraft.world.level.block.TrialSpawnerBlock;
 import net.minecraft.world.level.block.entity.TrialSpawnerBlockEntity;
 import net.minecraft.world.level.block.entity.trialspawner.TrialSpawnerData;
@@ -44,7 +45,7 @@
 
     @Override
     public int getRequiredPlayerRange() {
-        return this.getSnapshot().trialSpawner.getRequiredPlayerRange();
+      return this.getSnapshot().trialSpawner.getRequiredPlayerRange();
     }
 
     @Override
@@ -139,20 +140,20 @@
 
     @Override
     public TrialSpawnerConfiguration getNormalConfiguration() {
-        return this.normalConfig;
+       return this.normalConfig;
     }
 
     @Override
     public TrialSpawnerConfiguration getOminousConfiguration() {
-        return this.ominousConfig;
+       return this.ominousConfig;
     }
 
     @Override
     protected void applyTo(TrialSpawnerBlockEntity tileEntity) {
         super.applyTo(tileEntity);
 
-        tileEntity.trialSpawner.normalConfig = this.normalConfig.toMinecraft();
-        tileEntity.trialSpawner.ominousConfig = this.ominousConfig.toMinecraft();
+        tileEntity.trialSpawner.normalConfig = Holder.direct(this.normalConfig.toMinecraft());
+        tileEntity.trialSpawner.ominousConfig = Holder.direct(this.ominousConfig.toMinecraft());
     }
 
     private TrialSpawnerData getTrialData() {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmor.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmor.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmor.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmor.java	(date 1729674280248)
@@ -20,7 +20,7 @@
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaArmor extends CraftMetaItem implements ArmorMeta {
 
-    static final ItemMetaKeyType<net.minecraft.world.item.armortrim.ArmorTrim> TRIM = new ItemMetaKeyType<>(DataComponents.TRIM, "trim");
+    static final ItemMetaKeyType<net.minecraft.world.item.equipment.trim.ArmorTrim> TRIM = new ItemMetaKeyType<>(DataComponents.TRIM, "trim");
     static final ItemMetaKey TRIM_MATERIAL = new ItemMetaKey("material");
     static final ItemMetaKey TRIM_PATTERN = new ItemMetaKey("pattern");
 
@@ -43,7 +43,7 @@
 
             this.trim = new ArmorTrim(trimMaterial, trimPattern);
 
-            if (!trimCompound.showInTooltip) {
+            if (!trimCompound.showInTooltip()) {
                 this.addItemFlags(ItemFlag.HIDE_ARMOR_TRIM);
             }
         });
@@ -78,7 +78,7 @@
         super.applyToItem(itemTag);
 
         if (this.hasTrim()) {
-            itemTag.put(CraftMetaArmor.TRIM, new net.minecraft.world.item.armortrim.ArmorTrim(CraftTrimMaterial.bukkitToMinecraftHolder(this.trim.getMaterial()), CraftTrimPattern.bukkitToMinecraftHolder(this.trim.getPattern()), !this.hasItemFlag(ItemFlag.HIDE_ARMOR_TRIM)));
+            itemTag.put(CraftMetaArmor.TRIM, new net.minecraft.world.item.equipment.trim.ArmorTrim(CraftTrimMaterial.bukkitToMinecraftHolder(this.trim.getMaterial()), CraftTrimPattern.bukkitToMinecraftHolder(this.trim.getPattern()), !this.hasItemFlag(ItemFlag.HIDE_ARMOR_TRIM)));
         }
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java	(date 1729674280052)
@@ -13,6 +13,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.level.EmptyBlockGetter;
 import net.minecraft.world.level.block.Block;
@@ -34,6 +35,7 @@
 import org.bukkit.block.data.BlockData;
 import org.bukkit.block.structure.Mirror;
 import org.bukkit.block.structure.StructureRotation;
+import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.CraftSoundGroup;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBlock;
@@ -495,9 +497,10 @@
         register(net.minecraft.world.level.block.ChiseledBookShelfBlock.class, org.bukkit.craftbukkit.block.impl.CraftChiseledBookShelf::new);
         register(net.minecraft.world.level.block.CopperBulbBlock.class, org.bukkit.craftbukkit.block.impl.CraftCopperBulb::new);
         register(net.minecraft.world.level.block.CrafterBlock.class, org.bukkit.craftbukkit.block.impl.CraftCrafter::new);
+        register(net.minecraft.world.level.block.CreakingHeartBlock.class, org.bukkit.craftbukkit.block.impl.CraftCreakingHeart::new);
         register(net.minecraft.world.level.block.DecoratedPotBlock.class, org.bukkit.craftbukkit.block.impl.CraftDecoratedPot::new);
-        register(net.minecraft.world.level.block.EquipableCarvedPumpkinBlock.class, org.bukkit.craftbukkit.block.impl.CraftEquipableCarvedPumpkin::new);
         register(net.minecraft.world.level.block.GlowLichenBlock.class, org.bukkit.craftbukkit.block.impl.CraftGlowLichen::new);
+        register(net.minecraft.world.level.block.HangingMossBlock.class, org.bukkit.craftbukkit.block.impl.CraftHangingMoss::new);
         register(net.minecraft.world.level.block.HangingRootsBlock.class, org.bukkit.craftbukkit.block.impl.CraftHangingRoots::new);
         register(net.minecraft.world.level.block.HeavyCoreBlock.class, org.bukkit.craftbukkit.block.impl.CraftHeavyCore::new);
         register(net.minecraft.world.level.block.InfestedRotatedPillarBlock.class, org.bukkit.craftbukkit.block.impl.CraftInfestedRotatedPillar::new);
@@ -507,6 +510,7 @@
         register(net.minecraft.world.level.block.MangroveLeavesBlock.class, org.bukkit.craftbukkit.block.impl.CraftMangroveLeaves::new);
         register(net.minecraft.world.level.block.MangrovePropaguleBlock.class, org.bukkit.craftbukkit.block.impl.CraftMangrovePropagule::new);
         register(net.minecraft.world.level.block.MangroveRootsBlock.class, org.bukkit.craftbukkit.block.impl.CraftMangroveRoots::new);
+        register(net.minecraft.world.level.block.MossyCarpetBlock.class, org.bukkit.craftbukkit.block.impl.CraftMossyCarpet::new);
         register(net.minecraft.world.level.block.PiglinWallSkullBlock.class, org.bukkit.craftbukkit.block.impl.CraftPiglinWallSkull::new);
         register(net.minecraft.world.level.block.PinkPetalsBlock.class, org.bukkit.craftbukkit.block.impl.CraftPinkPetals::new);
         register(net.minecraft.world.level.block.PitcherCropBlock.class, org.bukkit.craftbukkit.block.impl.CraftPitcherCrop::new);
@@ -553,7 +557,7 @@
                 }
 
                 StringReader reader = new StringReader(data);
-                BlockStateParser.BlockResult arg = BlockStateParser.parseForBlock(BuiltInRegistries.BLOCK.asLookup(), reader, false);
+                BlockStateParser.BlockResult arg = BlockStateParser.parseForBlock(CraftRegistry.getMinecraftRegistry(Registries.BLOCK), reader, false);
                 Preconditions.checkArgument(!reader.canRead(), "Spurious trailing data: " + data);
 
                 blockData = arg.blockState();
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java	(date 1729674280239)
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Preconditions;
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
+import net.minecraft.network.protocol.game.ClientboundSetHeldSlotPacket;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.player.Inventory;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
@@ -135,7 +136,7 @@
                 this.setHelmet(item);
                 break;
             default:
-                throw new IllegalArgumentException("Not implemented. This is a bug");
+                throw new IllegalArgumentException("Could not set slot " + slot + " - not a valid slot for PlayerInventory");
         }
     }
 
@@ -162,7 +163,7 @@
             case HEAD:
                 return this.getHelmet();
             default:
-                throw new IllegalArgumentException("Not implemented. This is a bug");
+                throw new IllegalArgumentException("Could not get slot " + slot + " - not a valid slot for PlayerInventory");
         }
     }
 
@@ -175,7 +176,7 @@
     public void setHeldItemSlot(int slot) {
         Preconditions.checkArgument(slot >= 0 && slot < Inventory.getSelectionSize(), "Slot (%s) is not between 0 and %s inclusive", slot, Inventory.getSelectionSize() - 1);
         this.getInventory().selected = slot;
-        ((CraftPlayer) this.getHolder()).getHandle().connection.send(new ClientboundSetCarriedItemPacket(slot));
+        ((CraftPlayer) this.getHolder()).getHandle().connection.send(new ClientboundSetHeldSlotPacket(slot));
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java	(date 1729674280032)
@@ -6,14 +6,12 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
-
-import com.mohistmc.banner.bukkit.BukkitFieldHooks;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.item.BoneMealItem;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.ClipContext;
@@ -21,6 +19,7 @@
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.RedStoneWireBlock;
+import net.minecraft.world.level.block.SaplingBlock;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
@@ -341,7 +340,7 @@
 
     @Override
     public double getTemperature() {
-        return this.world.getBiome(this.position).value().getTemperature(this.position);
+        return this.world.getBiome(this.position).value().getTemperature(this.position, this.world.getSeaLevel());
     }
 
     @Override
@@ -470,15 +469,15 @@
         UseOnContext context = new UseOnContext(world, null, InteractionHand.MAIN_HAND, Items.BONE_MEAL.getDefaultInstance(), new BlockHitResult(Vec3.ZERO, direction, this.getPosition(), false));
 
         // SPIGOT-6895: Call StructureGrowEvent and BlockFertilizeEvent
-        world.banner$setCaptureTreeGeneration(true);
-        InteractionResult result = BukkitMethodHooks.applyBonemeal(context);
-        world.banner$setCaptureTreeGeneration(false);
+        world.captureTreeGeneration = true;
+        InteractionResult result = BoneMealItem.applyBonemeal(context);
+        world.captureTreeGeneration = false;
 
-        if (world.bridge$capturedBlockStates().size() > 0) {
-            TreeType treeType = BukkitFieldHooks.treeType();
-            BukkitFieldHooks.setTreeType(null);
-            List<BlockState> blocks = new ArrayList<>(world.bridge$capturedBlockStates().values());
-            world.bridge$capturedBlockStates().clear();
+        if (world.capturedBlockStates.size() > 0) {
+            TreeType treeType = SaplingBlock.treeType;
+            SaplingBlock.treeType = null;
+            List<BlockState> blocks = new ArrayList<>(world.capturedBlockStates.values());
+            world.capturedBlockStates.clear();
             StructureGrowEvent structureEvent = null;
 
             if (treeType != null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java	(date 1729674280233)
@@ -3,8 +3,6 @@
 import com.google.common.base.Preconditions;
 import java.util.function.Consumer;
 import net.minecraft.world.Container;
-import net.minecraft.world.inventory.AnvilMenu;
-import net.minecraft.world.inventory.CraftingContainer;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.inventory.view.CraftAnvilView;
 import org.bukkit.entity.HumanEntity;
@@ -31,17 +29,6 @@
         this.maximumRepairCost = CraftInventoryAnvil.DEFAULT_MAXIMUM_REPAIR_COST;
     }
 
-    // Banner start - compat for old version
-    private AnvilMenu container;
-
-    public CraftInventoryAnvil(Location location, Container inventory, Container resultInventory, AnvilMenu container) {
-        super(inventory, resultInventory);
-        this.location = location;
-        this.container = container;
-    }
-    // Banner end
-
-
     @Override
     public Location getLocation() {
         return this.location;
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java	(date 1729674280032)
@@ -8,11 +8,10 @@
 import java.util.Map;
 import java.util.function.BiFunction;
 import javax.annotation.Nullable;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.entity.BannerBlockEntity;
@@ -33,6 +32,7 @@
 import net.minecraft.world.level.block.entity.ComparatorBlockEntity;
 import net.minecraft.world.level.block.entity.ConduitBlockEntity;
 import net.minecraft.world.level.block.entity.CrafterBlockEntity;
+import net.minecraft.world.level.block.entity.CreakingHeartBlockEntity;
 import net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity;
 import net.minecraft.world.level.block.entity.DecoratedPotBlockEntity;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
@@ -150,6 +150,8 @@
                         Material.MANGROVE_WALL_SIGN,
                         Material.OAK_SIGN,
                         Material.OAK_WALL_SIGN,
+                        Material.PALE_OAK_SIGN,
+                        Material.PALE_OAK_WALL_SIGN,
                         Material.SPRUCE_SIGN,
                         Material.SPRUCE_WALL_SIGN,
                         Material.WARPED_SIGN,
@@ -177,6 +179,8 @@
                         Material.MANGROVE_WALL_HANGING_SIGN,
                         Material.OAK_HANGING_SIGN,
                         Material.OAK_WALL_HANGING_SIGN,
+                        Material.PALE_OAK_HANGING_SIGN,
+                        Material.PALE_OAK_WALL_HANGING_SIGN,
                         Material.SPRUCE_HANGING_SIGN,
                         Material.SPRUCE_WALL_HANGING_SIGN,
                         Material.WARPED_HANGING_SIGN,
@@ -314,6 +318,7 @@
         register(Material.CHISELED_BOOKSHELF, CraftChiseledBookshelf.class, CraftChiseledBookshelf::new, ChiseledBookShelfBlockEntity::new);
         register(Material.COMPARATOR, CraftComparator.class, CraftComparator::new, ComparatorBlockEntity::new);
         register(Material.CONDUIT, CraftConduit.class, CraftConduit::new, ConduitBlockEntity::new);
+        register(Material.CREAKING_HEART, CraftCreakingHeart.class, CraftCreakingHeart::new, CreakingHeartBlockEntity::new);
         register(Material.DAYLIGHT_DETECTOR, CraftDaylightDetector.class, CraftDaylightDetector::new, DaylightDetectorBlockEntity::new);
         register(Material.DECORATED_POT, CraftDecoratedPot.class, CraftDecoratedPot::new, DecoratedPotBlockEntity::new);
         register(Material.DISPENSER, CraftDispenser.class, CraftDispenser::new, DispenserBlockEntity::new);
@@ -347,7 +352,7 @@
         CraftBlockStates.FACTORIES.put(blockType, factory);
     }
 
-    public static <T extends BlockEntity, B extends CraftBlockEntityState<T>> void register(
+    private static <T extends BlockEntity, B extends CraftBlockEntityState<T>> void register(
             Material blockType,
             Class<B> blockStateType,
             BiFunction<World, T, B> blockStateConstructor,
@@ -401,7 +406,7 @@
 
     @Deprecated
     public static BlockState getBlockState(BlockPos blockPosition, Material material, @Nullable CompoundTag blockEntityTag) {
-        return CraftBlockStates.getBlockState(BukkitMethodHooks.getDefaultRegistryAccess(), blockPosition, material, blockEntityTag);
+        return CraftBlockStates.getBlockState(MinecraftServer.getDefaultRegistryAccess(), blockPosition, material, blockEntityTag);
     }
 
     public static BlockState getBlockState(LevelReader world, BlockPos blockPosition, Material material, @Nullable CompoundTag blockEntityTag) {
@@ -416,7 +421,7 @@
 
     @Deprecated
     public static BlockState getBlockState(net.minecraft.world.level.block.state.BlockState blockData, @Nullable CompoundTag blockEntityTag) {
-        return CraftBlockStates.getBlockState(BukkitMethodHooks.getDefaultRegistryAccess(), BlockPos.ZERO, blockData, blockEntityTag);
+        return CraftBlockStates.getBlockState(MinecraftServer.getDefaultRegistryAccess(), BlockPos.ZERO, blockData, blockEntityTag);
     }
 
     public static BlockState getBlockState(LevelReader world, BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, @Nullable CompoundTag blockEntityTag) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java b/banner-server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/packs/CraftDataPackManager.java	(date 1729674280302)
@@ -52,7 +52,7 @@
         Preconditions.checkArgument(world != null, "world cannot be null");
 
         CraftWorld craftWorld = ((CraftWorld) world);
-        return craftWorld.getHandle().bridge$serverLevelDataCB().getDataConfiguration().dataPacks().getEnabled().stream().map(packName -> {
+        return craftWorld.getHandle().serverLevelData.getDataConfiguration().dataPacks().getEnabled().stream().map(packName -> {
             Pack resourcePackLoader = this.getHandle().getPack(packName);
             if (resourcePackLoader != null) {
                 return new CraftDataPack(resourcePackLoader);
@@ -66,7 +66,7 @@
         Preconditions.checkArgument(world != null, "world cannot be null");
 
         CraftWorld craftWorld = ((CraftWorld) world);
-        return craftWorld.getHandle().bridge$serverLevelDataCB().getDataConfiguration().dataPacks().getDisabled().stream().map(packName -> {
+        return craftWorld.getHandle().serverLevelData.getDataConfiguration().dataPacks().getDisabled().stream().map(packName -> {
             Pack resourcePackLoader = this.getHandle().getPack(packName);
             if (resourcePackLoader != null) {
                 return new CraftDataPack(resourcePackLoader);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java	(date 1729674280239)
@@ -2,10 +2,18 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
+import java.util.Collections;
 import java.util.Map;
+import java.util.Optional;
+import net.minecraft.advancements.critereon.ItemPredicate;
+import net.minecraft.advancements.critereon.MinMaxBounds;
 import net.minecraft.core.Holder;
+import net.minecraft.core.HolderSet;
+import net.minecraft.core.component.DataComponentMap;
 import net.minecraft.core.component.DataComponentPatch;
+import net.minecraft.core.component.DataComponentPredicate;
 import net.minecraft.core.component.DataComponents;
+import net.minecraft.core.component.PatchedDataComponentMap;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.ItemEnchantments;
@@ -85,6 +93,13 @@
         return new CraftItemStack(CraftItemType.minecraftToBukkit(item), amount, (short) 0, null);
     }
 
+    public static ItemPredicate asCriterionConditionItem(ItemStack original) {
+        net.minecraft.world.item.ItemStack nms = CraftItemStack.asNMSCopy(original);
+        DataComponentPredicate predicate = DataComponentPredicate.allOf(PatchedDataComponentMap.fromPatch(DataComponentMap.EMPTY, nms.getComponentsPatch()));
+
+        return new ItemPredicate(Optional.of(HolderSet.direct(nms.getItemHolder())), MinMaxBounds.Ints.ANY, predicate, Collections.emptyMap());
+    }
+
     net.minecraft.world.item.ItemStack handle;
     private boolean isForInventoryDrop;
 
@@ -356,20 +371,6 @@
         return true;
     }
 
-    // Paper start - MC Utils
-    public static net.minecraft.world.item.ItemStack unwrap(ItemStack bukkit) {
-        if (bukkit instanceof CraftItemStack craftItemStack) {
-            return craftItemStack.handle != null ? craftItemStack.handle : net.minecraft.world.item.ItemStack.EMPTY;
-        } else {
-            return asNMSCopy(bukkit);
-        }
-    }
-
-    public static net.minecraft.world.item.ItemStack getOrCloneOnMutation(ItemStack old, ItemStack newInstance) {
-        return old == newInstance ? unwrap(old) : asNMSCopy(newInstance);
-    }
-    // Paper end - MC Utils
-
     @Override
     public boolean isSimilar(ItemStack stack) {
         if (stack == null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java	(date 1729674280268)
@@ -1,9 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.StonecuttingRecipe;
@@ -26,6 +25,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.StonecutterRecipe(this.getGroup(), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.StonecutterRecipe(this.getGroup(), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result))));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/banner-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java	(date 1729674280217)
@@ -39,7 +39,6 @@
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.monster.Slime;
 import net.minecraft.world.entity.monster.SpellcasterIllager;
-import net.minecraft.world.entity.npc.Npc;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.raid.Raid;
 import net.minecraft.world.inventory.AbstractContainerMenu;
@@ -72,7 +71,14 @@
 import org.bukkit.block.BlockState;
 import org.bukkit.block.Sign;
 import org.bukkit.block.sign.Side;
-import org.bukkit.craftbukkit.*;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.CraftExplosionResult;
+import org.bukkit.craftbukkit.CraftLootTable;
+import org.bukkit.craftbukkit.CraftRaid;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftStatistic;
+import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.block.CraftBlockStates;
@@ -119,12 +125,87 @@
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.Event.Result;
-import org.bukkit.event.block.*;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BellResonateEvent;
+import org.bukkit.event.block.BellRingEvent;
+import org.bukkit.event.block.BlockDamageAbortEvent;
+import org.bukkit.event.block.BlockDamageEvent;
+import org.bukkit.event.block.BlockDispenseLootEvent;
+import org.bukkit.event.block.BlockDropItemEvent;
+import org.bukkit.event.block.BlockExplodeEvent;
+import org.bukkit.event.block.BlockFadeEvent;
+import org.bukkit.event.block.BlockFormEvent;
+import org.bukkit.event.block.BlockGrowEvent;
+import org.bukkit.event.block.BlockIgniteEvent;
 import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
-import org.bukkit.event.entity.*;
+import org.bukkit.event.block.BlockMultiPlaceEvent;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.block.BlockShearEntityEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
+import org.bukkit.event.block.CrafterCraftEvent;
+import org.bukkit.event.block.EntityBlockFormEvent;
+import org.bukkit.event.block.FluidLevelChangeEvent;
+import org.bukkit.event.block.MoistureChangeEvent;
+import org.bukkit.event.block.NotePlayEvent;
+import org.bukkit.event.block.TNTPrimeEvent;
+import org.bukkit.event.block.VaultDisplayItemEvent;
+import org.bukkit.event.entity.AreaEffectCloudApplyEvent;
+import org.bukkit.event.entity.ArrowBodyCountChangeEvent;
+import org.bukkit.event.entity.BatToggleSleepEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.entity.CreeperPowerEvent;
+import org.bukkit.event.entity.EntityBreakDoorEvent;
+import org.bukkit.event.entity.EntityBreedEvent;
+import org.bukkit.event.entity.EntityChangeBlockEvent;
+import org.bukkit.event.entity.EntityDamageByBlockEvent;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
+import org.bukkit.event.entity.EntityDeathEvent;
+import org.bukkit.event.entity.EntityEnterLoveModeEvent;
+import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityInteractEvent;
+import org.bukkit.event.entity.EntityKnockbackByEntityEvent;
+import org.bukkit.event.entity.EntityKnockbackEvent;
+import org.bukkit.event.entity.EntityPickupItemEvent;
+import org.bukkit.event.entity.EntityPlaceEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.entity.EntityShootBowEvent;
+import org.bukkit.event.entity.EntitySpawnEvent;
+import org.bukkit.event.entity.EntitySpellCastEvent;
+import org.bukkit.event.entity.EntityTameEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.EntityTeleportEvent;
+import org.bukkit.event.entity.EntityToggleGlideEvent;
+import org.bukkit.event.entity.EntityToggleSwimEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.ExpBottleEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+import org.bukkit.event.entity.FireworkExplodeEvent;
+import org.bukkit.event.entity.FoodLevelChangeEvent;
+import org.bukkit.event.entity.HorseJumpEvent;
+import org.bukkit.event.entity.ItemDespawnEvent;
+import org.bukkit.event.entity.ItemMergeEvent;
+import org.bukkit.event.entity.ItemSpawnEvent;
+import org.bukkit.event.entity.LingeringPotionSplashEvent;
+import org.bukkit.event.entity.PigZapEvent;
+import org.bukkit.event.entity.PiglinBarterEvent;
+import org.bukkit.event.entity.PlayerDeathEvent;
+import org.bukkit.event.entity.PlayerLeashEntityEvent;
+import org.bukkit.event.entity.PotionSplashEvent;
+import org.bukkit.event.entity.ProjectileHitEvent;
+import org.bukkit.event.entity.ProjectileLaunchEvent;
+import org.bukkit.event.entity.SpawnerSpawnEvent;
+import org.bukkit.event.entity.StriderTemperatureChangeEvent;
+import org.bukkit.event.entity.TrialSpawnerSpawnEvent;
+import org.bukkit.event.entity.VillagerCareerChangeEvent;
 import org.bukkit.event.inventory.InventoryCloseEvent;
 import org.bukkit.event.inventory.InventoryOpenEvent;
 import org.bukkit.event.inventory.PrepareAnvilEvent;
@@ -171,7 +252,6 @@
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.inventory.view.AnvilView;
-import org.bukkit.inventory.view.MerchantView;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.util.Vector;
 
@@ -573,12 +653,10 @@
         if (entity instanceof net.minecraft.world.entity.LivingEntity && !(entity instanceof ServerPlayer)) {
             boolean isAnimal = entity instanceof Animal || entity instanceof WaterAnimal || entity instanceof AbstractGolem;
             boolean isMonster = entity instanceof Monster || entity instanceof Ghast || entity instanceof Slime;
-            boolean isNpc = entity instanceof Npc;
 
             if (spawnReason != SpawnReason.CUSTOM) {
-                if (isAnimal && !world.getWorld().getAllowAnimals() || isMonster && !world.getWorld().getAllowMonsters() || isNpc && !world.getCraftServer().getServer().areNpcsEnabled()) {
-                    entity.discard(); // Add Bukkit remove cause
-                    entity.pushRemoveCause(null);
+                if (isAnimal && !world.getWorld().getAllowAnimals() || isMonster && !world.getWorld().getAllowMonsters()) {
+                    entity.discard(null); // Add Bukkit remove cause
                     return false;
                 }
             }
@@ -616,29 +694,25 @@
         if (event != null && (event.isCancelled() || entity.isRemoved())) {
             Entity vehicle = entity.getVehicle();
             if (vehicle != null) {
-                vehicle.discard(); // Add Bukkit remove cause
-                vehicle.pushRemoveCause(null);
+                vehicle.discard(null); // Add Bukkit remove cause
             }
             for (Entity passenger : entity.getIndirectPassengers()) {
-                passenger.discard(); // Add Bukkit remove cause
-                passenger.pushRemoveCause(null);
+                passenger.discard(null); // Add Bukkit remove cause
             }
-            entity.discard(); // Add Bukkit remove cause
-            entity.pushRemoveCause(null);
+            entity.discard(null); // Add Bukkit remove cause
             return false;
         }
 
         // Spigot start - SPIGOT-7523: Merge after spawn event and only merge if the event was not cancelled (gets checked above)
         if (entity instanceof net.minecraft.world.entity.ExperienceOrb xp) {
-            double radius = world.bridge$spigotConfig().expMerge;
+            double radius = world.spigotConfig.expMerge;
             if (radius > 0) {
                 List<Entity> entities = world.getEntities(entity, entity.getBoundingBox().inflate(radius, radius, radius));
                 for (Entity e : entities) {
                     if (e instanceof net.minecraft.world.entity.ExperienceOrb loopItem) {
                         if (!loopItem.isRemoved()) {
                             xp.value += loopItem.value;
-                            loopItem.discard(); // Add Bukkit remove cause
-                            loopItem.pushRemoveCause(null);
+                            loopItem.discard(null); // Add Bukkit remove cause
                         }
                     }
                 }
@@ -826,11 +900,11 @@
     public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim, DamageSource damageSource, List<org.bukkit.inventory.ItemStack> drops) {
         CraftLivingEntity entity = (CraftLivingEntity) victim.getBukkitEntity();
         CraftDamageSource bukkitDamageSource = new CraftDamageSource(damageSource);
-        EntityDeathEvent event = new EntityDeathEvent(entity, bukkitDamageSource, drops, victim.getExpReward(damageSource.getEntity()));
         CraftWorld world = (CraftWorld) entity.getWorld();
+        EntityDeathEvent event = new EntityDeathEvent(entity, bukkitDamageSource, drops, victim.getExpReward(world.getHandle(), damageSource.getEntity()));
         Bukkit.getServer().getPluginManager().callEvent(event);
 
-        victim.banner$setExpToDrop(event.getDroppedExp());
+        victim.expToDrop = event.getDroppedExp();
 
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
             if (stack == null || stack.getType() == Material.AIR || stack.getAmount() == 0) continue;
@@ -844,22 +918,27 @@
     public static PlayerDeathEvent callPlayerDeathEvent(ServerPlayer victim, DamageSource damageSource, List<org.bukkit.inventory.ItemStack> drops, String deathMessage, boolean keepInventory) {
         CraftPlayer entity = victim.getBukkitEntity();
         CraftDamageSource bukkitDamageSource = new CraftDamageSource(damageSource);
-        PlayerDeathEvent event = new PlayerDeathEvent(entity, bukkitDamageSource, drops, victim.getExpReward(damageSource.getEntity()), 0, deathMessage);
+        PlayerDeathEvent event = new PlayerDeathEvent(entity, bukkitDamageSource, drops, victim.getExpReward(victim.serverLevel(), damageSource.getEntity()), 0, deathMessage);
         event.setKeepInventory(keepInventory);
-        event.setKeepLevel(victim.bridge$keepLevel()); // SPIGOT-2222: pre-set keepLevel
-        org.bukkit.World world = entity.getWorld();
+        event.setKeepLevel(victim.keepLevel); // SPIGOT-2222: pre-set keepLevel
         Bukkit.getServer().getPluginManager().callEvent(event);
 
-        victim.banner$setKeepLevel(event.getKeepLevel());
-        victim.banner$setNewLevel(event.getNewLevel());
-        victim.banner$setNewTotalExp(event.getNewTotalExp());
-        victim.banner$setExpToDrop(event.getDroppedExp());
-        victim.banner$setNewExp(event.getNewExp());
+        victim.keepLevel = event.getKeepLevel();
+        victim.newLevel = event.getNewLevel();
+        victim.newTotalExp = event.getNewTotalExp();
+        victim.expToDrop = event.getDroppedExp();
+        victim.newExp = event.getNewExp();
 
         for (org.bukkit.inventory.ItemStack stack : event.getDrops()) {
             if (stack == null || stack.getType() == Material.AIR) continue;
 
-            world.dropItem(entity.getLocation(), stack);
+            if (stack instanceof CraftItemStack craftItemStack && craftItemStack.isForInventoryDrop()) {
+                victim.drop(CraftItemStack.asNMSCopy(stack), true, false, false); // SPIGOT-7800, SPIGOT-7801: Vanilla Behaviour for Player Inventory dropped items
+            } else {
+                victim.forceDrops = true;
+                victim.spawnAtLocation(victim.serverLevel(), CraftItemStack.asNMSCopy(stack)); // SPIGOT-7806: Vanilla Behaviour for items not related to Player Inventory dropped items
+                victim.forceDrops = false;
+            }
         }
 
         return event;
@@ -880,7 +959,7 @@
 
     private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
         CraftDamageSource bukkitDamageSource = new CraftDamageSource(source);
-        Entity damager = (bukkitDamageSource.isIndirect() && source.getDirectEntity() != null) ? source.getDirectEntity() : source.getCausingEntity();
+        Entity damager = (source.getDamager() != null) ? source.getDamager() : source.getEntity();
         if (source.is(DamageTypeTags.IS_EXPLOSION)) {
             if (damager == null) {
                 return CraftEventFactory.callEntityDamageEvent(source.getDirectBlock(), source.getDirectBlockState(), entity, DamageCause.BLOCK_EXPLOSION, bukkitDamageSource, modifiers, modifierFunctions, cancelled);
@@ -927,8 +1006,10 @@
                 cause = DamageCause.MAGIC;
             } else if (source.is(DamageTypes.IN_FIRE)) {
                 cause = DamageCause.FIRE;
+            } else if (source.is(DamageTypes.CAMPFIRE)) {
+                cause = DamageCause.CAMPFIRE;
             } else {
-                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s", entity, source.getDirectBlock(), source.getMsgId()));
+                throw new IllegalStateException(String.format("Unhandled damage of %s by %s from %s [%s]", entity, source.getDirectBlock(), source.getMsgId(), source.typeHolder().getRegisteredName()));
             }
             return CraftEventFactory.callEntityDamageEvent(source.getDirectBlock(), source.getDirectBlockState(), entity, cause, bukkitDamageSource, modifiers, modifierFunctions, cancelled);
         }
@@ -985,7 +1066,7 @@
 
     private static EntityDamageEvent callEntityDamageEvent(Block damager, BlockState damagerState, Entity damagee, DamageCause cause, org.bukkit.damage.DamageSource bukkitDamageSource, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
         EntityDamageByBlockEvent event = new EntityDamageByBlockEvent(damager, damagerState, damagee.getBukkitEntity(), cause, bukkitDamageSource, modifiers, modifierFunctions);
-        return callEntityDamageEvent(event, damagee, cancelled);
+        return CraftEventFactory.callEntityDamageEvent(event, damagee, cancelled);
     }
 
     private static EntityDamageEvent callEntityDamageEvent(EntityDamageEvent event, Entity damagee, boolean cancelled) {
@@ -995,7 +1076,7 @@
         if (!event.isCancelled()) {
             event.getEntity().setLastDamageCause(event);
         } else {
-            damagee.banner$setLastDamageCancelled(true); // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+            damagee.lastDamageCancelled = true; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
         }
 
         return event;
@@ -1003,32 +1084,6 @@
 
     private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
 
-    // Banner start - remain for compat
-    public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, DamageSource source, double rawDamage, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
-        Map<DamageModifier, Double> modifiers = new EnumMap<>(DamageModifier.class);
-        Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<>(DamageModifier.class);
-        modifiers.put(DamageModifier.BASE, rawDamage);
-        modifierFunctions.put(DamageModifier.BASE, CraftEventFactory.ZERO);
-        if (source.is(DamageTypes.FALLING_BLOCK) || source.is(DamageTypes.FALLING_ANVIL)) {
-            modifiers.put(DamageModifier.HARD_HAT, hardHatModifier);
-            modifierFunctions.put(DamageModifier.HARD_HAT, hardHat);
-        }
-        if (damagee instanceof net.minecraft.world.entity.player.Player) {
-            modifiers.put(DamageModifier.BLOCKING, blockingModifier);
-            modifierFunctions.put(DamageModifier.BLOCKING, blocking);
-        }
-        modifiers.put(DamageModifier.ARMOR, armorModifier);
-        modifierFunctions.put(DamageModifier.ARMOR, armor);
-        modifiers.put(DamageModifier.RESISTANCE, resistanceModifier);
-        modifierFunctions.put(DamageModifier.RESISTANCE, resistance);
-        modifiers.put(DamageModifier.MAGIC, magicModifier);
-        modifierFunctions.put(DamageModifier.MAGIC, magic);
-        modifiers.put(DamageModifier.ABSORPTION, absorptionModifier);
-        modifierFunctions.put(DamageModifier.ABSORPTION, absorption);
-        return CraftEventFactory.handleEntityDamageEvent(damagee, source, modifiers, modifierFunctions);
-    }
-    // Banner end
-
     public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, DamageSource source, double rawDamage, double freezingModifier, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> freezing, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
         Map<DamageModifier, Double> modifiers = new EnumMap<>(DamageModifier.class);
         Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<>(DamageModifier.class);
@@ -1311,9 +1366,9 @@
         return event;
     }
 
-    public static void callPlayerItemBreakEvent(net.minecraft.world.entity.player.Player human, ItemStack brokenItem) {
+    public static void callPlayerItemBreakEvent(ServerPlayer human, ItemStack brokenItem) {
         CraftItemStack item = CraftItemStack.asCraftMirror(brokenItem);
-        PlayerItemBreakEvent event = new PlayerItemBreakEvent((Player) human.getBukkitEntity(), item);
+        PlayerItemBreakEvent event = new PlayerItemBreakEvent(human.getBukkitEntity(), item);
         Bukkit.getPluginManager().callEvent(event);
     }
 
@@ -1373,7 +1428,7 @@
     }
 
     public static BlockIgniteEvent callBlockIgniteEvent(Level world, BlockPos blockposition, Explosion explosion) {
-        org.bukkit.entity.Entity igniter = explosion.source == null ? null : explosion.source.getBukkitEntity();
+        org.bukkit.entity.Entity igniter = explosion.getDirectSourceEntity() == null ? null : explosion.getDirectSourceEntity().getBukkitEntity();
 
         BlockIgniteEvent event = new BlockIgniteEvent(CraftBlock.at(world, blockposition), IgniteCause.EXPLOSION, igniter);
         world.getCraftServer().getPluginManager().callEvent(event);
@@ -1510,13 +1565,6 @@
         event.getInventory().setItem(2, event.getResult());
         return event;
     }
-
-    public static PrepareAnvilEvent callPrepareAnvilEvent(InventoryView view, ItemStack item) {
-        PrepareAnvilEvent event = new PrepareAnvilEvent(view, CraftItemStack.asCraftMirror(item).clone());
-        event.getView().getPlayer().getServer().getPluginManager().callEvent(event);
-        event.getInventory().setItem(2, event.getResult());
-        return event;
-    }
 
     public static PrepareGrindstoneEvent callPrepareGrindstoneEvent(InventoryView view, ItemStack item) {
         PrepareGrindstoneEvent event = new PrepareGrindstoneEvent(view, CraftItemStack.asCraftMirror(item).clone());
@@ -1615,7 +1663,7 @@
         BlockPhysicsEvent event = new BlockPhysicsEvent(block, block.getBlockData());
         // Suppress during worldgen
         if (world instanceof Level) {
-            ((Level) world).getServer().bridge$server().getPluginManager().callEvent(event);
+            ((Level) world).getServer().server.getPluginManager().callEvent(event);
         }
         return event;
     }
@@ -1733,10 +1781,10 @@
 
     public static LootGenerateEvent callLootGenerateEvent(Container inventory, LootTable lootTable, LootContext lootInfo, List<ItemStack> loot, boolean plugin) {
         CraftWorld world = lootInfo.getLevel().getWorld();
-        Entity entity = lootInfo.getParamOrNull(LootContextParams.THIS_ENTITY);
+        Entity entity = lootInfo.getOptionalParameter(LootContextParams.THIS_ENTITY);
         List<org.bukkit.inventory.ItemStack> bukkitLoot = loot.stream().map(CraftItemStack::asCraftMirror).collect(Collectors.toCollection(ArrayList::new));
 
-        LootGenerateEvent event = new LootGenerateEvent(world, (entity != null ? entity.getBukkitEntity() : null), inventory.getOwner(), lootTable.bridge$craftLootTable(), CraftLootTable.convertContext(lootInfo), bukkitLoot, plugin);
+        LootGenerateEvent event = new LootGenerateEvent(world, (entity != null ? entity.getBukkitEntity() : null), inventory.getOwner(), lootTable.craftLootTable, CraftLootTable.convertContext(lootInfo), bukkitLoot, plugin);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java	(date 1729674280026)
@@ -37,7 +37,7 @@
     @Override
     public void open() {
         this.requirePlaced();
-        if (!this.getTileEntity().openersCounter.bridge$opened()) {
+        if (!this.getTileEntity().openersCounter.opened) {
             BlockState blockData = this.getTileEntity().getBlockState();
             boolean open = blockData.getValue(BarrelBlock.OPEN);
 
@@ -48,20 +48,20 @@
                 }
             }
         }
-        this.getTileEntity().openersCounter.banner$setOpened(true);
+        this.getTileEntity().openersCounter.opened = true;
     }
 
     @Override
     public void close() {
         this.requirePlaced();
-        if (this.getTileEntity().openersCounter.bridge$opened()) {
+        if (this.getTileEntity().openersCounter.opened) {
             BlockState blockData = this.getTileEntity().getBlockState();
             this.getTileEntity().updateBlockState(blockData, false);
             if (this.getWorldHandle() instanceof net.minecraft.world.level.Level) {
                 this.getTileEntity().playSound(blockData, SoundEvents.BARREL_CLOSE);
             }
         }
-        this.getTileEntity().openersCounter.banner$setOpened(false);
+        this.getTileEntity().openersCounter.opened = false;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java	(date 1729674280045)
@@ -2,7 +2,6 @@
 
 import com.google.common.collect.ImmutableMap;
 import java.util.Map;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
 import org.bukkit.Bukkit;
@@ -74,12 +73,12 @@
     @Override
     public Map<CookingRecipe<?>, Integer> getRecipesUsed() {
         ImmutableMap.Builder<CookingRecipe<?>, Integer> recipesUsed = ImmutableMap.builder();
-        for (Map.Entry<ResourceLocation, Integer> entrySet : this.getSnapshot().getRecipesUsed().object2IntEntrySet()) {
-            Recipe recipe = Bukkit.getRecipe(CraftNamespacedKey.fromMinecraft(entrySet.getKey()));
+        this.getSnapshot().recipesUsed.reference2IntEntrySet().fastForEach(entrySet -> {
+            Recipe recipe = Bukkit.getRecipe(CraftNamespacedKey.fromMinecraft(entrySet.getKey().location()));
             if (recipe instanceof CookingRecipe<?> cookingRecipe) {
                 recipesUsed.put(cookingRecipe, entrySet.getValue());
             }
-        }
+        });
 
         return recipesUsed.build();
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLectern.java	(date 1729674280239)
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BannerLecternInventory;
 import net.minecraft.world.Container;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.level.block.entity.LecternBlockEntity;
@@ -13,9 +12,8 @@
 
     public CraftInventoryLectern(Container inventory) {
         super(inventory);
-        if (inventory instanceof BannerLecternInventory bannerLecternInventory) {
-            bannerLecternInventory.setLecternBlockEntity((LecternBlockEntity) inventory);
-            this.tile = bannerLecternInventory.getLectern();
+        if (inventory instanceof LecternBlockEntity.LecternInventory) {
+            this.tile = ((LecternBlockEntity.LecternInventory) inventory).getLectern();
         }
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java	(date 1729674280038)
@@ -1,11 +1,20 @@
 package org.bukkit.craftbukkit.block;
 
+import java.util.Collections;
+import java.util.Optional;
+import net.minecraft.advancements.critereon.ItemPredicate;
+import net.minecraft.advancements.critereon.MinMaxBounds;
+import net.minecraft.core.component.DataComponentPredicate;
+import net.minecraft.core.component.DataComponents;
+import net.minecraft.network.chat.Component;
 import net.minecraft.world.LockCode;
 import net.minecraft.world.level.block.entity.BaseContainerBlockEntity;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.Container;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.inventory.ItemStack;
 
 public abstract class CraftContainer<T extends BaseContainerBlockEntity> extends CraftBlockEntityState<T> implements Container {
 
@@ -19,17 +28,33 @@
 
     @Override
     public boolean isLocked() {
-        return !this.getSnapshot().lockKey.key().isEmpty();
+        return this.getSnapshot().lockKey != LockCode.NO_LOCK;
     }
 
     @Override
     public String getLock() {
-        return this.getSnapshot().lockKey.key();
+        Optional<? extends Component> customName = this.getSnapshot().lockKey.predicate().components().asPatch().get(DataComponents.CUSTOM_NAME);
+
+        return (customName != null) ? customName.map(CraftChatMessage::fromComponent).orElse("") : "";
     }
 
     @Override
     public void setLock(String key) {
-        this.getSnapshot().lockKey = (key == null) ? LockCode.NO_LOCK : new LockCode(key);
+        if (key == null) {
+            this.getSnapshot().lockKey = LockCode.NO_LOCK;
+        } else {
+            DataComponentPredicate predicate = DataComponentPredicate.builder().expect(DataComponents.CUSTOM_NAME, CraftChatMessage.fromStringOrNull(key)).build();
+            this.getSnapshot().lockKey = new LockCode(new ItemPredicate(Optional.empty(), MinMaxBounds.Ints.ANY, predicate, Collections.emptyMap()));
+        }
+    }
+
+    @Override
+    public void setLockItem(ItemStack key) {
+        if (key == null) {
+            this.getSnapshot().lockKey = LockCode.NO_LOCK;
+        } else {
+            this.getSnapshot().lockKey = new LockCode(CraftItemStack.asCriterionConditionItem(key));
+        }
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTransformRecipe.java	(date 1729674280267)
@@ -1,9 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.SmithingTransformRecipe;
@@ -25,6 +24,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTransformRecipe(this.toNMS(this.getTemplate(), true), this.toNMS(this.getBase(), true), this.toNMS(this.getAddition(), true), CraftItemStack.asNMSCopy(result))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTransformRecipe(this.toNMSOptional(this.getTemplate(), false), this.toNMSOptional(this.getBase(), false), this.toNMSOptional(this.getAddition(), false), CraftItemStack.asNMSCopy(result))));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java	(date 1729674280231)
@@ -1,9 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.CampfireRecipe;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
@@ -27,6 +26,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.CampfireCookingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.CampfireCookingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemMetas.java	(date 1729674280239)
@@ -4,6 +4,7 @@
 import java.util.function.Function;
 import net.minecraft.world.item.BannerItem;
 import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.BundleItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.SignItem;
@@ -244,7 +245,8 @@
                 || itemType == ItemType.CALIBRATED_SCULK_SENSOR || itemType == ItemType.CHISELED_BOOKSHELF
                 || itemType == ItemType.DECORATED_POT || itemType == ItemType.SUSPICIOUS_SAND
                 || itemType == ItemType.SUSPICIOUS_GRAVEL || itemType == ItemType.CRAFTER
-                || itemType == ItemType.TRIAL_SPAWNER || itemType == ItemType.VAULT) {
+                || itemType == ItemType.TRIAL_SPAWNER || itemType == ItemType.VAULT
+                || itemType == ItemType.CREAKING_HEART) {
             return CraftItemMetas.asType(CraftItemMetas.BLOCK_STATE_META_DATA);
         }
         if (itemType == ItemType.SHIELD) {
@@ -270,7 +272,7 @@
         if (itemType == ItemType.COMPASS) {
             return CraftItemMetas.asType(CraftItemMetas.COMPASS_META_DATA);
         }
-        if (itemType == ItemType.BUNDLE) {
+        if (itemHandle instanceof BundleItem) {
             return CraftItemMetas.asType(CraftItemMetas.BUNDLE_META_DATA);
         }
         if (itemType == ItemType.GOAT_HORN) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java	(date 1729674280239)
@@ -15,24 +15,24 @@
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 
-public class CraftInventoryView<T extends AbstractContainerMenu> extends CraftAbstractInventoryView {
+public class CraftInventoryView<T extends AbstractContainerMenu, I extends Inventory> extends CraftAbstractInventoryView {
     protected final T container;
     private final CraftHumanEntity player;
-    private final CraftInventory viewing;
+    private final I viewing;
     private final String originalTitle;
     private String title;
 
-    public CraftInventoryView(HumanEntity player, Inventory viewing, T container) {
+    public CraftInventoryView(HumanEntity player, I viewing, T container) {
         // TODO: Should we make sure it really IS a CraftHumanEntity first? And a CraftInventory?
         this.player = (CraftHumanEntity) player;
-        this.viewing = (CraftInventory) viewing;
+        this.viewing = viewing;
         this.container = container;
         this.originalTitle = CraftChatMessage.fromComponent(container.getTitle());
         this.title = this.originalTitle;
     }
 
     @Override
-    public Inventory getTopInventory() {
+    public I getTopInventory() {
         return this.viewing;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java	(date 1729674280232)
@@ -1,10 +1,9 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.CustomRecipe;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ComplexRecipe;
 import org.bukkit.inventory.CraftingRecipe;
 import org.bukkit.inventory.ItemStack;
@@ -20,6 +19,6 @@
 
     @Override
     public void addToCraftingManager() {
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), this.recipe));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), this.recipe));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java	(date 1729674280177)
@@ -34,9 +34,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
-
-import net.md_5.bungee.chat.ComponentSerializer;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
@@ -46,7 +45,12 @@
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.common.*;
+import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
+import net.minecraft.network.protocol.common.ClientboundResourcePackPopPacket;
+import net.minecraft.network.protocol.common.ClientboundResourcePackPushPacket;
+import net.minecraft.network.protocol.common.ClientboundServerLinksPacket;
+import net.minecraft.network.protocol.common.ClientboundStoreCookiePacket;
+import net.minecraft.network.protocol.common.ClientboundTransferPacket;
 import net.minecraft.network.protocol.common.custom.DiscardedPayload;
 import net.minecraft.network.protocol.cookie.ClientboundCookieRequestPacket;
 import net.minecraft.network.protocol.cookie.ServerboundCookieResponsePacket;
@@ -79,7 +83,6 @@
 import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.ClientboundStopSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundSystemChatPacket;
 import net.minecraft.network.protocol.game.ClientboundTabListPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
@@ -102,12 +105,28 @@
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.SignText;
 import net.minecraft.world.level.border.BorderChangeListener;
-import net.minecraft.world.level.portal.TeleportTransition;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapId;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
-import net.minecraft.world.phys.Vec3;
-import org.bukkit.*;
+import org.bukkit.BanEntry;
+import org.bukkit.BanList;
+import org.bukkit.Bukkit;
+import org.bukkit.DyeColor;
+import org.bukkit.Effect;
+import org.bukkit.GameMode;
+import org.bukkit.Input;
+import org.bukkit.Instrument;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Note;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.Particle;
+import org.bukkit.ServerLinks;
+import org.bukkit.Sound;
+import org.bukkit.Statistic;
+import org.bukkit.WeatherType;
+import org.bukkit.WorldBorder;
 import org.bukkit.ban.IpBanList;
 import org.bukkit.ban.ProfileBanList;
 import org.bukkit.block.Block;
@@ -120,7 +139,17 @@
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
-import org.bukkit.craftbukkit.*;
+import org.bukkit.craftbukkit.CraftEffect;
+import org.bukkit.craftbukkit.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.CraftInput;
+import org.bukkit.craftbukkit.CraftOfflinePlayer;
+import org.bukkit.craftbukkit.CraftParticle;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftServerLinks;
+import org.bukkit.craftbukkit.CraftSound;
+import org.bukkit.craftbukkit.CraftStatistic;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.CraftWorldBorder;
 import org.bukkit.craftbukkit.advancement.CraftAdvancement;
 import org.bukkit.craftbukkit.advancement.CraftAdvancementProgress;
 import org.bukkit.craftbukkit.block.CraftBlockEntityState;
@@ -130,6 +159,7 @@
 import org.bukkit.craftbukkit.conversations.ConversationTracker;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
 import org.bukkit.craftbukkit.map.CraftMapCursor;
 import org.bukkit.craftbukkit.map.CraftMapView;
 import org.bukkit.craftbukkit.map.RenderData;
@@ -141,6 +171,7 @@
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.EnderPearl;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
@@ -246,6 +277,8 @@
         ConnectionProtocol getProtocol();
 
         void sendPacket(Packet<?> packet);
+
+        void kickPlayer(Component reason);
     }
 
     public record CookieFuture(ResourceLocation key, CompletableFuture<byte[]> future) {
@@ -273,7 +306,7 @@
 
     @Override
     public boolean isTransferred() {
-        return this.getHandle().bridge$transferCookieConnection().isTransferred();
+        return this.getHandle().transferCookieConnection.isTransferred();
     }
 
     @Override
@@ -284,7 +317,7 @@
         ResourceLocation nms = CraftNamespacedKey.toMinecraft(key);
         this.requestedCookies.add(new CookieFuture(nms, future));
 
-        this.getHandle().bridge$transferCookieConnection().sendPacket(new ClientboundCookieRequestPacket(nms));
+        this.getHandle().transferCookieConnection.sendPacket(new ClientboundCookieRequestPacket(nms));
 
         return future;
     }
@@ -294,17 +327,17 @@
         Preconditions.checkArgument(key != null, "Cookie key cannot be null");
         Preconditions.checkArgument(value != null, "Cookie value cannot be null");
         Preconditions.checkArgument(value.length <= 5120, "Cookie value too large, must be smaller than 5120 bytes");
-        Preconditions.checkState(this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.PLAY, "Can only store cookie in CONFIGURATION or PLAY protocol.");
+        Preconditions.checkState(this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.PLAY, "Can only store cookie in CONFIGURATION or PLAY protocol.");
 
-        this.getHandle().bridge$transferCookieConnection().sendPacket(new ClientboundStoreCookiePacket(CraftNamespacedKey.toMinecraft(key), value));
+        this.getHandle().transferCookieConnection.sendPacket(new ClientboundStoreCookiePacket(CraftNamespacedKey.toMinecraft(key), value));
     }
 
     @Override
     public void transfer(String host, int port) {
         Preconditions.checkArgument(host != null, "Host cannot be null");
-        Preconditions.checkState(this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().bridge$transferCookieConnection().getProtocol() == ConnectionProtocol.PLAY, "Can only transfer in CONFIGURATION or PLAY protocol.");
+        Preconditions.checkState(this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.CONFIGURATION || this.getHandle().transferCookieConnection.getProtocol() == ConnectionProtocol.PLAY, "Can only transfer in CONFIGURATION or PLAY protocol.");
 
-        this.getHandle().bridge$transferCookieConnection().sendPacket(new ClientboundTransferPacket(host, port));
+        this.getHandle().transferCookieConnection.sendPacket(new ClientboundTransferPacket(host, port));
     }
 
     @Override
@@ -362,17 +395,17 @@
 
     @Override
     public String getDisplayName() {
-        return this.getHandle().bridge$displayName();
+        return this.getHandle().displayName;
     }
 
     @Override
     public void setDisplayName(final String name) {
-        getHandle().banner$setDisplayName(name == null ? getName() : name);
+        this.getHandle().displayName = name == null ? this.getName() : name;
     }
 
     @Override
     public String getPlayerListName() {
-        return getHandle().getTabListDisplayName() == null ? getName() : CraftChatMessage.fromComponent(getHandle().getTabListDisplayName());
+        return this.getHandle().listName == null ? this.getName() : CraftChatMessage.fromComponent(this.getHandle().listName);
     }
 
     @Override
@@ -380,7 +413,7 @@
         if (name == null) {
             name = this.getName();
         }
-        getHandle().banner$setListName(name.equals(getName()) ? null : CraftChatMessage.fromStringOrNull(name));
+        this.getHandle().listName = name.equals(this.getName()) ? null : CraftChatMessage.fromStringOrNull(name);
         for (ServerPlayer player : (List<ServerPlayer>) this.server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.connection.send(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this.getHandle()));
@@ -388,6 +421,18 @@
         }
     }
 
+    @Override
+    public int getPlayerListOrder() {
+        return this.getHandle().listOrder;
+    }
+
+    @Override
+    public void setPlayerListOrder(int order) {
+        Preconditions.checkArgument(order >= 0, "order cannot be negative");
+
+        this.getHandle().listOrder = order;
+    }
+
     private Component playerListHeader;
     private Component playerListFooter;
 
@@ -450,9 +495,7 @@
     @Override
     public void kickPlayer(String message) {
         org.spigotmc.AsyncCatcher.catchOp("player kick"); // Spigot
-        if (this.getHandle().connection == null) return;
-
-        this.getHandle().connection.disconnect(CraftChatMessage.fromStringOrEmpty(message));
+        this.getHandle().transferCookieConnection.kickPlayer(CraftChatMessage.fromStringOrEmpty(message, true));
     }
 
     @Override
@@ -467,7 +510,7 @@
 
     @Override
     public Location getCompassTarget() {
-        return this.getHandle().bridge$compassTarget();
+        return this.getHandle().compassTarget;
     }
 
     @Override
@@ -706,12 +749,9 @@
 
         // Construct the packets using the data allocated above and send then to the players
         for (Map.Entry<SectionPos, ChunkSectionChanges> entry : changes.entrySet()) {
-            // Banner start
             ChunkSectionChanges chunkChanges = entry.getValue();
-            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), null);
-            packet.putBukkitPacket(chunkChanges.blockData().toArray(net.minecraft.world.level.block.state.BlockState[]::new));
-            getHandle().connection.send(packet);
-            // Banner end
+            ClientboundSectionBlocksUpdatePacket packet = new ClientboundSectionBlocksUpdatePacket(entry.getKey(), chunkChanges.positions(), chunkChanges.blockData().toArray(net.minecraft.world.level.block.state.BlockState[]::new));
+            this.getHandle().connection.send(packet);
         }
     }
 
@@ -786,7 +826,7 @@
         }
         sign.setText(text, true);
 
-        getHandle().connection.send(sign.getUpdatePacket());
+        this.getHandle().connection.send(new ClientboundBlockEntityDataPacket(sign.getBlockPos(), sign.getType(), sign.getUpdateTag(this.getHandle().registryAccess())));
     }
 
     @Override
@@ -957,13 +997,13 @@
 
     @Override
     public void sendLinks(ServerLinks links) {
-        if (getHandle().connection == null) {
+        if (this.getHandle().connection == null) {
             return;
         }
         Preconditions.checkArgument(links != null, "links cannot be null");
 
         net.minecraft.server.ServerLinks nms = ((CraftServerLinks) links).getServerLinks();
-        getHandle().connection.send(new ClientboundServerLinksPacket(nms.untrust()));
+        this.getHandle().connection.send(new ClientboundServerLinksPacket(nms.untrust()));
     }
 
     @Override
@@ -1051,9 +1091,9 @@
         if (fromWorld == toWorld) {
             entity.connection.teleport(to);
         } else {
+            entity.portalProcess = null; // SPIGOT-7785: there is no need to carry this over as it contains the old world/location and we might run into trouble if there is a portal in the same spot in both worlds
             // The respawn reason should never be used if the passed location is non null.
-            // Banner - fix #321
-            this.getHandle().changeDimension(new TeleportTransition(toWorld, new Vec3(to.getX(), to.getY(), to.getZ()), Vec3.ZERO, to.getYaw(), to.getPitch(), TeleportTransition.DO_NOTHING));
+            this.server.getHandle().respawn(entity, true, Entity.RemovalReason.CHANGED_DIMENSION, null, to);
         }
         return true;
     }
@@ -1096,13 +1136,13 @@
 
     @Override
     public void setSleepingIgnored(boolean isSleeping) {
-        this.getHandle().banner$setFauxSleeping(isSleeping);
+        this.getHandle().fauxSleeping = isSleeping;
         ((CraftWorld) this.getWorld()).getHandle().updateSleepingPlayerList();
     }
 
     @Override
     public boolean isSleepingIgnored() {
-        return this.getHandle().bridge$fauxSleeping();
+        return this.getHandle().fauxSleeping;
     }
 
     @Override
@@ -1116,7 +1156,7 @@
         BlockPos bed = this.getHandle().getRespawnPosition();
 
         if (world != null && bed != null) {
-            Optional<ServerPlayer.RespawnPosAngle> spawnLoc = ServerPlayer.findRespawnAndUseSpawnBlock(world, bed, getHandle().getRespawnAngle(), getHandle().isRespawnForced(), true);
+            Optional<ServerPlayer.RespawnPosAngle> spawnLoc = ServerPlayer.findRespawnAndUseSpawnBlock(world, bed, this.getHandle().getRespawnAngle(), this.getHandle().isRespawnForced(), true);
             if (spawnLoc.isPresent()) {
                 ServerPlayer.RespawnPosAngle vec = spawnLoc.get();
                 return CraftLocation.toBukkit(vec.position(), world.getWorld(), vec.yaw(), 0);
@@ -1149,6 +1189,16 @@
         }
     }
 
+    @Override
+    public Collection<EnderPearl> getEnderPearls() {
+        return this.getHandle().getEnderPearls().stream().map((e) -> (EnderPearl) e.getBukkitEntity()).collect(Collectors.toList());
+    }
+
+    @Override
+    public Input getCurrentInput() {
+        return new CraftInput(this.getHandle().getLastClientInput());
+    }
+
     @Override
     public Location getBedLocation() {
         Preconditions.checkState(this.isSleeping(), "Not sleeping");
@@ -1160,13 +1210,13 @@
     @Override
     public boolean hasDiscoveredRecipe(NamespacedKey recipe) {
         Preconditions.checkArgument(recipe != null, "recipe cannot be null");
-        return this.getHandle().getRecipeBook().contains(CraftNamespacedKey.toMinecraft(recipe));
+        return this.getHandle().getRecipeBook().contains(CraftRecipe.toMinecraft(recipe));
     }
 
     @Override
     public Set<NamespacedKey> getDiscoveredRecipes() {
         ImmutableSet.Builder<NamespacedKey> bukkitRecipeKeys = ImmutableSet.builder();
-        this.getHandle().getRecipeBook().known.forEach(key -> bukkitRecipeKeys.add(CraftNamespacedKey.fromMinecraft(key)));
+        this.getHandle().getRecipeBook().known.forEach(key -> bukkitRecipeKeys.add(CraftNamespacedKey.fromMinecraft(key.location())));
         return bukkitRecipeKeys.build();
     }
 
@@ -1262,13 +1312,13 @@
 
     @Override
     public void setPlayerTime(long time, boolean relative) {
-        getHandle().banner$setTimeOffset(time);
-        getHandle().banner$setRelativeTime(relative);
+        this.getHandle().timeOffset = time;
+        this.getHandle().relativeTime = relative;
     }
 
     @Override
     public long getPlayerTimeOffset() {
-        return this.getHandle().bridge$timeOffset();
+        return this.getHandle().timeOffset;
     }
 
     @Override
@@ -1278,7 +1328,7 @@
 
     @Override
     public boolean isPlayerTimeRelative() {
-        return this.getHandle().bridge$relativeTime();
+        return this.getHandle().relativeTime;
     }
 
     @Override
@@ -1535,7 +1585,7 @@
         // Remove the hidden entity from this player user list, if they're on it
         if (other instanceof ServerPlayer) {
             ServerPlayer otherPlayer = (ServerPlayer) other;
-            if (otherPlayer.bridge$sentListPacket()) {
+            if (otherPlayer.sentListPacket) {
                 this.getHandle().connection.send(new ClientboundPlayerInfoRemovePacket(List.of(otherPlayer.getUUID())));
             }
         }
@@ -1646,11 +1696,8 @@
         return this.equals(entity) || entity.isVisibleByDefault() ^ this.invertedVisibilityEntities.containsKey(entity.getUniqueId()); // SPIGOT-7312: Can always see self
     }
 
-    public boolean canSee(UUID uuid) {
+    public boolean canSeePlayer(UUID uuid) {
         org.bukkit.entity.Entity entity = this.getServer().getPlayer(uuid);
-        if (entity == null) {
-            entity = this.getServer().getEntity(uuid); // Also includes players, but check players first for efficiency
-        }
 
         return (entity != null) ? this.canSee(entity) : false; // If we can't find it, we can't see it
     }
@@ -1722,11 +1769,11 @@
 
             if (data.contains("newExp")) {
                 ServerPlayer handle = this.getHandle();
-                handle.banner$setNewExp(data.getInt("newExp"));
-                handle.banner$setNewTotalExp(data.getInt("newTotalExp"));
-                handle.banner$setNewLevel(data.getInt("newLevel"));
-                handle.banner$setExpToDrop(data.getInt("expToDrop"));
-                handle.banner$setKeepLevel(data.getBoolean("keepLevel"));
+                handle.newExp = data.getInt("newExp");
+                handle.newTotalExp = data.getInt("newTotalExp");
+                handle.newLevel = data.getInt("newLevel");
+                handle.expToDrop = data.getInt("expToDrop");
+                handle.keepLevel = data.getBoolean("keepLevel");
             }
         }
     }
@@ -1738,14 +1785,11 @@
 
         CompoundTag data = nbttagcompound.getCompound("bukkit");
         ServerPlayer handle = this.getHandle();
-        data.putInt("newExp", handle.bridge$newExp());
-        data.putInt("newTotalExp", handle.bridge$newTotalExp());
-        data.putInt("newLevel", handle.bridge$newLevel());
-        data.putInt("expToDrop", handle.bridge$expToDrop());
-        data.putBoolean("keepLevel", handle.bridge$keepLevel());
-        data.putLong("firstPlayed", getFirstPlayed());
-        data.putLong("lastPlayed", System.currentTimeMillis());
-        data.putString("lastKnownName", handle.getScoreboardName());
+        data.putInt("newExp", handle.newExp);
+        data.putInt("newTotalExp", handle.newTotalExp);
+        data.putInt("newLevel", handle.newLevel);
+        data.putInt("expToDrop", handle.expToDrop);
+        data.putBoolean("keepLevel", handle.keepLevel);
         data.putLong("firstPlayed", this.getFirstPlayed());
         data.putLong("lastPlayed", System.currentTimeMillis());
         data.putString("lastKnownName", handle.getScoreboardName());
@@ -1788,9 +1832,7 @@
     }
 
     private void sendCustomPayload(ResourceLocation id, byte[] message) {
-        var payload = new DiscardedPayload(id);
-        payload.bridge$setData(Unpooled.wrappedBuffer(message));
-        ClientboundCustomPayloadPacket packet = new ClientboundCustomPayloadPacket(payload);
+        ClientboundCustomPayloadPacket packet = new ClientboundCustomPayloadPacket(new DiscardedPayload(id, Unpooled.wrappedBuffer(message)));
         this.getHandle().connection.send(packet);
     }
 
@@ -2110,7 +2152,7 @@
         }
         this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth());
 
-        this.getHandle().banner$setMaxHealthCache(this.getMaxHealth());
+        this.getHandle().maxHealthCache = this.getMaxHealth();
     }
 
     @Override
@@ -2243,19 +2285,18 @@
 
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
-        ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.createParticleParam(particle, data), true, (float) x, (float) y, (float) z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count);
-        this.getHandle().connection.send(packetplayoutworldparticles);
-
+        this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, false);
     }
 
     @Override
     public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
-        spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra, data, force);
+        this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra, data, force);
     }
 
     @Override
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
-        this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, false);
+        ClientboundLevelParticlesPacket packetplayoutworldparticles = new ClientboundLevelParticlesPacket(CraftParticle.createParticleParam(particle, data), force, (float) x, (float) y, (float) z, (float) offsetX, (float) offsetY, (float) offsetZ, (float) extra, count);
+        this.getHandle().connection.send(packetplayoutworldparticles);
     }
 
     @Override
@@ -2331,7 +2372,7 @@
         @Override
         public InetSocketAddress getRawAddress()
         {
-            return (InetSocketAddress) CraftPlayer.this.getHandle().connection.connection.getRawAddress();
+            return (InetSocketAddress) CraftPlayer.this.getHandle().connection.getRawAddress();
         }
 
         @Override
@@ -2339,7 +2380,7 @@
         {
             if ( CraftPlayer.this.getHealth() <= 0 && CraftPlayer.this.isOnline() )
             {
-                server.getServer().getPlayerList().respawn( getHandle(), false, Entity.RemovalReason.KILLED, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN );
+                CraftPlayer.this.server.getServer().getPlayerList().respawn( CraftPlayer.this.getHandle(), false, Entity.RemovalReason.KILLED, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.PLUGIN );
             }
         }
 
@@ -2395,12 +2436,9 @@
 
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
-            if ( getHandle().connection == null ) return;
-            getHandle().connection.send(new ClientboundSystemChatPacket(
-                    Component.Serializer.fromJson(
-                            ComponentSerializer.toString(components), getHandle().level().registryAccess()
-                    ), position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR
-            ));
+            if ( CraftPlayer.this.getHandle().connection == null ) return;
+
+            CraftPlayer.this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(components, position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));
         }
     };
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java	(date 1729674280268)
@@ -1,9 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.SmokingRecipe;
@@ -27,6 +26,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmokingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmokingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java	(date 1729674280131)
@@ -131,7 +131,7 @@
     @Override
     public void setColor(Color color) {
         PotionContents old = this.getHandle().potionContents;
-        this.getHandle().setPotionContents(new PotionContents(old.potion(), Optional.of(color.asRGB()), old.customEffects()));
+        this.getHandle().setPotionContents(new PotionContents(old.potion(), Optional.of(color.asRGB()), old.customEffects(), old.customName()));
     }
 
     @Override
@@ -150,7 +150,7 @@
     @Override
     public void clearCustomEffects() {
         PotionContents old = this.getHandle().potionContents;
-        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), List.of()));
+        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), List.of(), old.customName()));
         this.getHandle().updateColor();
     }
 
@@ -186,7 +186,7 @@
         Holder<MobEffect> minecraft = CraftPotionEffectType.bukkitToMinecraftHolder(effect);
 
         PotionContents old = this.getHandle().potionContents;
-        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), old.customEffects().stream().filter((mobEffect) -> !mobEffect.getEffect().equals(minecraft)).toList()));
+        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), old.customEffects().stream().filter((mobEffect) -> !mobEffect.getEffect().equals(minecraft)).toList(), old.customName()));
         return true;
     }
 
@@ -206,7 +206,7 @@
             this.getHandle().setPotionContents(this.getHandle().potionContents.withPotion(CraftPotionType.bukkitToMinecraftHolder(potionType)));
         } else {
             PotionContents old = this.getHandle().potionContents;
-            this.getHandle().setPotionContents(new PotionContents(Optional.empty(), old.customColor(), old.customEffects()));
+            this.getHandle().setPotionContents(new PotionContents(Optional.empty(), old.customColor(), old.customEffects(), old.customName()));
         }
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java	(date 1729674280267)
@@ -1,13 +1,11 @@
 package org.bukkit.craftbukkit.inventory;
 
+import java.util.ArrayList;
 import java.util.List;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
-import net.minecraft.core.NonNullList;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.ShapelessRecipe;
@@ -41,11 +39,11 @@
     @Override
     public void addToCraftingManager() {
         List<org.bukkit.inventory.RecipeChoice> ingred = this.getChoiceList();
-        NonNullList<Ingredient> data = NonNullList.withSize(ingred.size(), Ingredient.EMPTY);
+        List<Ingredient> data = new ArrayList<>(ingred.size());
         for (int i = 0; i < ingred.size(); i++) {
             data.set(i, this.toNMS(ingred.get(i), true));
         }
 
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapelessRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), CraftItemStack.asNMSCopy(this.getResult()), data)));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapelessRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), CraftItemStack.asNMSCopy(this.getResult()), data)));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaOminousBottle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaOminousBottle.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaOminousBottle.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaOminousBottle.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaOminousBottle.java	(date 1729674280261)
@@ -5,13 +5,14 @@
 import java.util.Map;
 import net.minecraft.core.component.DataComponentPatch;
 import net.minecraft.core.component.DataComponents;
+import net.minecraft.world.item.component.OminousBottleAmplifier;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.inventory.meta.OminousBottleMeta;
 
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaOminousBottle extends CraftMetaItem implements OminousBottleMeta {
 
-    static final ItemMetaKeyType<Integer> OMINOUS_BOTTLE_AMPLIFIER = new ItemMetaKeyType<>(DataComponents.OMINOUS_BOTTLE_AMPLIFIER, "ominous-bottle-amplifier");
+    static final ItemMetaKeyType<OminousBottleAmplifier> OMINOUS_BOTTLE_AMPLIFIER = new ItemMetaKeyType<>(DataComponents.OMINOUS_BOTTLE_AMPLIFIER, "ominous-bottle-amplifier");
     private Integer ominousBottleAmplifier;
 
     CraftMetaOminousBottle(CraftMetaItem meta) {
@@ -26,7 +27,7 @@
     CraftMetaOminousBottle(DataComponentPatch tag) {
         super(tag);
         getOrEmpty(tag, CraftMetaOminousBottle.OMINOUS_BOTTLE_AMPLIFIER).ifPresent((amplifier) -> {
-            this.ominousBottleAmplifier = amplifier;
+            this.ominousBottleAmplifier = amplifier.value();
         });
     }
 
@@ -43,7 +44,7 @@
         super.applyToItem(tag);
 
         if (this.hasAmplifier()) {
-            tag.put(CraftMetaOminousBottle.OMINOUS_BOTTLE_AMPLIFIER, this.ominousBottleAmplifier);
+            tag.put(CraftMetaOminousBottle.OMINOUS_BOTTLE_AMPLIFIER, new OminousBottleAmplifier(this.ominousBottleAmplifier));
         }
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java	(date 1729674280156)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Locale;
 import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.animal.FrogVariant;
@@ -9,12 +10,9 @@
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.entity.Entity;
 
-import java.util.Locale;
-
 public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
 
     public CraftFrog(CraftServer server, Frog entity) {
@@ -126,11 +124,13 @@
             // For backwards compatibility
             return this.name();
         }
+
         @Override
         public boolean equals(Object other) {
             if (this == other) {
                 return true;
             }
+
             if (!(other instanceof CraftVariant)) {
                 return false;
             }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java	(date 1729674280233)
@@ -4,8 +4,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.ListIterator;
-
-import com.mohistmc.banner.bukkit.BannerLecternInventory;
 import net.minecraft.world.Container;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.MerchantContainer;
@@ -495,7 +493,7 @@
             return InventoryType.SHULKER_BOX;
         } else if (this.inventory instanceof BarrelBlockEntity) {
             return InventoryType.BARREL;
-        } else if (this.inventory instanceof BannerLecternInventory) {
+        } else if (this.inventory instanceof LecternBlockEntity.LecternInventory) {
             return InventoryType.LECTERN;
         } else if (this.inventory instanceof ChiseledBookShelfBlockEntity) {
             return InventoryType.CHISELED_BOOKSHELF;
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java	(date 1729674280154)
@@ -16,27 +16,27 @@
 
     @Override
     public float getYield() {
-        return this.getHandle().bridge$bukkitYield();
+        return this.getHandle().bukkitYield;
     }
 
     @Override
     public boolean isIncendiary() {
-        return this.getHandle().bridge$isIncendiary();
+        return this.getHandle().isIncendiary;
     }
 
     @Override
     public void setIsIncendiary(boolean isIncendiary) {
-        this.getHandle().banner$setIsIncendiary(isIncendiary);
+        this.getHandle().isIncendiary = isIncendiary;
     }
 
     @Override
     public void setYield(float yield) {
-        this.getHandle().banner$setBukkitYield(yield);
+        this.getHandle().bukkitYield = yield;
     }
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -46,25 +46,26 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
     public Vector getDirection() {
-        return getAcceleration();
+        return this.getAcceleration();
     }
 
     @Override
     public void setDirection(Vector direction) {
         Preconditions.checkArgument(direction != null, "Vector direction cannot be null");
         if (direction.isZero()) {
-            setVelocity(direction);
-            setAcceleration(direction);
+            this.setVelocity(direction);
+            this.setAcceleration(direction);
             return;
         }
+
         direction = direction.clone().normalize();
-        setVelocity(direction.clone().multiply(getVelocity().length()));
-        setAcceleration(direction.multiply(getAcceleration().length()));
+        this.setVelocity(direction.clone().multiply(this.getVelocity().length()));
+        this.setAcceleration(direction.multiply(this.getAcceleration().length()));
     }
 
     @Override
@@ -72,14 +73,14 @@
         Preconditions.checkArgument(acceleration != null, "Vector acceleration cannot be null");
         // SPIGOT-6993: EntityFireball#assignPower will normalize the given values
         // Note: Because of MC-80142 the fireball will stutter on the client when setting the power to something other than 0 or the normalized vector * 0.1
-        getHandle().assignDirectionalMovement(new Vec3(acceleration.getX(), acceleration.getY(), acceleration.getZ()), acceleration.length());
-        update(); // SPIGOT-6579
+        this.getHandle().assignDirectionalMovement(new Vec3(acceleration.getX(), acceleration.getY(), acceleration.getZ()), acceleration.length());
+        this.update(); // SPIGOT-6579
     }
 
     @NotNull
     @Override
     public Vector getAcceleration() {
-        Vec3 delta = getHandle().getDeltaMovement();
+        Vec3 delta = this.getHandle().getDeltaMovement();
         return new Vector(delta.x, delta.y, delta.z);
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java	(date 1729674280151)
@@ -8,10 +8,9 @@
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.Function;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.decoration.HangingEntity;
 import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
 import net.minecraft.world.entity.item.FallingBlockEntity;
@@ -21,13 +20,8 @@
 import net.minecraft.world.entity.projectile.EyeOfEnder;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.projectile.ThrownEgg;
-import net.minecraft.world.entity.vehicle.Minecart;
-import net.minecraft.world.entity.vehicle.MinecartChest;
-import net.minecraft.world.entity.vehicle.MinecartCommandBlock;
-import net.minecraft.world.entity.vehicle.MinecartFurnace;
-import net.minecraft.world.entity.vehicle.MinecartHopper;
-import net.minecraft.world.entity.vehicle.MinecartSpawner;
-import net.minecraft.world.entity.vehicle.MinecartTNT;
+import net.minecraft.world.entity.vehicle.AbstractMinecart;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.WorldGenLevel;
@@ -37,11 +31,29 @@
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
-import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.block.CraftBlock;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.entity.boat.CraftAcaciaBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftAcaciaChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftBambooChestRaft;
+import org.bukkit.craftbukkit.entity.boat.CraftBambooRaft;
+import org.bukkit.craftbukkit.entity.boat.CraftBirchBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftBirchChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftCherryBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftCherryChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftDarkOakBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftDarkOakChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftJungleBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftJungleChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftMangroveBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftMangroveChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftOakBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftOakChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftPaleOakBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftPaleOakChestBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftSpruceBoat;
+import org.bukkit.craftbukkit.entity.boat.CraftSpruceChestBoat;
 import org.bukkit.entity.Allay;
 import org.bukkit.entity.AreaEffectCloud;
 import org.bukkit.entity.Armadillo;
@@ -52,17 +64,17 @@
 import org.bukkit.entity.Bee;
 import org.bukkit.entity.Blaze;
 import org.bukkit.entity.BlockDisplay;
-import org.bukkit.entity.Boat;
 import org.bukkit.entity.Bogged;
 import org.bukkit.entity.Breeze;
 import org.bukkit.entity.BreezeWindCharge;
 import org.bukkit.entity.Camel;
 import org.bukkit.entity.Cat;
 import org.bukkit.entity.CaveSpider;
-import org.bukkit.entity.ChestBoat;
 import org.bukkit.entity.Chicken;
 import org.bukkit.entity.Cod;
 import org.bukkit.entity.Cow;
+import org.bukkit.entity.Creaking;
+import org.bukkit.entity.CreakingTransient;
 import org.bukkit.entity.Creeper;
 import org.bukkit.entity.Dolphin;
 import org.bukkit.entity.Donkey;
@@ -168,6 +180,26 @@
 import org.bukkit.entity.Zombie;
 import org.bukkit.entity.ZombieHorse;
 import org.bukkit.entity.ZombieVillager;
+import org.bukkit.entity.boat.AcaciaBoat;
+import org.bukkit.entity.boat.AcaciaChestBoat;
+import org.bukkit.entity.boat.BambooChestRaft;
+import org.bukkit.entity.boat.BambooRaft;
+import org.bukkit.entity.boat.BirchBoat;
+import org.bukkit.entity.boat.BirchChestBoat;
+import org.bukkit.entity.boat.CherryBoat;
+import org.bukkit.entity.boat.CherryChestBoat;
+import org.bukkit.entity.boat.DarkOakBoat;
+import org.bukkit.entity.boat.DarkOakChestBoat;
+import org.bukkit.entity.boat.JungleBoat;
+import org.bukkit.entity.boat.JungleChestBoat;
+import org.bukkit.entity.boat.MangroveBoat;
+import org.bukkit.entity.boat.MangroveChestBoat;
+import org.bukkit.entity.boat.OakBoat;
+import org.bukkit.entity.boat.OakChestBoat;
+import org.bukkit.entity.boat.PaleOakBoat;
+import org.bukkit.entity.boat.PaleOakChestBoat;
+import org.bukkit.entity.boat.SpruceBoat;
+import org.bukkit.entity.boat.SpruceChestBoat;
 import org.bukkit.entity.minecart.CommandMinecart;
 import org.bukkit.entity.minecart.ExplosiveMinecart;
 import org.bukkit.entity.minecart.HopperMinecart;
@@ -175,7 +207,6 @@
 import org.bukkit.entity.minecart.RideableMinecart;
 import org.bukkit.entity.minecart.SpawnerMinecart;
 import org.bukkit.entity.minecart.StorageMinecart;
-import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
 
 public final class CraftEntityTypes {
@@ -310,6 +341,8 @@
         register(new EntityTypeData<>(EntityType.SNIFFER, Sniffer.class, CraftSniffer::new, createLiving(net.minecraft.world.entity.EntityType.SNIFFER)));
         register(new EntityTypeData<>(EntityType.BREEZE, Breeze.class, CraftBreeze::new, createLiving(net.minecraft.world.entity.EntityType.BREEZE)));
         register(new EntityTypeData<>(EntityType.ARMADILLO, Armadillo.class, CraftArmadillo::new, createLiving(net.minecraft.world.entity.EntityType.ARMADILLO)));
+        register(new EntityTypeData<>(EntityType.CREAKING, Creaking.class, CraftCreaking::new, createLiving(net.minecraft.world.entity.EntityType.CREAKING)));
+        register(new EntityTypeData<>(EntityType.CREAKING_TRANSIENT, CreakingTransient.class, CraftCreakingTransient::new, createLiving(net.minecraft.world.entity.EntityType.CREAKING_TRANSIENT)));
 
         Function<SpawnData, net.minecraft.world.entity.boss.enderdragon.EnderDragon> dragonFunction = createLiving(net.minecraft.world.entity.EntityType.ENDER_DRAGON);
         register(new EntityTypeData<>(EntityType.ENDER_DRAGON, EnderDragon.class, CraftEnderDragon::new, spawnData -> {
@@ -351,10 +384,29 @@
 
         // Move
         register(new EntityTypeData<>(EntityType.SHULKER_BULLET, ShulkerBullet.class, CraftShulkerBullet::new, createAndMove(net.minecraft.world.entity.EntityType.SHULKER_BULLET)));
-        register(new EntityTypeData<>(EntityType.BOAT, Boat.class, CraftBoat::new, createAndMove(net.minecraft.world.entity.EntityType.BOAT)));
         register(new EntityTypeData<>(EntityType.LLAMA_SPIT, LlamaSpit.class, CraftLlamaSpit::new, createAndMove(net.minecraft.world.entity.EntityType.LLAMA_SPIT)));
-        register(new EntityTypeData<>(EntityType.CHEST_BOAT, ChestBoat.class, CraftChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.CHEST_BOAT)));
         register(new EntityTypeData<>(EntityType.OMINOUS_ITEM_SPAWNER, OminousItemSpawner.class, CraftOminousItemSpawner::new, createAndMove(net.minecraft.world.entity.EntityType.OMINOUS_ITEM_SPAWNER)));
+        // Move (boats)
+        register(new EntityTypeData<>(EntityType.ACACIA_BOAT, AcaciaBoat.class, CraftAcaciaBoat::new, createAndMove(net.minecraft.world.entity.EntityType.ACACIA_BOAT)));
+        register(new EntityTypeData<>(EntityType.ACACIA_CHEST_BOAT, AcaciaChestBoat.class, CraftAcaciaChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.ACACIA_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.BAMBOO_RAFT, BambooRaft.class, CraftBambooRaft::new, createAndMove(net.minecraft.world.entity.EntityType.BAMBOO_RAFT)));
+        register(new EntityTypeData<>(EntityType.BAMBOO_CHEST_RAFT, BambooChestRaft.class, CraftBambooChestRaft::new, createAndMove(net.minecraft.world.entity.EntityType.BAMBOO_CHEST_RAFT)));
+        register(new EntityTypeData<>(EntityType.BIRCH_BOAT, BirchBoat.class, CraftBirchBoat::new, createAndMove(net.minecraft.world.entity.EntityType.BIRCH_BOAT)));
+        register(new EntityTypeData<>(EntityType.BIRCH_CHEST_BOAT, BirchChestBoat.class, CraftBirchChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.BIRCH_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.CHERRY_BOAT, CherryBoat.class, CraftCherryBoat::new, createAndMove(net.minecraft.world.entity.EntityType.CHERRY_BOAT)));
+        register(new EntityTypeData<>(EntityType.CHERRY_CHEST_BOAT, CherryChestBoat.class, CraftCherryChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.CHERRY_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.DARK_OAK_BOAT, DarkOakBoat.class, CraftDarkOakBoat::new, createAndMove(net.minecraft.world.entity.EntityType.DARK_OAK_BOAT)));
+        register(new EntityTypeData<>(EntityType.DARK_OAK_CHEST_BOAT, DarkOakChestBoat.class, CraftDarkOakChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.DARK_OAK_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.JUNGLE_BOAT, JungleBoat.class, CraftJungleBoat::new, createAndMove(net.minecraft.world.entity.EntityType.JUNGLE_BOAT)));
+        register(new EntityTypeData<>(EntityType.JUNGLE_CHEST_BOAT, JungleChestBoat.class, CraftJungleChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.JUNGLE_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.MANGROVE_BOAT, MangroveBoat.class, CraftMangroveBoat::new, createAndMove(net.minecraft.world.entity.EntityType.MANGROVE_BOAT)));
+        register(new EntityTypeData<>(EntityType.MANGROVE_CHEST_BOAT, MangroveChestBoat.class, CraftMangroveChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.MANGROVE_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.OAK_BOAT, OakBoat.class, CraftOakBoat::new, createAndMove(net.minecraft.world.entity.EntityType.OAK_BOAT)));
+        register(new EntityTypeData<>(EntityType.OAK_CHEST_BOAT, OakChestBoat.class, CraftOakChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.OAK_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.PALE_OAK_BOAT, PaleOakBoat.class, CraftPaleOakBoat::new, createAndMove(net.minecraft.world.entity.EntityType.PALE_OAK_BOAT)));
+        register(new EntityTypeData<>(EntityType.PALE_OAK_CHEST_BOAT, PaleOakChestBoat.class, CraftPaleOakChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.PALE_OAK_CHEST_BOAT)));
+        register(new EntityTypeData<>(EntityType.SPRUCE_BOAT, SpruceBoat.class, CraftSpruceBoat::new, createAndMove(net.minecraft.world.entity.EntityType.SPRUCE_BOAT)));
+        register(new EntityTypeData<>(EntityType.SPRUCE_CHEST_BOAT, SpruceChestBoat.class, CraftSpruceChestBoat::new, createAndMove(net.minecraft.world.entity.EntityType.SPRUCE_CHEST_BOAT)));
 
         // Set pos
         register(new EntityTypeData<>(EntityType.MARKER, Marker.class, CraftMarker::new, createAndSetPos(net.minecraft.world.entity.EntityType.MARKER)));
@@ -377,13 +429,12 @@
                 spawnData -> new net.minecraft.world.entity.ExperienceOrb(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), 0)
         ));
         register(new EntityTypeData<>(EntityType.AREA_EFFECT_CLOUD, AreaEffectCloud.class, CraftAreaEffectCloud::new, spawnData -> new net.minecraft.world.entity.AreaEffectCloud(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
-        register(new EntityTypeData<>(EntityType.EGG, Egg.class, CraftEgg::new, spawnData -> new ThrownEgg(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
+        register(new EntityTypeData<>(EntityType.EGG, Egg.class, CraftEgg::new, spawnData -> new ThrownEgg(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), new net.minecraft.world.item.ItemStack(Items.EGG))));
         register(new EntityTypeData<>(EntityType.LEASH_KNOT, LeashHitch.class, CraftLeash::new, spawnData -> new LeashFenceKnotEntity(spawnData.minecraftWorld(), BlockPos.containing(spawnData.x(), spawnData.y(), spawnData.z())))); // SPIGOT-5732: LeashHitch has no direction and is always centered at a block
-        register(new EntityTypeData<>(EntityType.SNOWBALL, Snowball.class, CraftSnowball::new, spawnData -> new net.minecraft.world.entity.projectile.Snowball(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
+        register(new EntityTypeData<>(EntityType.SNOWBALL, Snowball.class, CraftSnowball::new, spawnData -> new net.minecraft.world.entity.projectile.Snowball(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), new net.minecraft.world.item.ItemStack(Items.SNOWBALL))));
         register(new EntityTypeData<>(EntityType.EYE_OF_ENDER, EnderSignal.class, CraftEnderSignal::new, spawnData -> new EyeOfEnder(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
         register(new EntityTypeData<>(EntityType.POTION, ThrownPotion.class, CraftThrownPotion::new, spawnData -> {
-            net.minecraft.world.entity.projectile.ThrownPotion entity = new net.minecraft.world.entity.projectile.ThrownPotion(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z());
-            entity.setItem(CraftItemStack.asNMSCopy(new ItemStack(Material.SPLASH_POTION, 1)));
+            net.minecraft.world.entity.projectile.ThrownPotion entity = new net.minecraft.world.entity.projectile.ThrownPotion(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), new net.minecraft.world.item.ItemStack(Items.SPLASH_POTION));
             return entity;
         }));
         register(new EntityTypeData<>(EntityType.TNT, TNTPrimed.class, CraftTNTPrimed::new, spawnData -> new PrimedTnt(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), null)));
@@ -393,13 +444,13 @@
         }));
         register(new EntityTypeData<>(EntityType.FIREWORK_ROCKET, Firework.class, CraftFirework::new, spawnData -> new FireworkRocketEntity(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), net.minecraft.world.item.ItemStack.EMPTY)));
         register(new EntityTypeData<>(EntityType.EVOKER_FANGS, EvokerFangs.class, CraftEvokerFangs::new, spawnData -> new net.minecraft.world.entity.projectile.EvokerFangs(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), (float) Math.toRadians(spawnData.yaw()), 0, null)));
-        register(new EntityTypeData<>(EntityType.COMMAND_BLOCK_MINECART, CommandMinecart.class, CraftMinecartCommand::new, spawnData -> new MinecartCommandBlock(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
-        register(new EntityTypeData<>(EntityType.MINECART, RideableMinecart.class, CraftMinecartRideable::new, spawnData -> new Minecart(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
-        register(new EntityTypeData<>(EntityType.CHEST_MINECART, StorageMinecart.class, CraftMinecartChest::new, spawnData -> new MinecartChest(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
-        register(new EntityTypeData<>(EntityType.FURNACE_MINECART, PoweredMinecart.class, CraftMinecartFurnace::new, spawnData -> new MinecartFurnace(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
-        register(new EntityTypeData<>(EntityType.TNT_MINECART, ExplosiveMinecart.class, CraftMinecartTNT::new, spawnData -> new MinecartTNT(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
-        register(new EntityTypeData<>(EntityType.HOPPER_MINECART, HopperMinecart.class, CraftMinecartHopper::new, spawnData -> new MinecartHopper(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
-        register(new EntityTypeData<>(EntityType.SPAWNER_MINECART, SpawnerMinecart.class, CraftMinecartMobSpawner::new, spawnData -> new MinecartSpawner(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
+        register(new EntityTypeData<>(EntityType.COMMAND_BLOCK_MINECART, CommandMinecart.class, CraftMinecartCommand::new, createMinecart(net.minecraft.world.entity.EntityType.COMMAND_BLOCK_MINECART)));
+        register(new EntityTypeData<>(EntityType.MINECART, RideableMinecart.class, CraftMinecartRideable::new, createMinecart(net.minecraft.world.entity.EntityType.MINECART)));
+        register(new EntityTypeData<>(EntityType.CHEST_MINECART, StorageMinecart.class, CraftMinecartChest::new, createMinecart(net.minecraft.world.entity.EntityType.CHEST_MINECART)));
+        register(new EntityTypeData<>(EntityType.FURNACE_MINECART, PoweredMinecart.class, CraftMinecartFurnace::new, createMinecart(net.minecraft.world.entity.EntityType.FURNACE_MINECART)));
+        register(new EntityTypeData<>(EntityType.TNT_MINECART, ExplosiveMinecart.class, CraftMinecartTNT::new, createMinecart(net.minecraft.world.entity.EntityType.TNT_MINECART)));
+        register(new EntityTypeData<>(EntityType.HOPPER_MINECART, HopperMinecart.class, CraftMinecartHopper::new, createMinecart(net.minecraft.world.entity.EntityType.HOPPER_MINECART)));
+        register(new EntityTypeData<>(EntityType.SPAWNER_MINECART, SpawnerMinecart.class, CraftMinecartMobSpawner::new, createMinecart(net.minecraft.world.entity.EntityType.SPAWNER_MINECART)));
 
         // None spawn able
         register(new EntityTypeData<>(EntityType.FISHING_BOBBER, FishHook.class, CraftFishHook::new, null)); // Cannot spawn a fish hook
@@ -419,7 +470,7 @@
     }
 
     private static <R extends net.minecraft.world.entity.Entity> Function<SpawnData, R> fromEntityType(net.minecraft.world.entity.EntityType<R> entityTypes) {
-        return spawnData -> entityTypes.create(spawnData.minecraftWorld());
+        return spawnData -> entityTypes.create(spawnData.minecraftWorld(), EntitySpawnReason.COMMAND);
     }
 
     private static <R extends net.minecraft.world.entity.LivingEntity> Function<SpawnData, R> createLiving(net.minecraft.world.entity.EntityType<R> entityTypes) {
@@ -430,6 +481,10 @@
         return CraftEntityTypes.combine(CraftEntityTypes.createAndMove(entityTypes), CraftEntityTypes.DIRECTION);
     }
 
+    private static <R extends AbstractMinecart> Function<SpawnData, R> createMinecart(net.minecraft.world.entity.EntityType<R> entityTypes) {
+        return spawnData -> AbstractMinecart.createMinecart(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z(), entityTypes, EntitySpawnReason.TRIGGERED, ItemStack.EMPTY, null);
+    }
+
     private static <R extends net.minecraft.world.entity.Entity> Function<SpawnData, R> createAndMove(net.minecraft.world.entity.EntityType<R> entityTypes) {
         return CraftEntityTypes.combine(CraftEntityTypes.fromEntityType(entityTypes), CraftEntityTypes.MOVE);
     }
@@ -466,8 +521,8 @@
                 if (nmsBlock.isSolid() || DiodeBlock.isDiode(nmsBlock)) {
                     boolean taken = false;
                     AABB bb = (ItemFrame.class.isAssignableFrom(clazz))
-                            ? BukkitMethodHooks.calculateBoundingBoxStaticItemFrame(pos, CraftBlock.blockFaceToNotch(dir).getOpposite())
-                            : BukkitMethodHooks.calculateBoundingBoxStaticPainting(pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height);
+                            ? net.minecraft.world.entity.decoration.ItemFrame.calculateBoundingBoxStatic(pos, CraftBlock.blockFaceToNotch(dir).getOpposite())
+                            : net.minecraft.world.entity.decoration.Painting.calculateBoundingBoxStatic(pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height);
                     List<net.minecraft.world.entity.Entity> list = spawnData.world().getEntities(null, bb);
                     for (Iterator<net.minecraft.world.entity.Entity> it = list.iterator(); !taken && it.hasNext(); ) {
                         net.minecraft.world.entity.Entity e = it.next();
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java	(date 1729674280246)
@@ -10,21 +10,13 @@
 import org.bukkit.inventory.Merchant;
 import org.bukkit.inventory.MerchantRecipe;
 
-public class CraftMerchant implements Merchant {
-
-    protected final net.minecraft.world.item.trading.Merchant merchant;
+public interface CraftMerchant extends Merchant {
 
-    public CraftMerchant(net.minecraft.world.item.trading.Merchant merchant) {
-        this.merchant = merchant;
-    }
-
-    public net.minecraft.world.item.trading.Merchant getMerchant() {
-        return this.merchant;
-    }
+    net.minecraft.world.item.trading.Merchant getMerchant();
 
     @Override
-    public List<MerchantRecipe> getRecipes() {
-        return Collections.unmodifiableList(Lists.transform(this.merchant.getOffers(), new Function<net.minecraft.world.item.trading.MerchantOffer, MerchantRecipe>() {
+    default List<MerchantRecipe> getRecipes() {
+        return Collections.unmodifiableList(Lists.transform(this.getMerchant().getOffers(), new Function<net.minecraft.world.item.trading.MerchantOffer, MerchantRecipe>() {
             @Override
             public MerchantRecipe apply(net.minecraft.world.item.trading.MerchantOffer recipe) {
                 return recipe.asBukkit();
@@ -33,8 +25,8 @@
     }
 
     @Override
-    public void setRecipes(List<MerchantRecipe> recipes) {
-        MerchantOffers recipesList = this.merchant.getOffers();
+    default void setRecipes(List<MerchantRecipe> recipes) {
+        MerchantOffers recipesList = this.getMerchant().getOffers();
         recipesList.clear();
         for (MerchantRecipe recipe : recipes) {
             recipesList.add(CraftMerchantRecipe.fromBukkit(recipe).toMinecraft());
@@ -42,38 +34,28 @@
     }
 
     @Override
-    public MerchantRecipe getRecipe(int i) {
-        return this.merchant.getOffers().get(i).asBukkit();
+    default MerchantRecipe getRecipe(int i) {
+        return this.getMerchant().getOffers().get(i).asBukkit();
     }
 
     @Override
-    public void setRecipe(int i, MerchantRecipe merchantRecipe) {
-        this.merchant.getOffers().set(i, CraftMerchantRecipe.fromBukkit(merchantRecipe).toMinecraft());
+    default void setRecipe(int i, MerchantRecipe merchantRecipe) {
+        this.getMerchant().getOffers().set(i, CraftMerchantRecipe.fromBukkit(merchantRecipe).toMinecraft());
     }
 
     @Override
-    public int getRecipeCount() {
-        return this.merchant.getOffers().size();
+    default int getRecipeCount() {
+        return this.getMerchant().getOffers().size();
     }
 
     @Override
-    public boolean isTrading() {
+    default boolean isTrading() {
         return this.getTrader() != null;
     }
 
     @Override
-    public HumanEntity getTrader() {
-        Player eh = this.merchant.getTradingPlayer();
+    default HumanEntity getTrader() {
+        Player eh = this.getMerchant().getTradingPlayer();
         return eh == null ? null : eh.getBukkitEntity();
     }
-
-    @Override
-    public int hashCode() {
-        return this.merchant.hashCode();
-    }
-
-    @Override
-    public boolean equals(final Object obj) {
-        return obj instanceof CraftMerchant && ((CraftMerchant) obj).merchant.equals(this.merchant);
-    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java	(date 1729674280129)
@@ -1,17 +1,15 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.List;
 import net.minecraft.world.entity.npc.Villager;
+import net.minecraft.world.item.trading.Merchant;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.inventory.CraftMerchant;
 import org.bukkit.entity.AbstractVillager;
-import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.MerchantRecipe;
 
-public class CraftAbstractVillager extends CraftAgeable implements AbstractVillager, InventoryHolder {
+public class CraftAbstractVillager extends CraftAgeable implements CraftMerchant, AbstractVillager, InventoryHolder {
 
     public CraftAbstractVillager(CraftServer server, net.minecraft.world.entity.npc.AbstractVillager entity) {
         super(server, entity);
@@ -22,6 +20,11 @@
         return (Villager) this.entity;
     }
 
+    @Override
+    public Merchant getMerchant() {
+        return this.getHandle();
+    }
+
     @Override
     public String toString() {
         return "CraftAbstractVillager";
@@ -31,43 +34,4 @@
     public Inventory getInventory() {
         return new CraftInventory(this.getHandle().getInventory());
     }
-
-    private CraftMerchant getMerchant() {
-        return this.getHandle().getCraftMerchant();
-    }
-
-    @Override
-    public List<MerchantRecipe> getRecipes() {
-        return this.getMerchant().getRecipes();
-    }
-
-    @Override
-    public void setRecipes(List<MerchantRecipe> recipes) {
-        this.getMerchant().setRecipes(recipes);
-    }
-
-    @Override
-    public MerchantRecipe getRecipe(int i) {
-        return this.getMerchant().getRecipe(i);
-    }
-
-    @Override
-    public void setRecipe(int i, MerchantRecipe merchantRecipe) {
-        this.getMerchant().setRecipe(i, merchantRecipe);
-    }
-
-    @Override
-    public int getRecipeCount() {
-        return this.getMerchant().getRecipeCount();
-    }
-
-    @Override
-    public boolean isTrading() {
-        return this.getTrader() != null;
-    }
-
-    @Override
-    public HumanEntity getTrader() {
-        return this.getMerchant().getTrader();
-    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/SerializableMeta.java	(date 1729674280270)
@@ -6,7 +6,6 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.Map;
 import java.util.NoSuchElementException;
-
 import org.bukkit.block.Banner;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
@@ -80,11 +79,12 @@
             // Convert Shield CraftMetaBlockState to CraftMetaShield
             if (meta instanceof CraftMetaBlockState state && state.hasBlockState() && state.getBlockState() instanceof Banner) {
                 meta = new CraftMetaShield(meta);
-                meta.unhandledTags.build().clear(CraftMetaShield.BASE_COLOR.TYPE);
+                meta.unhandledTags.clear(CraftMetaShield.BASE_COLOR.TYPE);
             }
+
             return meta;
         } catch (final InstantiationException | IllegalAccessException e) {
-                throw new AssertionError(e);
+            throw new AssertionError(e);
         } catch (final InvocationTargetException e) {
             throw e.getCause();
         }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java	(date 1729674280138)
@@ -5,8 +5,6 @@
 import org.bukkit.entity.Creeper;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.entity.CreeperPowerEvent;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public class CraftCreeper extends CraftMonster implements Creeper {
 
@@ -24,7 +22,7 @@
         CreeperPowerEvent.PowerCause cause = powered ? CreeperPowerEvent.PowerCause.SET_ON : CreeperPowerEvent.PowerCause.SET_OFF;
 
         // only call event when we are not in world generation
-        if (this.getHandle().bridge$generation() || !this.callPowerEvent(cause)) {
+        if (this.getHandle().generation || !this.callPowerEvent(cause)) {
             this.getHandle().setPowered(powered);
         }
     }
@@ -79,10 +77,9 @@
 
     @Override
     public void ignite(Entity entity) {
-        // Banner TODO fixme
         Preconditions.checkNotNull(entity, "entity cannot be null");
-       // getHandle().entityIgniter = ((CraftEntity) entity).getHandle();
-        getHandle().ignite();
+        this.getHandle().entityIgniter = ((CraftEntity) entity).getHandle();
+        this.getHandle().ignite();
     }
 
     @Override
@@ -91,10 +88,8 @@
     }
 
     @Override
-    public @Nullable Entity getIgniter() {
-        // Banner TODO fixme
-       // return (getHandle().entityIgniter != null) ? getHandle().entityIgniter.getBukkitEntity() : null;
-        return null;
+    public Entity getIgniter() {
+        return (this.getHandle().entityIgniter != null) ? this.getHandle().entityIgniter.getBukkitEntity() : null;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java	(date 1729674280129)
@@ -2,6 +2,7 @@
 
 import com.google.common.base.Preconditions;
 import net.minecraft.core.BlockPos;
+import net.minecraft.world.item.Items;
 import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -60,7 +61,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -70,12 +71,12 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
     public boolean isInBlock() {
-        return this.getHandle().inGround;
+        return this.getHandle().isInGround();
     }
 
     @Override
@@ -109,7 +110,9 @@
 
     @Override
     public boolean isShotFromCrossbow() {
-        return this.getHandle().shotFromCrossbow();
+        net.minecraft.world.item.ItemStack firedFromWeapon = this.getHandle().getWeaponItem();
+
+        return firedFromWeapon != null && firedFromWeapon.is(Items.CROSSBOW);
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java	(date 1729674280247)
@@ -11,10 +11,12 @@
 import net.minecraft.world.item.trading.MerchantOffers;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 
-public class CraftMerchantCustom extends CraftMerchant {
+public class CraftMerchantCustom implements CraftMerchant {
+
+    private MinecraftMerchant merchant;
 
     public CraftMerchantCustom(String title) {
-        super(new MinecraftMerchant(title));
+        this.merchant = new MinecraftMerchant(title);
         this.getMerchant().craftMerchant = this;
     }
 
@@ -25,7 +27,7 @@
 
     @Override
     public MinecraftMerchant getMerchant() {
-        return (MinecraftMerchant) super.getMerchant();
+        return this.merchant;
     }
 
     public static class MinecraftMerchant implements Merchant {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java	(date 1729674280270)
@@ -2,8 +2,7 @@
 
 import java.util.Iterator;
 import java.util.Map;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.RecipeType;
 import org.bukkit.inventory.Recipe;
@@ -12,7 +11,7 @@
     private final Iterator<Map.Entry<RecipeType<?>, RecipeHolder<?>>> recipes;
 
     public RecipeIterator() {
-        this.recipes = BukkitMethodHooks.getServer().getRecipeManager().byType.entries().iterator();
+        this.recipes = MinecraftServer.getServer().getRecipeManager().recipes.byType.entries().iterator();
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java	(date 1729674280252)
@@ -25,6 +25,7 @@
 import org.bukkit.craftbukkit.block.CraftBlockStates;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BlockStateMeta;
+import org.bukkit.util.BlockVector;
 
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta {
@@ -54,6 +55,7 @@
 
     final Material material;
     private CraftBlockEntityState<?> blockEntityTag;
+    private BlockVector position;
     private CompoundTag internalTag;
 
     CraftMetaBlockState(CraftMetaItem meta, Material material) {
@@ -68,14 +70,20 @@
 
         CraftMetaBlockState te = (CraftMetaBlockState) meta;
         this.blockEntityTag = te.blockEntityTag;
+        this.position = te.position;
     }
 
     CraftMetaBlockState(DataComponentPatch tag, Material material) {
         super(tag);
         this.material = material;
 
-        getOrEmpty(tag, CraftMetaBlockState.BLOCK_ENTITY_TAG).ifPresent((nbt) -> {
-            this.blockEntityTag = CraftMetaBlockState.getBlockState(material, nbt.copyTag());
+        getOrEmpty(tag, CraftMetaBlockState.BLOCK_ENTITY_TAG).ifPresent((blockTag) -> {
+            CompoundTag nbt = blockTag.copyTag();
+
+            this.blockEntityTag = CraftMetaBlockState.getBlockState(material, nbt);
+            if (nbt.contains("x", CraftMagicNumbers.NBT.TAG_ANY_NUMBER) && nbt.contains("y", CraftMagicNumbers.NBT.TAG_ANY_NUMBER) && nbt.contains("z", CraftMagicNumbers.NBT.TAG_ANY_NUMBER)) {
+                this.position = new BlockVector(nbt.getInt("x"), nbt.getInt("y"), nbt.getInt("z"));
+            }
         });
 
         if (!tag.isEmpty()) {
@@ -91,7 +99,7 @@
             Set<DataComponentType<?>> applied = blockEntityTag.applyComponents(map, tag);
             // Mark applied components as handled
             for (DataComponentType<?> seen : applied) {
-                this.unhandledTags.build().clear(seen);
+                this.unhandledTags.clear(seen);
             }
             // Only set blockEntityTag if something was applied
             if (!applied.isEmpty()) {
@@ -113,19 +121,39 @@
             this.blockEntityTag = CraftMetaBlockState.getBlockState(this.material, this.internalTag);
             this.internalTag = null;
         }
+        this.position = SerializableMeta.getObject(BlockVector.class, map, "blockPosition", true);
     }
 
     @Override
     void applyToItem(CraftMetaItem.Applicator tag) {
         super.applyToItem(tag);
 
+        CompoundTag nbt = null;
         if (this.blockEntityTag != null) {
-            tag.put(CraftMetaBlockState.BLOCK_ENTITY_TAG, CustomData.of(this.blockEntityTag.getSnapshotNBTWithoutComponents()));
+            nbt = this.blockEntityTag.getItemNBT();
 
             for (TypedDataComponent<?> component : this.blockEntityTag.collectComponents()) {
                 tag.putIfAbsent(component);
             }
         }
+
+        if (this.position != null) {
+            if (nbt == null) {
+                nbt = new CompoundTag();
+            }
+
+            nbt.putInt("x", this.position.getBlockX());
+            nbt.putInt("y", this.position.getBlockY());
+            nbt.putInt("z", this.position.getBlockZ());
+        }
+
+        if (nbt != null && !nbt.isEmpty()) {
+            CraftBlockEntityState<?> tile = (this.blockEntityTag != null) ? this.blockEntityTag : CraftMetaBlockState.getBlockState(this.material, null);
+            // See ItemBlock#setBlockEntityData
+            tile.addEntityType(nbt);
+
+            tag.put(CraftMetaBlockState.BLOCK_ENTITY_TAG, CustomData.of(nbt));
+        }
     }
 
     @Override
@@ -148,6 +176,9 @@
     ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
         super.serialize(builder);
         builder.put("blockMaterial", this.material.name());
+        if (this.position != null) {
+            builder.put("blockPosition", this.position);
+        }
         return builder;
     }
 
@@ -158,6 +189,9 @@
         if (this.blockEntityTag != null) {
             hash = 61 * hash + this.blockEntityTag.hashCode();
         }
+        if (this.position != null) {
+            hash = 61 * hash + this.position.hashCode();
+        }
         return original != hash ? CraftMetaBlockState.class.hashCode() ^ hash : hash;
     }
 
@@ -169,19 +203,23 @@
         if (meta instanceof CraftMetaBlockState) {
             CraftMetaBlockState that = (CraftMetaBlockState) meta;
 
-            return Objects.equal(this.blockEntityTag, that.blockEntityTag);
+            return Objects.equal(this.blockEntityTag, that.blockEntityTag) && Objects.equal(this.position, that.position);
         }
         return true;
     }
 
+    boolean isBlockStateEmpty() {
+        return !(this.blockEntityTag != null || this.position != null);
+    }
+
     @Override
     boolean notUncommon(CraftMetaItem meta) {
-        return super.notUncommon(meta) && (meta instanceof CraftMetaBlockState || this.blockEntityTag == null);
+        return super.notUncommon(meta) && (meta instanceof CraftMetaBlockState || this.isBlockStateEmpty());
     }
 
     @Override
     boolean isEmpty() {
-        return super.isEmpty() && this.blockEntityTag == null;
+        return super.isEmpty() && this.isBlockStateEmpty();
     }
 
     @Override
@@ -190,6 +228,9 @@
         if (this.blockEntityTag != null) {
             meta.blockEntityTag = this.blockEntityTag.copy();
         }
+        if (this.position != null) {
+            meta.position = this.position.clone();
+        }
         return meta;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java	(date 1729674280132)
@@ -50,7 +50,7 @@
     @Override
     public void clearCustomEffects() {
         PotionContents old = this.getHandle().getPotionContents();
-        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), List.of()));
+        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), List.of(), old.customName()));
         this.getHandle().updateColor();
     }
 
@@ -86,7 +86,7 @@
         Holder<MobEffect> minecraft = CraftPotionEffectType.bukkitToMinecraftHolder(effect);
 
         PotionContents old = this.getHandle().getPotionContents();
-        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), old.customEffects().stream().filter((mobEffect) -> !mobEffect.getEffect().equals(minecraft)).toList()));
+        this.getHandle().setPotionContents(new PotionContents(old.potion(), old.customColor(), old.customEffects().stream().filter((mobEffect) -> !mobEffect.getEffect().equals(minecraft)).toList(), old.customName()));
         return true;
     }
 
@@ -106,7 +106,7 @@
             this.getHandle().setPotionContents(this.getHandle().getPotionContents().withPotion(CraftPotionType.bukkitToMinecraftHolder(potionType)));
         } else {
             PotionContents old = this.getHandle().getPotionContents();
-            this.getHandle().setPotionContents(new PotionContents(Optional.empty(), old.customColor(), old.customEffects()));
+            this.getHandle().setPotionContents(new PotionContents(Optional.empty(), old.customColor(), old.customEffects(), old.customName()));
         }
     }
 
@@ -119,7 +119,7 @@
     public void setColor(Color color) {
         int colorRGB = (color == null) ? -1 : color.asRGB();
         PotionContents old = this.getHandle().getPotionContents();
-        this.getHandle().setPotionContents(new PotionContents(old.potion(), Optional.of(colorRGB), old.customEffects()));
+        this.getHandle().setPotionContents(new PotionContents(old.potion(), Optional.of(colorRGB), old.customEffects(), old.customName()));
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java	(date 1729674280239)
@@ -8,11 +8,11 @@
 import java.util.function.Supplier;
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.component.ItemAttributeModifiers;
 import net.minecraft.world.level.block.ComposterBlock;
-import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
@@ -172,7 +172,7 @@
 
     @Override
     public boolean isFuel() {
-        return AbstractFurnaceBlockEntity.isFuel(new net.minecraft.world.item.ItemStack(this.item));
+        return MinecraftServer.getServer().fuelValues().isFuel(new net.minecraft.world.item.ItemStack(this.item));
     }
 
     @Override
@@ -188,8 +188,8 @@
 
     @Override
     public ItemType getCraftingRemainingItem() {
-        Item expectedItem = this.item.getCraftingRemainingItem();
-        return expectedItem == null ? null : CraftItemType.minecraftToBukkitNew(expectedItem);
+        net.minecraft.world.item.ItemStack expectedItem = this.item.getCraftingRemainder();
+        return expectedItem.isEmpty() ? null : CraftItemType.minecraftToBukkitNew(expectedItem.getItem());
     }
 
 //    @Override
@@ -202,9 +202,6 @@
         ImmutableMultimap.Builder<Attribute, AttributeModifier> defaultAttributes = ImmutableMultimap.builder();
 
         ItemAttributeModifiers nmsDefaultAttributes = this.item.components().getOrDefault(DataComponents.ATTRIBUTE_MODIFIERS, ItemAttributeModifiers.EMPTY);
-        if (nmsDefaultAttributes.modifiers().isEmpty()) {
-            nmsDefaultAttributes = this.item.getDefaultAttributeModifiers();
-        }
 
         nmsDefaultAttributes.forEach(CraftEquipmentSlot.getNMS(slot), (key, value) -> {
             Attribute attribute = CraftAttribute.minecraftToBukkit(key.value());
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java	(date 1729674280170)
@@ -10,6 +10,26 @@
         super(server, entity);
     }
 
+    @Override
+    public float getYield() {
+        return this.getHandle().explosionPowerBase;
+    }
+
+    @Override
+    public boolean isIncendiary() {
+        return this.getHandle().isIncendiary;
+    }
+
+    @Override
+    public void setIsIncendiary(boolean isIncendiary) {
+        this.getHandle().isIncendiary = isIncendiary;
+    }
+
+    @Override
+    public void setYield(float yield) {
+        this.getHandle().explosionPowerBase = yield;
+    }
+
     @Override
     public void setFuseTicks(int ticks) {
         this.getHandle().fuse = ticks;
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java	(date 1729674280158)
@@ -42,7 +42,7 @@
             default:
                 throw new IllegalArgumentException(String.format("%s is not a valid facing direction", face));
         }
-        if (!force && !this.getHandle().bridge$generation() && !hanging.survives()) {
+        if (!force && !this.getHandle().generation && !hanging.survives()) {
             // Revert since it doesn't fit
             hanging.setDirection(dir);
             return false;
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java	(date 1729674280261)
@@ -4,8 +4,13 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
+import net.minecraft.core.Holder;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.crafting.Ingredient;
-import org.bukkit.inventory.ItemStack;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.recipe.CookingBookCategory;
@@ -15,47 +20,53 @@
 
     void addToCraftingManager();
 
-    default Optional<Ingredient> toNMS(RecipeChoice bukkit, boolean requireNotEmpty) {
+    default Optional<Ingredient> toNMSOptional(RecipeChoice bukkit, boolean requireNotEmpty) {
+        return (bukkit == null) ? Optional.empty() : Optional.of(this.toNMS(bukkit, requireNotEmpty));
+    }
+
+    default Ingredient toNMS(RecipeChoice bukkit, boolean requireNotEmpty) {
         Ingredient stack;
 
         if (bukkit == null) {
-            stack = Ingredient.EMPTY;
+            stack = Ingredient.of();
         } else if (bukkit instanceof RecipeChoice.MaterialChoice) {
-            stack = new Ingredient(((RecipeChoice.MaterialChoice) bukkit).getChoices().stream().map((mat) -> new net.minecraft.world.item.crafting.Ingredient.ItemValue(CraftItemStack.asNMSCopy(new ItemStack(mat)))));
+            stack = Ingredient.of(((RecipeChoice.MaterialChoice) bukkit).getChoices().stream().map((mat) -> CraftItemType.bukkitToMinecraft(mat)));
         } else if (bukkit instanceof RecipeChoice.ExactChoice) {
-            stack = new Ingredient(((RecipeChoice.ExactChoice) bukkit).getChoices().stream().map((mat) -> new net.minecraft.world.item.crafting.Ingredient.ItemValue(CraftItemStack.asNMSCopy(mat))));
-            stack.banner$setExact(true);
+            stack = Ingredient.ofStacks(((RecipeChoice.ExactChoice) bukkit).getChoices().stream().map((mat) -> CraftItemStack.asNMSCopy(mat)).toList());
         } else {
             throw new IllegalArgumentException("Unknown recipe stack instance " + bukkit);
         }
 
-        stack.getItems();
+        List<Holder<Item>> items = stack.items();
         if (requireNotEmpty) {
-            Preconditions.checkArgument(stack.itemStacks.length != 0, "Recipe requires at least one non-air choice");
+            Preconditions.checkArgument(!items.isEmpty(), "Recipe requires at least one non-air choice");
         }
 
         return stack;
     }
 
     public static RecipeChoice toBukkit(Optional<Ingredient> list) {
-        list.getItems();
+        return list.map(CraftRecipe::toBukkit).orElse(null);
+    }
 
-        if (list.itemStacks.length == 0) {
+    public static RecipeChoice toBukkit(Ingredient list) {
+        List<Holder<Item>> items = list.items();
+
+        if (items.isEmpty()) {
             return null;
         }
 
-        if (list.bridge$exact()) {
-            List<org.bukkit.inventory.ItemStack> choices = new ArrayList<>(list.itemStacks.length);
-            for (net.minecraft.world.item.ItemStack i : list.itemStacks) {
+        if (list.isExact()) {
+            List<org.bukkit.inventory.ItemStack> choices = new ArrayList<>(list.itemStacks().size());
+            for (net.minecraft.world.item.ItemStack i : list.itemStacks()) {
                 choices.add(CraftItemStack.asBukkitCopy(i));
             }
 
             return new RecipeChoice.ExactChoice(choices);
         } else {
-
-            List<org.bukkit.Material> choices = new ArrayList<>(list.itemStacks.length);
-            for (net.minecraft.world.item.ItemStack i : list.itemStacks) {
-                choices.add(CraftItemType.minecraftToBukkit(i.getItem()));
+            List<org.bukkit.Material> choices = new ArrayList<>(items.size());
+            for (Holder<Item> i : items) {
+                choices.add(CraftItemType.minecraftToBukkit(i.value()));
             }
 
             return new RecipeChoice.MaterialChoice(choices);
@@ -77,4 +88,8 @@
     public static CookingBookCategory getCategory(net.minecraft.world.item.crafting.CookingBookCategory nms) {
         return CookingBookCategory.valueOf(nms.name());
     }
+
+    public static ResourceKey<net.minecraft.world.item.crafting.Recipe<?>> toMinecraft(NamespacedKey key) {
+        return ResourceKey.create(Registries.RECIPE, CraftNamespacedKey.toMinecraft(key));
+    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java	(date 1729674280237)
@@ -15,7 +15,7 @@
     private final CraftInventory left;
     private final CraftInventory right;
 
-    public CraftInventoryDoubleChest(com.mohistmc.banner.bukkit.DoubleChestInventory block) {
+    public CraftInventoryDoubleChest(ChestBlock.DoubleInventory block) {
         super(block.inventorylargechest);
         this.tile = block;
         this.left = new CraftInventory(block.inventorylargechest.container1);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java	(date 1729674280167)
@@ -8,12 +8,15 @@
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import net.minecraft.core.component.DataComponents;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.attributes.Attributes;
@@ -28,6 +31,8 @@
 import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
 import net.minecraft.world.entity.projectile.ThrownTrident;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.component.Consumable;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
@@ -46,7 +51,9 @@
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
 import org.bukkit.entity.AbstractArrow;
+import org.bukkit.entity.AbstractWindCharge;
 import org.bukkit.entity.Arrow;
+import org.bukkit.entity.BreezeWindCharge;
 import org.bukkit.entity.DragonFireball;
 import org.bukkit.entity.Egg;
 import org.bukkit.entity.EnderPearl;
@@ -69,11 +76,9 @@
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
-import org.bukkit.entity.WindCharge;
 import org.bukkit.entity.WitherSkull;
 import org.bukkit.entity.memory.MemoryKey;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
-import org.bukkit.event.entity.EntityRemoveEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.ItemStack;
@@ -106,9 +111,8 @@
         Preconditions.checkArgument(health >= 0 && health <= this.getMaxHealth(), "Health value (%s) must be between 0 and %s", health, this.getMaxHealth());
 
         // during world generation, we don't want to run logic for dropping items and xp
-        if (this.getHandle().bridge$generation() && health == 0) {
-            this.getHandle().discard(); // Add Bukkit remove cause
-            this.getHandle().pushRemoveCause(null);
+        if (this.getHandle().generation && health == 0) {
+            this.getHandle().discard(null); // Add Bukkit remove cause
             return;
         }
 
@@ -163,7 +167,7 @@
     }
 
     private List<Block> getLineOfSight(Set<Material> transparent, int maxDistance, int maxLength) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot get line of sight during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot get line of sight during world generation");
 
         if (transparent == null) {
             transparent = Sets.newHashSet(Material.AIR, Material.CAVE_AIR, Material.VOID_AIR);
@@ -221,7 +225,7 @@
 
     @Override
     public RayTraceResult rayTraceBlocks(double maxDistance, FluidCollisionMode fluidCollisionMode) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot ray tray blocks during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot ray tray blocks during world generation");
 
         Location eyeLocation = this.getEyeLocation();
         Vector direction = eyeLocation.getDirection();
@@ -240,12 +244,12 @@
 
     @Override
     public int getMaximumAir() {
-        return this.getHandle().bridge$maxAirTicks();
+        return this.getHandle().maxAirTicks;
     }
 
     @Override
     public void setMaximumAir(int ticks) {
-        this.getHandle().banner$setMaxAirTicks(ticks);
+        this.getHandle().maxAirTicks = ticks;
     }
 
     @Override
@@ -285,6 +289,11 @@
         this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_ARROW_COUNT_ID, count);
     }
 
+    @Override
+    public boolean isInvulnerable() {
+        return this.getHandle().isInvulnerableTo((ServerLevel) this.getHandle().level(), this.getHandle().damageSources().generic());
+    }
+
     @Override
     public void damage(double amount) {
         this.damage(amount, this.getHandle().damageSources().generic());
@@ -312,7 +321,7 @@
 
     private void damage(double amount, DamageSource damageSource) {
         Preconditions.checkArgument(damageSource != null, "damageSource cannot be null");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot damage entity during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot damage entity during world generation");
 
         this.entity.hurt(damageSource, (float) amount);
     }
@@ -437,19 +446,19 @@
     @Override
     @SuppressWarnings("unchecked")
     public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot launch projectile during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot launch projectile during world generation");
 
         net.minecraft.world.level.Level world = ((CraftWorld) this.getWorld()).getHandle();
         net.minecraft.world.entity.Entity launch = null;
 
         if (Snowball.class.isAssignableFrom(projectile)) {
-            launch = new net.minecraft.world.entity.projectile.Snowball(world, this.getHandle());
+            launch = new net.minecraft.world.entity.projectile.Snowball(world, this.getHandle(), new net.minecraft.world.item.ItemStack(Items.SNOWBALL));
             ((ThrowableProjectile) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), 0.0F, 1.5F, 1.0F); // ItemSnowball
         } else if (Egg.class.isAssignableFrom(projectile)) {
-            launch = new ThrownEgg(world, this.getHandle());
+            launch = new ThrownEgg(world, this.getHandle(), new net.minecraft.world.item.ItemStack(Items.EGG));
             ((ThrowableProjectile) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), 0.0F, 1.5F, 1.0F); // ItemEgg
         } else if (EnderPearl.class.isAssignableFrom(projectile)) {
-            launch = new ThrownEnderpearl(world, this.getHandle());
+            launch = new ThrownEnderpearl(world, this.getHandle(), new net.minecraft.world.item.ItemStack(Items.ENDER_PEARL));
             ((ThrowableProjectile) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), 0.0F, 1.5F, 1.0F); // ItemEnderPearl
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
@@ -465,18 +474,16 @@
             ((net.minecraft.world.entity.projectile.AbstractArrow) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), 0.0F, 3.0F, 1.0F); // ItemBow
         } else if (ThrownPotion.class.isAssignableFrom(projectile)) {
             if (LingeringPotion.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, this.getHandle());
-                ((net.minecraft.world.entity.projectile.ThrownPotion) launch).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.LINGERING_POTION, 1)));
+                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, this.getHandle(), new net.minecraft.world.item.ItemStack(Items.LINGERING_POTION));
             } else {
-                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, this.getHandle());
-                ((net.minecraft.world.entity.projectile.ThrownPotion) launch).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.SPLASH_POTION, 1)));
+                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, this.getHandle(), new net.minecraft.world.item.ItemStack(Items.SPLASH_POTION));
             }
             ((ThrowableProjectile) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), -20.0F, 0.5F, 1.0F); // ItemSplashPotion
         } else if (ThrownExpBottle.class.isAssignableFrom(projectile)) {
-            launch = new ThrownExperienceBottle(world, this.getHandle());
+            launch = new ThrownExperienceBottle(world, this.getHandle(), new net.minecraft.world.item.ItemStack(Items.EXPERIENCE_BOTTLE));
             ((ThrowableProjectile) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), -20.0F, 0.7F, 1.0F); // ItemExpBottle
         } else if (FishHook.class.isAssignableFrom(projectile) && this.getHandle() instanceof net.minecraft.world.entity.player.Player) {
-            launch = new FishingHook((net.minecraft.world.entity.player.Player) this.getHandle(), world, 0, 0);
+            launch = new FishingHook((net.minecraft.world.entity.player.Player) this.getHandle(), world, 0, 0, new net.minecraft.world.item.ItemStack(Items.FISHING_ROD));
         } else if (Fireball.class.isAssignableFrom(projectile)) {
             Location location = this.getEyeLocation();
             Vector direction = location.getDirection().multiply(10);
@@ -488,21 +495,26 @@
                 launch = new net.minecraft.world.entity.projectile.WitherSkull(world, this.getHandle(), vec);
             } else if (DragonFireball.class.isAssignableFrom(projectile)) {
                 launch = new net.minecraft.world.entity.projectile.DragonFireball(world, this.getHandle(), vec);
-            } else if (WindCharge.class.isAssignableFrom(projectile)) {
-                launch = EntityType.WIND_CHARGE.create(world);
-                ((net.minecraft.world.entity.projectile.windcharge.WindCharge) launch).setOwner(this.getHandle());
-                ((net.minecraft.world.entity.projectile.windcharge.WindCharge) launch).assignDirectionalMovement(vec, 0.1D);
+            } else if (AbstractWindCharge.class.isAssignableFrom(projectile)) {
+                if (BreezeWindCharge.class.isAssignableFrom(projectile)) {
+                    launch = EntityType.BREEZE_WIND_CHARGE.create(world, EntitySpawnReason.TRIGGERED);
+                } else {
+                    launch = EntityType.WIND_CHARGE.create(world, EntitySpawnReason.TRIGGERED);
+                }
+
+                ((net.minecraft.world.entity.projectile.windcharge.AbstractWindCharge) launch).setOwner(this.getHandle());
+                ((net.minecraft.world.entity.projectile.windcharge.AbstractWindCharge) launch).shootFromRotation(this.getHandle(), this.getHandle().getXRot(), this.getHandle().getYRot(), 0.0F, 1.5F, 1.0F); // WindChargeItem
             } else {
                 launch = new LargeFireball(world, this.getHandle(), vec, 1);
             }
 
-            ((AbstractHurtingProjectile) launch).banner$setProjectileSource(this);
+            ((AbstractHurtingProjectile) launch).projectileSource = this;
             launch.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         } else if (LlamaSpit.class.isAssignableFrom(projectile)) {
             Location location = this.getEyeLocation();
             Vector direction = location.getDirection();
 
-            launch = EntityType.LLAMA_SPIT.create(world);
+            launch = EntityType.LLAMA_SPIT.create(world, EntitySpawnReason.TRIGGERED);
 
             ((net.minecraft.world.entity.projectile.LlamaSpit) launch).setOwner(this.getHandle());
             ((net.minecraft.world.entity.projectile.LlamaSpit) launch).shoot(direction.getX(), direction.getY(), direction.getZ(), 1.5F, 10.0F); // EntityLlama
@@ -531,7 +543,7 @@
 
     @Override
     public boolean hasLineOfSight(Entity other) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot check line of sight during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot check line of sight during world generation");
 
         return this.getHandle().hasLineOfSight(((CraftEntity) other).getHandle());
     }
@@ -558,7 +570,7 @@
         if (this.getHandle() instanceof Mob) {
             ((Mob) this.getHandle()).setCanPickUpLoot(pickup);
         } else {
-            this.getHandle().banner$setBukkitPickUpLoot(pickup);
+            this.getHandle().bukkitPickUpLoot = pickup;
         }
     }
 
@@ -567,7 +579,7 @@
         if (this.getHandle() instanceof Mob) {
             return ((Mob) this.getHandle()).canPickUpLoot();
         } else {
-            return this.getHandle().bridge$bukkitPickUpLoot();
+            return this.getHandle().bukkitPickUpLoot;
         }
     }
 
@@ -604,7 +616,7 @@
 
     @Override
     public boolean setLeashHolder(Entity holder) {
-        if (this.getHandle().bridge$generation() || (this.getHandle() instanceof WitherBoss) || !(this.getHandle() instanceof Mob)) {
+        if (this.getHandle().generation || (this.getHandle() instanceof WitherBoss) || !(this.getHandle() instanceof Mob)) {
             return false;
         }
 
@@ -646,6 +658,11 @@
         return this.getHandle().isAutoSpinAttack();
     }
 
+    @Override
+    public void setRiptiding(boolean riptiding) {
+        this.getHandle().setLivingEntityFlag(net.minecraft.world.entity.LivingEntity.LIVING_ENTITY_FLAG_SPIN_ATTACK, riptiding);
+    }
+
     @Override
     public boolean isSleeping() {
         return this.getHandle().isSleeping();
@@ -653,14 +670,14 @@
 
     @Override
     public boolean isClimbing() {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot check if climbing during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot check if climbing during world generation");
 
         return this.getHandle().onClimbable();
     }
 
     @Override
     public AttributeInstance getAttribute(Attribute attribute) {
-        return this.getHandle().bridge$craftAttributes().getAttribute(attribute);
+        return this.getHandle().craftAttributes.getAttribute(attribute);
     }
 
     @Override
@@ -678,25 +695,25 @@
     @Override
     public void attack(Entity target) {
         Preconditions.checkArgument(target != null, "target == null");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot attack during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot attack during world generation");
 
         if (this.getHandle() instanceof net.minecraft.world.entity.player.Player) {
             ((net.minecraft.world.entity.player.Player) this.getHandle()).attack(((CraftEntity) target).getHandle());
         } else {
-            this.getHandle().doHurtTarget(((CraftEntity) target).getHandle());
+            this.getHandle().doHurtTarget((ServerLevel) ((CraftEntity) target).getHandle().level(), ((CraftEntity) target).getHandle());
         }
     }
 
     @Override
     public void swingMainHand() {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot swing hand during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot swing hand during world generation");
 
         this.getHandle().swing(InteractionHand.MAIN_HAND, true);
     }
 
     @Override
     public void swingOffHand() {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot swing hand during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot swing hand during world generation");
 
         this.getHandle().swing(InteractionHand.OFF_HAND, true);
     }
@@ -717,17 +734,17 @@
 
     @Override
     public void setCollidable(boolean collidable) {
-        this.getHandle().banner$setCollides(collidable);
+        this.getHandle().collides = collidable;
     }
 
     @Override
     public boolean isCollidable() {
-        return this.getHandle().bridge$collides();
+        return this.getHandle().collides;
     }
 
     @Override
     public Set<UUID> getCollidableExemptions() {
-        return this.getHandle().bridge$collidableExemptions();
+        return this.getHandle().collidableExemptions;
     }
 
     @Override
@@ -769,14 +786,26 @@
 
     @Override
     public Sound getDrinkingSound(ItemStack itemStack) {
-        Preconditions.checkArgument(itemStack != null, "itemStack must not be null");
-        return CraftSound.minecraftToBukkit(this.getHandle().getDrinkingSound0(CraftItemStack.asNMSCopy(itemStack)));
+        return this.getEatingSound(itemStack);
     }
 
     @Override
     public Sound getEatingSound(ItemStack itemStack) {
         Preconditions.checkArgument(itemStack != null, "itemStack must not be null");
-        return CraftSound.minecraftToBukkit(this.getHandle().getEatingSound0(CraftItemStack.asNMSCopy(itemStack)));
+
+        net.minecraft.world.item.ItemStack nms = CraftItemStack.asNMSCopy(itemStack);
+        Consumable consumable = nms.get(DataComponents.CONSUMABLE);
+        SoundEvent soundeffect = SoundEvents.GENERIC_DRINK.value();
+
+        if (consumable != null) {
+            if (this.getHandle() instanceof Consumable.OverrideConsumeSound consumable_b) {
+                soundeffect = consumable_b.getConsumeSound(nms);
+            } else {
+                soundeffect = (SoundEvent) consumable.sound().value();
+            }
+        }
+
+        return CraftSound.minecraftToBukkit(soundeffect);
     }
 
     @Override
@@ -796,7 +825,7 @@
 
     @Override
     public void setInvisible(boolean invisible) {
-        this.getHandle().banner$setPersistentInvisibility(invisible);
+        this.getHandle().persistentInvisibility = invisible;
         this.getHandle().setSharedFlag(5, invisible);
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java	(date 1729674280233)
@@ -1,9 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.FurnaceRecipe;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
@@ -27,6 +26,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmeltingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmeltingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java	(date 1729674280259)
@@ -7,7 +7,9 @@
 import java.util.Map;
 import net.minecraft.core.component.DataComponentPatch;
 import net.minecraft.core.component.DataComponents;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.crafting.Recipe;
 import org.bukkit.NamespacedKey;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
@@ -16,7 +18,7 @@
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBookMeta {
 
-    static final ItemMetaKeyType<List<ResourceLocation>> BOOK_RECIPES = new ItemMetaKeyType<>(DataComponents.RECIPES, "Recipes");
+    static final ItemMetaKeyType<List<ResourceKey<Recipe<?>>>> BOOK_RECIPES = new ItemMetaKeyType<>(DataComponents.RECIPES, "Recipes");
     static final int MAX_RECIPES = Short.MAX_VALUE;
 
     protected List<NamespacedKey> recipes = new ArrayList<NamespacedKey>();
@@ -35,7 +37,7 @@
 
         getOrEmpty(tag, CraftMetaKnowledgeBook.BOOK_RECIPES).ifPresent((pages) -> {
             for (int i = 0; i < pages.size(); i++) {
-                ResourceLocation recipe = pages.get(i);
+                ResourceLocation recipe = pages.get(i).location();
 
                 this.addRecipe(CraftNamespacedKey.fromMinecraft(recipe));
             }
@@ -60,9 +62,9 @@
         super.applyToItem(itemData);
 
         if (this.hasRecipes()) {
-            List<ResourceLocation> list = new ArrayList<>();
+            List<ResourceKey<Recipe<?>>> list = new ArrayList<>();
             for (NamespacedKey recipe : this.recipes) {
-                list.add(CraftNamespacedKey.toMinecraft(recipe));
+                list.add(CraftRecipe.toMinecraft(recipe));
             }
             itemData.put(CraftMetaKnowledgeBook.BOOK_RECIPES, list);
         }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java	(date 1729674280170)
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Optional;
 import net.minecraft.sounds.SoundEvent;
 import org.bukkit.Sound;
 import org.bukkit.craftbukkit.CraftLootTable;
@@ -17,7 +18,7 @@
 
     @Override
     public void setTarget(LivingEntity target) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot set target during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot set target during world generation");
 
         net.minecraft.world.entity.Mob entity = this.getHandle();
         if (target == null) {
@@ -36,12 +37,12 @@
 
     @Override
     public void setAware(boolean aware) {
-        this.getHandle().banner$setAware(aware);
+        this.getHandle().aware = aware;
     }
 
     @Override
     public boolean isAware() {
-        return this.getHandle().bridge$aware();
+        return this.getHandle().aware;
     }
 
     @Override
@@ -62,12 +63,12 @@
 
     @Override
     public void setLootTable(LootTable table) {
-        this.getHandle().lootTable = CraftLootTable.bukkitToMinecraft(table);
+        this.getHandle().lootTable = Optional.ofNullable(CraftLootTable.bukkitToMinecraft(table));
     }
 
     @Override
     public LootTable getLootTable() {
-        return CraftLootTable.minecraftToBukkit(this.getHandle().getLootTable());
+        return CraftLootTable.minecraftToBukkit(this.getHandle().getLootTable().orElse(null));
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java	(date 1729674280239)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import java.util.Optional;
@@ -10,6 +9,7 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.component.DataComponentPatch;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.EnchantmentTags;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.item.Item;
@@ -24,9 +24,11 @@
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftEntity;
 import org.bukkit.craftbukkit.entity.CraftEntityType;
+import org.bukkit.craftbukkit.inventory.components.CraftEquippableComponent;
 import org.bukkit.craftbukkit.inventory.components.CraftFoodComponent;
 import org.bukkit.craftbukkit.inventory.components.CraftJukeboxComponent;
 import org.bukkit.craftbukkit.inventory.components.CraftToolComponent;
+import org.bukkit.craftbukkit.inventory.components.CraftUseCooldownComponent;
 import org.bukkit.craftbukkit.util.CraftLegacy;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
@@ -42,11 +44,12 @@
     static {
         instance = new CraftItemFactory();
         ConfigurationSerialization.registerClass(SerializableMeta.class);
+        ConfigurationSerialization.registerClass(CraftEquippableComponent.class);
         ConfigurationSerialization.registerClass(CraftFoodComponent.class);
-        ConfigurationSerialization.registerClass(CraftFoodComponent.CraftFoodEffect.class);
         ConfigurationSerialization.registerClass(CraftToolComponent.class);
         ConfigurationSerialization.registerClass(CraftToolComponent.CraftToolRule.class);
         ConfigurationSerialization.registerClass(CraftJukeboxComponent.class);
+        ConfigurationSerialization.registerClass(CraftUseCooldownComponent.class);
     }
 
     private CraftItemFactory() {
@@ -147,7 +150,7 @@
     @Override
     public ItemStack createItemStack(String input) throws IllegalArgumentException {
         try {
-            ItemParser.ItemResult arg = new ItemParser(BukkitMethodHooks.getDefaultRegistryAccess()).parse(new StringReader(input));
+            ItemParser.ItemResult arg = new ItemParser(MinecraftServer.getDefaultRegistryAccess()).parse(new StringReader(input));
 
             Item item = arg.item().value();
             net.minecraft.world.item.ItemStack nmsItemStack = new net.minecraft.world.item.ItemStack(item);
@@ -203,7 +206,7 @@
         itemStack = CraftItemStack.asCraftCopy(itemStack);
         CraftItemStack craft = (CraftItemStack) itemStack;
         RegistryAccess registry = CraftRegistry.getMinecraftRegistry();
-        Optional<HolderSet.Named<Enchantment>> optional = (allowTreasures) ? Optional.empty() : registry.registryOrThrow(Registries.ENCHANTMENT).getTag(EnchantmentTags.IN_ENCHANTING_TABLE);
+        Optional<HolderSet.Named<Enchantment>> optional = (allowTreasures) ? Optional.empty() : registry.lookupOrThrow(Registries.ENCHANTMENT).get(EnchantmentTags.IN_ENCHANTING_TABLE);
         return CraftItemStack.asCraftMirror(EnchantmentHelper.enchantItem(source, craft.handle, level, registry, optional));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java	(date 1729674280147)
@@ -8,26 +8,6 @@
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
-
-import com.mohistmc.banner.bukkit.entity.BannerModAbstractVillager;
-import com.mohistmc.banner.bukkit.entity.BannerModGolem;
-import com.mohistmc.banner.bukkit.entity.BannerModLivingEntity;
-import com.mohistmc.banner.bukkit.entity.BannerModMinecart;
-import com.mohistmc.banner.bukkit.entity.BannerModMinecartContainer;
-import com.mohistmc.banner.bukkit.entity.BannerModMob;
-import com.mohistmc.banner.bukkit.entity.BannerModVehicle;
-import com.mohistmc.banner.bukkit.entity.BannerModMonster;
-import com.mohistmc.banner.bukkit.entity.BannerModProjectile;
-import com.mohistmc.banner.bukkit.entity.BannerModRaider;
-import com.mohistmc.banner.bukkit.entity.BannerModSkeleton;
-import com.mohistmc.banner.bukkit.entity.BannerModChestedHorse;
-import com.mohistmc.banner.bukkit.entity.BannerModAnimals;
-import com.mohistmc.banner.bukkit.entity.BannerModEntity;
-import com.mohistmc.banner.bukkit.entity.BannerModHorse;
-import com.mohistmc.banner.bukkit.entity.BannerModTameableAnimal;
-import com.mohistmc.banner.bukkit.entity.BannerModThrowableProjectile;
-import com.mohistmc.banner.bukkit.entity.BannerModVillager;
-import com.mohistmc.banner.bukkit.entity.BannerModWindCharge;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -36,28 +16,13 @@
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.TamableAnimal;
-import net.minecraft.world.entity.animal.AbstractGolem;
-import net.minecraft.world.entity.animal.Animal;
-import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
-import net.minecraft.world.entity.animal.horse.AbstractHorse;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
-import net.minecraft.world.entity.monster.AbstractSkeleton;
-import net.minecraft.world.entity.monster.Monster;
-import net.minecraft.world.entity.npc.AbstractVillager;
-import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.projectile.AbstractArrow;
-import net.minecraft.world.entity.projectile.Projectile;
-import net.minecraft.world.entity.projectile.ThrowableItemProjectile;
-import net.minecraft.world.entity.projectile.windcharge.AbstractWindCharge;
-import net.minecraft.world.entity.raid.Raider;
-import net.minecraft.world.entity.vehicle.AbstractMinecart;
-import net.minecraft.world.entity.vehicle.AbstractMinecartContainer;
-import net.minecraft.world.entity.vehicle.VehicleEntity;
+import net.minecraft.world.level.portal.TeleportTransition;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
 import org.bukkit.Server;
@@ -81,6 +46,7 @@
 import org.bukkit.entity.Pose;
 import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.permissions.PermissibleBase;
@@ -134,33 +100,6 @@
             return (CraftEntity) entityTypeData.convertFunction().apply(server, entity);
         }
 
-        CraftEntity modsEntity = null;
-        switch (entity) {
-            case AbstractSkeleton abstractSkeleton -> modsEntity = new BannerModSkeleton(server, abstractSkeleton);
-            case AbstractChestedHorse chestedHorse -> modsEntity = new BannerModChestedHorse(server, chestedHorse);
-            case AbstractHorse abstractHorse -> modsEntity = new BannerModHorse(server, abstractHorse);
-            case AbstractGolem abstractGolem -> modsEntity = new BannerModGolem(server, abstractGolem);
-            case AbstractMinecartContainer abstractMinecartContainer -> modsEntity = new BannerModMinecartContainer(server, abstractMinecartContainer);
-            case AbstractMinecart abstractMinecart -> modsEntity = new BannerModMinecart(server, abstractMinecart);
-            case AbstractWindCharge abstractWindCharge -> modsEntity = new BannerModWindCharge(server, abstractWindCharge);
-            case ThrowableItemProjectile throwableItemProjectile -> modsEntity = new BannerModThrowableProjectile(server, throwableItemProjectile);
-            case Projectile projectile -> modsEntity = new BannerModProjectile(server, projectile);
-            case Raider raider -> modsEntity = new BannerModRaider(server, raider);
-            case Monster monster -> modsEntity = new BannerModMonster(server, monster);
-            case TamableAnimal tamableAnimal -> modsEntity = new BannerModTameableAnimal(server, tamableAnimal);
-            case Animal animal -> modsEntity = new BannerModAnimals(server, animal);
-            case Villager villager -> modsEntity = new BannerModVillager(server, villager);
-            case AbstractVillager abstractVillager -> modsEntity = new BannerModAbstractVillager(server, abstractVillager);
-            case Mob mob -> modsEntity = new BannerModMob(server, mob);
-            case VehicleEntity vehicle -> modsEntity = new BannerModVehicle(server, vehicle);
-            case LivingEntity livingEntity -> modsEntity = new BannerModLivingEntity(server, livingEntity);
-            case Entity entity1 -> modsEntity = new BannerModEntity(server, entity1);
-        }
-
-        if (modsEntity != null) {
-            return modsEntity;
-        }
-
         throw new AssertionError("Unknown entity " + (entity == null ? null : entity.getClass()));
     }
 
@@ -215,7 +154,7 @@
     @Override
     public boolean isOnGround() {
         if (this.entity instanceof AbstractArrow) {
-            return ((AbstractArrow) this.entity).inGround;
+            return ((AbstractArrow) this.entity).isInGround();
         }
         return this.entity.onGround();
     }
@@ -265,8 +204,8 @@
         // Let the server handle cross world teleports
         if (location.getWorld() != null && !location.getWorld().equals(this.getWorld())) {
             // Prevent teleportation to an other world during world generation
-            Preconditions.checkState(!this.entity.bridge$generation(), "Cannot teleport entity to an other world during world generation");
-            entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location));
+            Preconditions.checkState(!this.entity.generation, "Cannot teleport entity to an other world during world generation");
+            this.entity.teleport(new TeleportTransition(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location), Vec3.ZERO, location.getPitch(), location.getYaw(), Set.of(), TeleportTransition.DO_NOTHING, TeleportCause.PLUGIN));
             return true;
         }
 
@@ -290,7 +229,7 @@
 
     @Override
     public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
-        Preconditions.checkState(!this.entity.bridge$generation(), "Cannot get nearby entities during world generation");
+        Preconditions.checkState(!this.entity.generation, "Cannot get nearby entities during world generation");
         org.spigotmc.AsyncCatcher.catchOp("getNearbyEntities"); // Spigot
 
         List<Entity> notchEntityList = this.entity.level().getEntities(this.entity, this.entity.getBoundingBox().inflate(x, y, z), Predicates.alwaysTrue());
@@ -356,7 +295,8 @@
 
     @Override
     public void remove() {
-        entity.discard();
+        this.entity.pluginRemoved = true;
+        this.entity.discard(this.getHandle().generation ? null : EntityRemoveEvent.Cause.PLUGIN);
     }
 
     @Override
@@ -366,7 +306,7 @@
 
     @Override
     public boolean isValid() {
-        return this.entity.isAlive() && this.entity.bridge$valid() && this.entity.isChunkLoaded() && this.isInWorld();
+        return this.entity.isAlive() && this.entity.valid && this.entity.isChunkLoaded() && this.isInWorld();
     }
 
     @Override
@@ -376,12 +316,12 @@
 
     @Override
     public boolean isPersistent() {
-        return this.entity.bridge$persist();
+        return this.entity.persist;
     }
 
     @Override
     public void setPersistent(boolean persistent) {
-        this.entity.banner$setPersist(persistent);
+        this.entity.persist = persistent;
     }
 
     public Vector getMomentum() {
@@ -492,7 +432,7 @@
     @Override
     public void playEffect(EntityEffect type) {
         Preconditions.checkArgument(type != null, "Type cannot be null");
-        Preconditions.checkState(!this.entity.bridge$generation(), "Cannot play effect during world generation");
+        Preconditions.checkState(!this.entity.generation, "Cannot play effect during world generation");
 
         if (type.getApplicable().isInstance(this)) {
             this.getHandle().level().broadcastEntityEvent(this.getHandle(), type.getData());
@@ -619,7 +559,7 @@
 
     @Override
     public void setVisibleByDefault(boolean visible) {
-        if (this.getHandle().bridge$visibleByDefault() != visible) {
+        if (this.getHandle().visibleByDefault != visible) {
             if (visible) {
                 // Making visible by default, reset and show to all players
                 for (Player player : this.server.getOnlinePlayers()) {
@@ -632,18 +572,18 @@
                 }
             }
 
-            this.getHandle().banner$setVisibleByDefault(visible);
+            this.getHandle().visibleByDefault = visible;
         }
     }
 
     @Override
     public boolean isVisibleByDefault() {
-        return this.getHandle().bridge$visibleByDefault();
+        return this.getHandle().visibleByDefault;
     }
 
     @Override
     public Set<Player> getTrackedBy() {
-        Preconditions.checkState(!this.entity.bridge$generation(), "Cannot get tracking players during world generation");
+        Preconditions.checkState(!this.entity.generation, "Cannot get tracking players during world generation");
         ImmutableSet.Builder<Player> players = ImmutableSet.builder();
 
         ServerLevel world = ((CraftWorld) this.getWorld()).getHandle();
@@ -765,7 +705,7 @@
 
     @Override
     public boolean isInvulnerable() {
-        return this.getHandle().isInvulnerableTo(this.getHandle().damageSources().generic());
+        return this.getHandle().isInvulnerableToBase(this.getHandle().damageSources().generic());
     }
 
     @Override
@@ -841,13 +781,13 @@
 
     @Override
     public boolean isInWorld() {
-        return this.getHandle().bridge$inWorld();
+        return this.getHandle().inWorld;
     }
 
     @Override
     public String getAsString() {
         CompoundTag tag = new CompoundTag();
-        if (!this.getHandle().saveAsPassenger(tag)) {
+        if (!this.getHandle().saveAsPassenger(tag, false)) {
             return null;
         }
 
@@ -880,9 +820,9 @@
 
     private Entity copy(net.minecraft.world.level.Level level) {
         CompoundTag compoundTag = new CompoundTag();
-        this.getHandle().saveAsPassenger(compoundTag);
+        this.getHandle().saveAsPassenger(compoundTag, false);
 
-        return net.minecraft.world.entity.EntityType.loadEntityRecursive(compoundTag, level, java.util.function.Function.identity());
+        return net.minecraft.world.entity.EntityType.loadEntityRecursive(compoundTag, level, EntitySpawnReason.LOAD, java.util.function.Function.identity());
     }
 
     public void storeBukkitValues(CompoundTag c) {
@@ -924,20 +864,19 @@
     }
 
     public void update(ServerPlayer player) {
-        if (!getHandle().isAlive()) {
+        if (!this.getHandle().isAlive()) {
             return;
         }
 
-        ServerLevel world = ((CraftWorld) getWorld()).getHandle();
-        ChunkMap.TrackedEntity entityTracker = world.getChunkSource().chunkMap.entityMap.get(getEntityId());
+        ServerLevel world = ((CraftWorld) this.getWorld()).getHandle();
+        ChunkMap.TrackedEntity entityTracker = world.getChunkSource().chunkMap.entityMap.get(this.getEntityId());
 
         if (entityTracker == null) {
             return;
         }
 
-        player.connection.send(getHandle().getAddEntityPacket(entityTracker.serverEntity));
+        player.connection.send(this.getHandle().getAddEntityPacket(entityTracker.serverEntity));
     }
-
 
     private static PermissibleBase getPermissibleBase() {
         if (CraftEntity.perm == null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java	(date 1729674280261)
@@ -33,11 +33,13 @@
     static final ItemMetaKeyType<PotionContents> POTION_CONTENTS = new ItemMetaKeyType<>(DataComponents.POTION_CONTENTS);
     static final ItemMetaKey POTION_EFFECTS = new ItemMetaKey("custom-effects");
     static final ItemMetaKey POTION_COLOR = new ItemMetaKey("custom-color");
+    static final ItemMetaKey CUSTOM_NAME = new ItemMetaKey("custom-name");
     static final ItemMetaKey DEFAULT_POTION = new ItemMetaKey("potion-type");
 
     private PotionType type;
     private List<PotionEffect> customEffects;
     private Color color;
+    private String customName;
 
     CraftMetaPotion(CraftMetaItem meta) {
         super(meta);
@@ -46,6 +48,7 @@
         }
         this.type = potionMeta.type;
         this.color = potionMeta.color;
+        this.customName = potionMeta.customName;
         if (potionMeta.hasCustomEffects()) {
             this.customEffects = new ArrayList<>(potionMeta.customEffects);
         }
@@ -66,6 +69,10 @@
                 }
             });
 
+            potionContents.customName().ifPresent((name) -> {
+                this.customName = name;
+            });
+
             List<MobEffectInstance> list = potionContents.customEffects();
             int length = list.size();
             this.customEffects = new ArrayList<>(length);
@@ -100,6 +107,11 @@
             this.setColor(color);
         }
 
+        String name = SerializableMeta.getString(map, CraftMetaPotion.CUSTOM_NAME.BUKKIT, true);
+        if (name != null) {
+            this.setCustomName(name);
+        }
+
         Iterable<?> rawEffectList = SerializableMeta.getObject(Iterable.class, map, CraftMetaPotion.POTION_EFFECTS.BUKKIT, true);
         if (rawEffectList == null) {
             return;
@@ -115,8 +127,13 @@
     void applyToItem(CraftMetaItem.Applicator tag) {
         super.applyToItem(tag);
 
+        if (this.isPotionEmpty()) {
+            return;
+        }
+
         Optional<Holder<Potion>> defaultPotion = (this.hasBasePotionType()) ? Optional.of(CraftPotionType.bukkitToMinecraftHolder(this.type)) : Optional.empty();
         Optional<Integer> potionColor = (this.hasColor()) ? Optional.of(this.color.asRGB()) : Optional.empty();
+        Optional<String> customName = Optional.ofNullable(this.customName);
 
         List<MobEffectInstance> effectList = new ArrayList<>();
         if (this.customEffects != null) {
@@ -125,7 +142,7 @@
             }
         }
 
-        tag.put(CraftMetaPotion.POTION_CONTENTS, new PotionContents(defaultPotion, potionColor, effectList));
+        tag.put(CraftMetaPotion.POTION_CONTENTS, new PotionContents(defaultPotion, potionColor, effectList, customName));
     }
 
     @Override
@@ -134,7 +151,7 @@
     }
 
     boolean isPotionEmpty() {
-        return (this.type == null) && !(this.hasCustomEffects() || this.hasColor());
+        return (this.type == null) && !(this.hasCustomEffects() || this.hasColor() || this.hasCustomName());
     }
 
     @Override
@@ -174,7 +191,7 @@
 
     @Override
     public boolean hasCustomEffects() {
-        return this.customEffects != null;
+        return this.customEffects != null && !this.customEffects.isEmpty();
     }
 
     @Override
@@ -288,6 +305,21 @@
         this.color = color;
     }
 
+    @Override
+    public boolean hasCustomName() {
+        return this.customName != null;
+    }
+
+    @Override
+    public String getCustomName() {
+        return this.customName;
+    }
+
+    @Override
+    public void setCustomName(String customName) {
+        this.customName = customName;
+    }
+
     @Override
     int applyHash() {
         final int original;
@@ -298,6 +330,9 @@
         if (this.hasColor()) {
             hash = 73 * hash + this.color.hashCode();
         }
+        if (this.hasCustomName()) {
+            hash = 73 * hash + this.customName.hashCode();
+        }
         if (this.hasCustomEffects()) {
             hash = 73 * hash + this.customEffects.hashCode();
         }
@@ -314,7 +349,8 @@
 
             return Objects.equals(this.type, that.type)
                     && (this.hasCustomEffects() ? that.hasCustomEffects() && this.customEffects.equals(that.customEffects) : !that.hasCustomEffects())
-                    && (this.hasColor() ? that.hasColor() && this.color.equals(that.color) : !that.hasColor());
+                    && (this.hasColor() ? that.hasColor() && this.color.equals(that.color) : !that.hasColor())
+                    && (this.hasCustomName() ? that.hasCustomName() && this.customName.equals(that.customName) : !that.hasCustomName());
         }
         return true;
     }
@@ -335,6 +371,10 @@
             builder.put(CraftMetaPotion.POTION_COLOR.BUKKIT, this.getColor());
         }
 
+        if (this.hasCustomName()) {
+            builder.put(CraftMetaPotion.CUSTOM_NAME.BUKKIT, this.getCustomName());
+        }
+
         if (this.hasCustomEffects()) {
             builder.put(CraftMetaPotion.POTION_EFFECTS.BUKKIT, ImmutableList.copyOf(this.customEffects));
         }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java	(date 1729674280261)
@@ -36,15 +36,14 @@
     static final ItemMetaKeyType<ResourceLocation> NOTE_BLOCK_SOUND = new ItemMetaKeyType<>(DataComponents.NOTE_BLOCK_SOUND, "note_block_sound");
     static final int MAX_OWNER_LENGTH = 16;
 
-    private GameProfile profile;
+    private ResolvableProfile profile;
     private ResourceLocation noteBlockSound;
 
     CraftMetaSkull(CraftMetaItem meta) {
         super(meta);
-        if (!(meta instanceof CraftMetaSkull)) {
+        if (!(meta instanceof CraftMetaSkull skullMeta)) {
             return;
         }
-        CraftMetaSkull skullMeta = (CraftMetaSkull) meta;
         this.setProfile(skullMeta.profile);
         this.noteBlockSound = skullMeta.noteBlockSound;
     }
@@ -52,21 +51,17 @@
     CraftMetaSkull(DataComponentPatch tag) {
         super(tag);
 
-        getOrEmpty(tag, CraftMetaSkull.SKULL_PROFILE).ifPresent((resolvableProfile) -> {
-            this.setProfile(resolvableProfile.gameProfile());
-        });
+        getOrEmpty(tag, CraftMetaSkull.SKULL_PROFILE).ifPresent(this::setProfile);
 
-        getOrEmpty(tag, CraftMetaSkull.NOTE_BLOCK_SOUND).ifPresent((minecraftKey) -> {
-            this.noteBlockSound = minecraftKey;
-        });
+        getOrEmpty(tag, CraftMetaSkull.NOTE_BLOCK_SOUND).ifPresent((minecraftKey) -> this.noteBlockSound = minecraftKey);
     }
 
     CraftMetaSkull(Map<String, Object> map) {
         super(map);
         if (this.profile == null) {
             Object object = map.get(CraftMetaSkull.SKULL_OWNER.BUKKIT);
-            if (object instanceof PlayerProfile) {
-                this.setOwnerProfile((PlayerProfile) object);
+            if (object instanceof PlayerProfile playerProfile) {
+                this.setOwnerProfile(playerProfile);
             } else {
                 this.setOwner(SerializableMeta.getString(map, CraftMetaSkull.SKULL_OWNER.BUKKIT, true));
             }
@@ -92,7 +87,7 @@
                 skullTag.putUUID("Id", uuid);
             }
 
-            this.setProfile(ResolvableProfile.CODEC.parse(NbtOps.INSTANCE, skullTag).result().get().gameProfile());
+            ResolvableProfile.CODEC.parse(NbtOps.INSTANCE, skullTag).result().ifPresent(this::setProfile);
         }
 
         if (tag.contains(CraftMetaSkull.BLOCK_ENTITY_TAG.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
@@ -103,7 +98,7 @@
         }
     }
 
-    private void setProfile(GameProfile profile) {
+    private void setProfile(ResolvableProfile profile) {
         this.profile = profile;
     }
 
@@ -111,15 +106,15 @@
     void applyToItem(CraftMetaItem.Applicator tag) {
         super.applyToItem(tag);
 
-        if (this.profile != null) {
+        if (this.hasOwner()) {
             // SPIGOT-6558: Set initial textures
-            tag.put(CraftMetaSkull.SKULL_PROFILE, new ResolvableProfile(this.profile));
+            tag.put(CraftMetaSkull.SKULL_PROFILE, this.profile);
             // Fill in textures
             PlayerProfile ownerProfile = new CraftPlayerProfile(this.profile); // getOwnerProfile may return null
             if (ownerProfile.getTextures().isEmpty()) {
                 ownerProfile.update().thenAccept((filledProfile) -> {
                     this.setOwnerProfile(filledProfile);
-                    tag.put(CraftMetaSkull.SKULL_PROFILE, new ResolvableProfile(this.profile));
+                    tag.put(CraftMetaSkull.SKULL_PROFILE, this.profile);
                 });
             }
         }
@@ -145,23 +140,23 @@
 
     @Override
     public boolean hasOwner() {
-        return this.profile != null && !this.profile.getName().isEmpty();
+        return this.profile != null;
     }
 
     @Override
     public String getOwner() {
-        return this.hasOwner() ? this.profile.getName() : null;
+        return this.hasOwner() ? this.profile.name().orElse(null) : null;
     }
 
     @Override
     public OfflinePlayer getOwningPlayer() {
         if (this.hasOwner()) {
-            if (!this.profile.getId().equals(Util.NIL_UUID)) {
-                return Bukkit.getOfflinePlayer(this.profile.getId());
+            if (this.profile.id().filter(u -> !u.equals(Util.NIL_UUID)).isPresent()) {
+                return Bukkit.getOfflinePlayer(this.profile.id().get());
             }
 
-            if (!this.profile.getName().isEmpty()) {
-                return Bukkit.getOfflinePlayer(this.profile.getName());
+            if (this.profile.name().filter(s -> !s.isEmpty()).isPresent()) {
+                return Bukkit.getOfflinePlayer(this.profile.name().get());
             }
         }
 
@@ -177,7 +172,7 @@
         if (name == null) {
             this.setProfile(null);
         } else {
-            this.setProfile(new GameProfile(Util.NIL_UUID, name));
+            this.setProfile(new ResolvableProfile(new GameProfile(Util.NIL_UUID, name)));
         }
 
         return true;
@@ -187,10 +182,10 @@
     public boolean setOwningPlayer(OfflinePlayer owner) {
         if (owner == null) {
             this.setProfile(null);
-        } else if (owner instanceof CraftPlayer) {
-            this.setProfile(((CraftPlayer) owner).getProfile());
+        } else if (owner instanceof CraftPlayer craftPlayer) {
+            this.setProfile(new ResolvableProfile(craftPlayer.getProfile()));
         } else {
-            this.setProfile(new GameProfile(owner.getUniqueId(), owner.getName()));
+            this.setProfile(new ResolvableProfile(new GameProfile(owner.getUniqueId(), (owner.getName() == null) ? "" : owner.getName())));
         }
 
         return true;
@@ -207,10 +202,10 @@
 
     @Override
     public void setOwnerProfile(PlayerProfile profile) {
-        if (profile == null) {
-            this.setProfile(null);
+        if (profile instanceof CraftPlayerProfile craftPlayerProfile) {
+            this.setProfile(CraftPlayerProfile.validateSkullProfile(craftPlayerProfile.buildResolvableProfile()));
         } else {
-            this.setProfile(CraftPlayerProfile.validateSkullProfile(((CraftPlayerProfile) profile).buildGameProfile()));
+            this.setProfile(null);
         }
     }
 
@@ -246,11 +241,8 @@
         if (!super.equalsCommon(meta)) {
             return false;
         }
-        if (meta instanceof CraftMetaSkull) {
-            CraftMetaSkull that = (CraftMetaSkull) meta;
-
-            // SPIGOT-5403: equals does not check properties
-            return (this.profile != null ? that.profile != null && this.profile.equals(that.profile) && this.profile.getProperties().equals(that.profile.getProperties()) : that.profile == null) && Objects.equals(this.noteBlockSound, that.noteBlockSound);
+        if (meta instanceof CraftMetaSkull that) {
+            return Objects.equals(this.profile, that.profile) && Objects.equals(this.noteBlockSound, that.noteBlockSound);
         }
         return true;
     }
@@ -264,7 +256,7 @@
     Builder<String, Object> serialize(Builder<String, Object> builder) {
         super.serialize(builder);
 
-        if (this.profile != null) {
+        if (this.hasOwner()) {
             builder.put(CraftMetaSkull.SKULL_OWNER.BUKKIT, new CraftPlayerProfile(this.profile));
         }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java	(date 1729674280232)
@@ -18,7 +18,6 @@
 import net.minecraft.world.inventory.HopperMenu;
 import net.minecraft.world.inventory.LecternMenu;
 import net.minecraft.world.inventory.LoomMenu;
-import net.minecraft.world.inventory.MenuType;
 import net.minecraft.world.inventory.MerchantMenu;
 import net.minecraft.world.inventory.ShulkerBoxMenu;
 import net.minecraft.world.inventory.SimpleContainerData;
@@ -29,6 +28,7 @@
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
+import org.bukkit.inventory.MenuType;
 
 public class CraftContainer extends AbstractContainerMenu {
 
@@ -96,75 +96,37 @@
         return this.view;
     }
 
-    public static MenuType getNotchInventoryType(Inventory inventory) {
-        switch (inventory.getType()) {
+    public static net.minecraft.world.inventory.MenuType getNotchInventoryType(Inventory inventory) {
+        final InventoryType type = inventory.getType();
+        switch (type) {
             case PLAYER:
             case CHEST:
             case ENDER_CHEST:
             case BARREL:
                 switch (inventory.getSize()) {
                     case 9:
-                        return MenuType.GENERIC_9x1;
+                        return net.minecraft.world.inventory.MenuType.GENERIC_9x1;
                     case 18:
-                        return MenuType.GENERIC_9x2;
+                        return net.minecraft.world.inventory.MenuType.GENERIC_9x2;
                     case 27:
-                        return MenuType.GENERIC_9x3;
+                        return net.minecraft.world.inventory.MenuType.GENERIC_9x3;
                     case 36:
                     case 41: // PLAYER
-                        return MenuType.GENERIC_9x4;
+                        return net.minecraft.world.inventory.MenuType.GENERIC_9x4;
                     case 45:
-                        return MenuType.GENERIC_9x5;
+                        return net.minecraft.world.inventory.MenuType.GENERIC_9x5;
                     case 54:
-                        return MenuType.GENERIC_9x6;
+                        return net.minecraft.world.inventory.MenuType.GENERIC_9x6;
                     default:
                         throw new IllegalArgumentException("Unsupported custom inventory size " + inventory.getSize());
                 }
-            case WORKBENCH:
-                return MenuType.CRAFTING;
-            case FURNACE:
-                return MenuType.FURNACE;
-            case DISPENSER:
-                return MenuType.GENERIC_3x3;
-            case ENCHANTING:
-                return MenuType.ENCHANTMENT;
-            case BREWING:
-                return MenuType.BREWING_STAND;
-            case BEACON:
-                return MenuType.BEACON;
-            case ANVIL:
-                return MenuType.ANVIL;
-            case HOPPER:
-                return MenuType.HOPPER;
-            case DROPPER:
-                return MenuType.GENERIC_3x3;
-            case SHULKER_BOX:
-                return MenuType.SHULKER_BOX;
-            case BLAST_FURNACE:
-                return MenuType.BLAST_FURNACE;
-            case LECTERN:
-                return MenuType.LECTERN;
-            case SMOKER:
-                return MenuType.SMOKER;
-            case LOOM:
-                return MenuType.LOOM;
-            case CARTOGRAPHY:
-                return MenuType.CARTOGRAPHY_TABLE;
-            case GRINDSTONE:
-                return MenuType.GRINDSTONE;
-            case STONECUTTER:
-                return MenuType.STONECUTTER;
-            case SMITHING:
-            case SMITHING_NEW:
-                return MenuType.SMITHING;
-            case CREATIVE:
-            case CRAFTING:
-            case MERCHANT:
-                throw new IllegalArgumentException("Can't open a " + inventory.getType() + " inventory!");
-            case CRAFTER:
-                return MenuType.CRAFTER_3x3;
             default:
-                // TODO: If it reaches the default case, should we throw an error?
-                return MenuType.GENERIC_9x3;
+                final MenuType menu = type.getMenuType();
+                if (menu == null) {
+                    return net.minecraft.world.inventory.MenuType.GENERIC_9x3;
+                } else {
+                    return ((CraftMenuType<?>) menu).getHandle();
+                }
         }
     }
 
@@ -177,7 +139,7 @@
             case CHEST:
             case ENDER_CHEST:
             case BARREL:
-                this.delegate = new ChestMenu(MenuType.GENERIC_9x3, windowId, bottom, top, top.getContainerSize() / 9);
+                this.delegate = new ChestMenu(net.minecraft.world.inventory.MenuType.GENERIC_9x3, windowId, bottom, top, top.getContainerSize() / 9);
                 break;
             case DISPENSER:
             case DROPPER:
@@ -212,7 +174,7 @@
                 this.delegate = new BlastFurnaceMenu(windowId, bottom, top, new SimpleContainerData(4));
                 break;
             case LECTERN:
-                this.delegate = new LecternMenu(windowId/*, top, new SimpleContainerData(1), bottom*/);
+                this.delegate = new LecternMenu(windowId, top, new SimpleContainerData(1), bottom);
                 break;
             case SMOKER:
                 this.delegate = new SmokerMenu(windowId, bottom, top, new SimpleContainerData(4));
@@ -357,7 +319,7 @@
     }
 
     @Override
-    public MenuType<?> getType() {
+    public net.minecraft.world.inventory.MenuType<?> getType() {
         return CraftContainer.getNotchInventoryType(this.view.getTopInventory());
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java	(date 1729674280142)
@@ -3,7 +3,7 @@
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Dolphin;
 
-public class CraftDolphin extends CraftWaterMob implements Dolphin {
+public class CraftDolphin extends CraftAgeable implements Dolphin {
 
     public CraftDolphin(CraftServer server, net.minecraft.world.entity.animal.Dolphin entity) {
         super(server, entity);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java	(date 1729674280230)
@@ -1,9 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.BlastingRecipe;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
@@ -27,6 +26,6 @@
     public void addToCraftingManager() {
         ItemStack result = this.getResult();
 
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.BlastingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.BlastingRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), this.toNMS(this.getInputChoice(), true), CraftItemStack.asNMSCopy(result), this.getExperience(), this.getCookingTime())));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingTrimRecipe.java	(date 1729674280267)
@@ -1,9 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.SmithingTrimRecipe;
 
@@ -23,6 +22,6 @@
 
     @Override
     public void addToCraftingManager() {
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTrimRecipe(this.toNMS(this.getTemplate(), true), this.toNMS(this.getBase(), true), this.toNMS(this.getAddition(), true))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.SmithingTrimRecipe(this.toNMSOptional(this.getTemplate(), false), this.toNMSOptional(this.getBase(), false), this.toNMSOptional(this.getAddition(), false))));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java	(date 1729674280257)
@@ -218,7 +218,8 @@
         return !(this.hasEffects() || this.hasPower());
     }
 
-    boolean hasPower() {
+    @Override
+    public boolean hasPower() {
         return this.power != null;
     }
 
@@ -340,7 +341,7 @@
 
     @Override
     public int getPower() {
-        return this.hasPower() ? this.power : 1;
+        return this.hasPower() ? this.power : 0;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java	(date 1729674280254)
@@ -4,8 +4,6 @@
 import com.google.common.collect.ImmutableMap.Builder;
 import java.util.Map;
 import java.util.Optional;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.component.DataComponentPatch;
@@ -13,6 +11,7 @@
 import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.item.component.LodestoneTracker;
 import org.bukkit.Location;
@@ -122,7 +121,7 @@
         if (this.lodestoneWorld == null) {
             return null;
         }
-        ServerLevel worldServer = BukkitMethodHooks.getServer().getLevel(this.lodestoneWorld);
+        ServerLevel worldServer = MinecraftServer.getServer().getLevel(this.lodestoneWorld);
         World world = worldServer != null ? worldServer.getWorld() : null;
         return new Location(world, this.lodestoneX, this.lodestoneY, this.lodestoneZ); // world may be null here, if the referenced world is not loaded
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java	(date 1729674280170)
@@ -30,7 +30,7 @@
         Holder<PaintingVariant> oldArt = painting.getVariant();
         painting.setVariant(CraftArt.bukkitToMinecraftHolder(art));
         painting.setDirection(painting.getDirection());
-        if (!force && !this.getHandle().bridge$generation() && !painting.survives()) {
+        if (!force && !this.getHandle().generation && !painting.survives()) {
             // Revert painting since it doesn't fit
             painting.setVariant(oldArt);
             painting.setDirection(painting.getDirection());
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java	(date 1729674280185)
@@ -14,7 +14,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -24,7 +24,7 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
@@ -34,7 +34,7 @@
 
     @Override
     public void setTarget(org.bukkit.entity.Entity target) {
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot set target during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot set target during world generation");
 
         this.getHandle().setTarget(target == null ? null : ((CraftEntity) target).getHandle());
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java	(date 1729674280135)
@@ -1,24 +1,24 @@
 package org.bukkit.craftbukkit.entity;
 
-import net.minecraft.world.entity.vehicle.ChestBoat;
+import net.minecraft.world.entity.vehicle.AbstractChestBoat;
 import org.bukkit.craftbukkit.CraftLootTable;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.loot.LootTable;
 
-public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.ChestBoat {
+public abstract class CraftChestBoat extends CraftBoat implements org.bukkit.entity.ChestBoat {
 
     private final Inventory inventory;
 
-    public CraftChestBoat(CraftServer server, ChestBoat entity) {
+    public CraftChestBoat(CraftServer server, AbstractChestBoat entity) {
         super(server, entity);
         this.inventory = new CraftInventory(entity);
     }
 
     @Override
-    public ChestBoat getHandle() {
-        return (ChestBoat) this.entity;
+    public AbstractChestBoat getHandle() {
+        return (AbstractChestBoat) this.entity;
     }
 
     @Override
@@ -38,7 +38,7 @@
 
     @Override
     public LootTable getLootTable() {
-        return CraftLootTable.minecraftToBukkit(this.getHandle().getLootTable());
+        return CraftLootTable.minecraftToBukkit(this.getHandle().getContainerLootTable());
     }
 
     @Override
@@ -48,11 +48,11 @@
 
     @Override
     public long getSeed() {
-        return this.getHandle().getLootTableSeed();
+        return this.getHandle().getContainerLootTableSeed();
     }
 
     private void setLootTable(LootTable table, long seed) {
-        this.getHandle().setLootTable(CraftLootTable.bukkitToMinecraft(table));
-        this.getHandle().setLootTableSeed(seed);
+        this.getHandle().setContainerLootTable(CraftLootTable.bukkitToMinecraft(table));
+        this.getHandle().setContainerLootTableSeed(seed);
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java	(date 1729674280261)
@@ -3,13 +3,11 @@
 import com.google.common.collect.Maps;
 import java.util.Map;
 import java.util.Objects;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.ShapedRecipePattern;
 import org.bukkit.NamespacedKey;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.ShapedRecipe;
@@ -54,7 +52,7 @@
         Map<Character, Ingredient> data = Maps.transformValues(ingred, (bukkit) -> this.toNMS(bukkit, false));
 
         ShapedRecipePattern pattern = ShapedRecipePattern.of(data, shape);
-        BukkitMethodHooks.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftNamespacedKey.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapedRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), pattern, CraftItemStack.asNMSCopy(this.getResult()))));
+        MinecraftServer.getServer().getRecipeManager().addRecipe(new RecipeHolder<>(CraftRecipe.toMinecraft(this.getKey()), new net.minecraft.world.item.crafting.ShapedRecipe(this.getGroup(), CraftRecipe.getCategory(this.getCategory()), pattern, CraftItemStack.asNMSCopy(this.getResult()))));
     }
 
     private static String[] replaceUndefinedIngredientsWithEmpty(String[] shape, Map<Character, org.bukkit.inventory.RecipeChoice> ingredients) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftEnchantmentView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftEnchantmentView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftEnchantmentView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftEnchantmentView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftEnchantmentView.java	(date 1729674280284)
@@ -11,13 +11,13 @@
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.enchantments.EnchantmentOffer;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.EnchantingInventory;
 import org.bukkit.inventory.view.EnchantmentView;
 import org.jetbrains.annotations.NotNull;
 
-public class CraftEnchantmentView extends CraftInventoryView<EnchantmentMenu> implements EnchantmentView {
+public class CraftEnchantmentView extends CraftInventoryView<EnchantmentMenu, EnchantingInventory> implements EnchantmentView {
 
-    public CraftEnchantmentView(final HumanEntity player, final Inventory viewing, final EnchantmentMenu container) {
+    public CraftEnchantmentView(final HumanEntity player, final EnchantingInventory viewing, final EnchantmentMenu container) {
         super(player, viewing, container);
     }
 
@@ -29,7 +29,7 @@
     @NotNull
     @Override
     public EnchantmentOffer[] getOffers() {
-        IdMap<Holder<Enchantment>> registry = CraftRegistry.getMinecraftRegistry().registryOrThrow(Registries.ENCHANTMENT).asHolderIdMap();
+        IdMap<Holder<Enchantment>> registry = CraftRegistry.getMinecraftRegistry().lookupOrThrow(Registries.ENCHANTMENT).asHolderIdMap();
         EnchantmentOffer[] offers = new EnchantmentOffer[3];
         for (int i = 0; i < 3; i++) {
             org.bukkit.enchantments.Enchantment enchantment = (this.container.enchantClue[i] >= 0) ? CraftEnchantment.minecraftHolderToBukkit(registry.byId(this.container.enchantClue[i])) : null;
@@ -41,7 +41,7 @@
     @Override
     public void setOffers(@NotNull final EnchantmentOffer[] offers) {
         Preconditions.checkArgument(offers.length != 3, "There must be 3 offers given");
-        IdMap<Holder<Enchantment>> registry = CraftRegistry.getMinecraftRegistry().registryOrThrow(Registries.ENCHANTMENT).asHolderIdMap();
+        IdMap<Holder<Enchantment>> registry = CraftRegistry.getMinecraftRegistry().lookupOrThrow(Registries.ENCHANTMENT).asHolderIdMap();
         for (int i = 0; i < offers.length; i++) {
             final EnchantmentOffer offer = offers[i];
             if (offer == null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftStonecutterView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftStonecutterView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftStonecutterView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftStonecutterView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftStonecutterView.java	(date 1729674280287)
@@ -4,17 +4,18 @@
 import java.util.List;
 import net.minecraft.world.inventory.StonecutterMenu;
 import net.minecraft.world.item.crafting.RecipeHolder;
+import net.minecraft.world.item.crafting.SelectableRecipe;
 import net.minecraft.world.item.crafting.StonecutterRecipe;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.StonecutterInventory;
 import org.bukkit.inventory.StonecuttingRecipe;
 import org.bukkit.inventory.view.StonecutterView;
 import org.jetbrains.annotations.NotNull;
 
-public class CraftStonecutterView extends CraftInventoryView<StonecutterMenu> implements StonecutterView {
+public class CraftStonecutterView extends CraftInventoryView<StonecutterMenu, StonecutterInventory> implements StonecutterView {
 
-    public CraftStonecutterView(final HumanEntity player, final Inventory viewing, final StonecutterMenu container) {
+    public CraftStonecutterView(final HumanEntity player, final StonecutterInventory viewing, final StonecutterMenu container) {
         super(player, viewing, container);
     }
 
@@ -27,14 +28,14 @@
     @Override
     public List<StonecuttingRecipe> getRecipes() {
         final List<StonecuttingRecipe> recipes = new ArrayList<>();
-        for (final RecipeHolder<StonecutterRecipe> recipe : this.container.getRecipes()) {
-            recipes.add((StonecuttingRecipe) recipe.toBukkitRecipe());
+        for (final SelectableRecipe.SingleInputEntry<StonecutterRecipe> recipe : this.container.getVisibleRecipes().entries()) {
+            recipe.recipe().recipe().map(RecipeHolder::toBukkitRecipe).ifPresent((bukkit) -> recipes.add((StonecuttingRecipe) bukkit));
         }
         return recipes;
     }
 
     @Override
     public int getRecipeAmount() {
-        return this.container.getNumRecipes();
+        return this.container.getNumberOfVisibleRecipes();
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBrewingStandView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBrewingStandView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBrewingStandView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBrewingStandView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBrewingStandView.java	(date 1729674280282)
@@ -5,12 +5,12 @@
 import net.minecraft.world.level.block.entity.BrewingStandBlockEntity;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.BrewerInventory;
 import org.bukkit.inventory.view.BrewingStandView;
 
-public class CraftBrewingStandView extends CraftInventoryView<BrewingStandMenu> implements BrewingStandView {
+public class CraftBrewingStandView extends CraftInventoryView<BrewingStandMenu, BrewerInventory> implements BrewingStandView {
 
-    public CraftBrewingStandView(final HumanEntity player, final Inventory viewing, final BrewingStandMenu container) {
+    public CraftBrewingStandView(final HumanEntity player, final BrewerInventory viewing, final BrewingStandMenu container) {
         super(player, viewing, container);
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftWorld.java	(date 1729674280017)
@@ -4,8 +4,6 @@
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import com.mohistmc.banner.bukkit.BukkitFieldHooks;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
@@ -29,6 +27,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderSet;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
@@ -44,10 +43,13 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.Ticket;
+import net.minecraft.server.level.TicketType;
 import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.SortedArraySet;
 import net.minecraft.util.Unit;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.item.FallingBlockEntity;
@@ -55,6 +57,7 @@
 import net.minecraft.world.entity.raid.Raids;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.ClipContext;
+import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.biome.Climate;
 import net.minecraft.world.level.chunk.ChunkAccess;
@@ -281,7 +284,7 @@
     public boolean unloadChunkRequest(int x, int z) {
         org.spigotmc.AsyncCatcher.catchOp("chunk unload"); // Spigot
         if (this.isChunkLoaded(x, z)) {
-            this.world.getChunkSource().removeRegionTicket(BukkitFieldHooks.pluginTicket(), new ChunkPos(x, z), 1, Unit.INSTANCE);
+            this.world.getChunkSource().removeRegionTicket(TicketType.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
         }
 
         return true;
@@ -294,7 +297,9 @@
         }
         net.minecraft.world.level.chunk.LevelChunk chunk = this.world.getChunk(x, z);
 
-        chunk.setUnsaved(!save); // Use method call to account for persistentDataContainer
+        if (!save) {
+            chunk.tryMarkSaved(); // Use method call to account for persistentDataContainer
+        }
         this.unloadChunkRequest(x, z);
 
         this.world.getChunkSource().purgeUnload();
@@ -353,16 +358,16 @@
     public Collection<Player> getPlayersSeeingChunk(Chunk chunk) {
         Preconditions.checkArgument(chunk != null, "chunk cannot be null");
 
-        return getPlayersSeeingChunk(chunk.getX(), chunk.getZ());
+        return this.getPlayersSeeingChunk(chunk.getX(), chunk.getZ());
     }
 
     @Override
     public Collection<Player> getPlayersSeeingChunk(int x, int z) {
-        if (!isChunkLoaded(x, z)) {
+        if (!this.isChunkLoaded(x, z)) {
             return Collections.emptySet();
         }
 
-        List<ServerPlayer> players = world.getChunkSource().chunkMap.getPlayers(new ChunkPos(x, z), false);
+        List<ServerPlayer> players = this.world.getChunkSource().chunkMap.getPlayers(new ChunkPos(x, z), false);
 
         if (players.isEmpty()) {
             return Collections.emptySet();
@@ -391,7 +396,7 @@
         }
 
         if (chunk instanceof net.minecraft.world.level.chunk.LevelChunk) {
-            this.world.getChunkSource().addRegionTicket(BukkitFieldHooks.pluginTicket(), new ChunkPos(x, z), 1, Unit.INSTANCE);
+            this.world.getChunkSource().addRegionTicket(TicketType.PLUGIN, new ChunkPos(x, z), 1, Unit.INSTANCE);
             return true;
         }
 
@@ -419,7 +424,7 @@
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
 
-        if (chunkDistanceManager.addRegionTicketAtDistance(BukkitFieldHooks.pluginTicketType(), new ChunkPos(x, z), 2, plugin)) { // keep in-line with force loading, add at level 31
+        if (chunkDistanceManager.addRegionTicketAtDistance(TicketType.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin)) { // keep in-line with force loading, add at level 31
             this.getChunkAt(x, z); // ensure loaded
             return true;
         }
@@ -432,7 +437,7 @@
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
-        return chunkDistanceManager.removeRegionTicketAtDistance(BukkitFieldHooks.pluginTicketType(), new ChunkPos(x, z), 2, plugin); // keep in-line with force loading, remove at level 31
+        return chunkDistanceManager.removeRegionTicketAtDistance(TicketType.PLUGIN_TICKET, new ChunkPos(x, z), 2, plugin); // keep in-line with force loading, remove at level 31
     }
 
     @Override
@@ -440,7 +445,7 @@
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
-        chunkDistanceManager.removeAllTicketsFor(BukkitFieldHooks.pluginTicketType(), 31, plugin); // keep in-line with force loading, remove at level 31
+        chunkDistanceManager.removeAllTicketsFor(TicketType.PLUGIN_TICKET, 31, plugin); // keep in-line with force loading, remove at level 31
     }
 
     @Override
@@ -454,7 +459,7 @@
 
         ImmutableList.Builder<Plugin> ret = ImmutableList.builder();
         for (Ticket<?> ticket : tickets) {
-            if (ticket.getType() == BukkitFieldHooks.pluginTicketType()) {
+            if (ticket.getType() == TicketType.PLUGIN_TICKET) {
                 ret.add((Plugin) ticket.key);
             }
         }
@@ -473,7 +478,7 @@
 
             Chunk chunk = null;
             for (Ticket<?> ticket : tickets) {
-                if (ticket.getType() != BukkitFieldHooks.pluginTicketType()) {
+                if (ticket.getType() != TicketType.PLUGIN_TICKET) {
                     continue;
                 }
 
@@ -582,14 +587,14 @@
 
         net.minecraft.world.entity.projectile.AbstractArrow arrow;
         if (TippedArrow.class.isAssignableFrom(clazz)) {
-            arrow = EntityType.ARROW.create(this.world);
+            arrow = EntityType.ARROW.create(this.world, EntitySpawnReason.COMMAND);
             ((Arrow) arrow.getBukkitEntity()).setBasePotionType(PotionType.WATER);
         } else if (SpectralArrow.class.isAssignableFrom(clazz)) {
-            arrow = EntityType.SPECTRAL_ARROW.create(this.world);
+            arrow = EntityType.SPECTRAL_ARROW.create(this.world, EntitySpawnReason.COMMAND);
         } else if (Trident.class.isAssignableFrom(clazz)) {
-            arrow = EntityType.TRIDENT.create(this.world);
+            arrow = EntityType.TRIDENT.create(this.world, EntitySpawnReason.COMMAND);
         } else {
-            arrow = EntityType.ARROW.create(this.world);
+            arrow = EntityType.ARROW.create(this.world, EntitySpawnReason.COMMAND);
         }
 
         arrow.moveTo(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), loc.getPitch());
@@ -611,7 +616,7 @@
     private LightningStrike strikeLightning0(Location loc, boolean isVisual) {
         Preconditions.checkArgument(loc != null, "Location cannot be null");
 
-        LightningBolt lightning = EntityType.LIGHTNING_BOLT.create(this.world);
+        LightningBolt lightning = EntityType.LIGHTNING_BOLT.create(this.world, EntitySpawnReason.COMMAND);
         lightning.moveTo(loc.getX(), loc.getY(), loc.getZ());
         lightning.setVisualOnly(isVisual);
         this.world.strikeLightning(lightning, LightningStrikeEvent.Cause.CUSTOM);
@@ -625,13 +630,13 @@
 
     @Override
     public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
-        this.world.banner$setCaptureTreeGeneration(true);
-        this.world.banner$setCaptureBlockStates(true);
+        this.world.captureTreeGeneration = true;
+        this.world.captureBlockStates = true;
         boolean grownTree = this.generateTree(loc, type);
-        this.world.banner$setCaptureBlockStates(false);
-        this.world.banner$setCaptureTreeGeneration(false);
+        this.world.captureBlockStates = false;
+        this.world.captureTreeGeneration = false;
         if (grownTree) { // Copy block data to delegate
-            for (BlockState blockstate : this.world.bridge$capturedBlockStates().values()) {
+            for (BlockState blockstate : this.world.capturedBlockStates.values()) {
                 BlockPos position = ((CraftBlockState) blockstate).getPosition();
                 net.minecraft.world.level.block.state.BlockState oldBlock = this.world.getBlockState(position);
                 int flag = ((CraftBlockState) blockstate).getFlag();
@@ -639,10 +644,10 @@
                 net.minecraft.world.level.block.state.BlockState newBlock = this.world.getBlockState(position);
                 this.world.notifyAndUpdatePhysics(position, null, oldBlock, newBlock, newBlock, flag, 512);
             }
-            this.world.bridge$capturedBlockStates().clear();
+            this.world.capturedBlockStates.clear();
             return true;
         } else {
-            this.world.bridge$capturedBlockStates().clear();
+            this.world.capturedBlockStates.clear();
             return false;
         }
     }
@@ -654,7 +659,7 @@
 
     @Override
     public UUID getUID() {
-        return this.world.bridge$uuid();
+        return this.world.uuid;
     }
 
     @Override
@@ -702,7 +707,7 @@
             CraftPlayer cp = (CraftPlayer) p;
             if (cp.getHandle().connection == null) continue;
 
-            cp.getHandle().connection.send(new ClientboundSetTimePacket(cp.getHandle().level().getGameTime(), cp.getHandle().getPlayerTime(), cp.getHandle().level().getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
+            cp.getHandle().connection.send(new ClientboundSetTimePacket(cp.getHandle().level().getGameTime(), cp.getHandle().getPlayerTime(), cp.getHandle().serverLevel().getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)));
         }
     }
 
@@ -731,14 +736,14 @@
         net.minecraft.world.level.Level.ExplosionInteraction explosionType;
         if (!breakBlocks) {
             explosionType = net.minecraft.world.level.Level.ExplosionInteraction.NONE; // Don't break blocks
-        /*} else if (source == null) {
-             explosionType = net.minecraft.world.level.Level.ExplosionInteraction.STANDARD; // Break blocks, don't decay drops // Banner - TODO fix me
-        */
+        } else if (source == null) {
+            explosionType = net.minecraft.world.level.Level.ExplosionInteraction.STANDARD; // Break blocks, don't decay drops
         } else {
             explosionType = net.minecraft.world.level.Level.ExplosionInteraction.MOB; // Respect mobGriefing gamerule
         }
 
-        return !this.world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, explosionType).bridge$wasCanceled();
+        net.minecraft.world.entity.Entity entity = (source == null) ? null : ((CraftEntity) source).getHandle();
+        return !this.world.explode0(entity, Explosion.getDefaultDamageSource(this.world, entity), null, x, y, z, power, setFire, explosionType, ParticleTypes.EXPLOSION, ParticleTypes.EXPLOSION_EMITTER, SoundEvents.GENERIC_EXPLODE).wasCanceled;
     }
 
     @Override
@@ -848,7 +853,7 @@
             if (chunk != null) {
                 chunk.setBiome(x >> 2, y >> 2, z >> 2, bb);
 
-                chunk.setUnsaved(true); // SPIGOT-2890
+                chunk.markUnsaved(); // SPIGOT-2890
             }
         }
     }
@@ -861,7 +866,7 @@
     @Override
     public double getTemperature(int x, int y, int z) {
         BlockPos pos = new BlockPos(x, y, z);
-        return this.world.getNoiseBiome(x >> 2, y >> 2, z >> 2).value().getTemperature(pos);
+        return this.world.getNoiseBiome(x >> 2, y >> 2, z >> 2).value().getTemperature(pos, this.world.getSeaLevel());
     }
 
     @Override
@@ -1094,7 +1099,7 @@
 
     @Override
     public void setDifficulty(Difficulty difficulty) {
-        this.getHandle().bridge$serverLevelDataCB().setDifficulty(net.minecraft.world.Difficulty.byId(difficulty.getValue()));
+        this.getHandle().serverLevelData.setDifficulty(net.minecraft.world.Difficulty.byId(difficulty.getValue()));
     }
 
     @Override
@@ -1182,12 +1187,12 @@
 
     @Override
     public boolean getPVP() {
-        return this.world.bridge$pvpMode();
+        return this.world.pvpMode;
     }
 
     @Override
     public void setPVP(boolean pvp) {
-        this.world.banner$setPvpMode(pvp);
+        this.world.pvpMode = pvp;
     }
 
     public void playEffect(Player player, Effect effect, int data) {
@@ -1251,7 +1256,7 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isBlock(), "Material.%s must be a block", material);
 
-        FallingBlockEntity entity = BukkitMethodHooks.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), CraftBlockType.bukkitToMinecraft(material).defaultBlockState(), SpawnReason.CUSTOM);
+        FallingBlockEntity entity = FallingBlockEntity.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), CraftBlockType.bukkitToMinecraft(material).defaultBlockState(), SpawnReason.CUSTOM);
         return (FallingBlock) entity.getBukkitEntity();
     }
 
@@ -1260,7 +1265,7 @@
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(data != null, "BlockData cannot be null");
 
-        FallingBlockEntity entity = BukkitMethodHooks.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), ((CraftBlockData) data).getState(), SpawnReason.CUSTOM);
+        FallingBlockEntity entity = FallingBlockEntity.fall(this.world, BlockPos.containing(location.getX(), location.getY(), location.getZ()), ((CraftBlockData) data).getState(), SpawnReason.CUSTOM);
         return (FallingBlock) entity.getBukkitEntity();
     }
 
@@ -1271,7 +1276,7 @@
 
     @Override
     public void setSpawnFlags(boolean allowMonsters, boolean allowAnimals) {
-        this.world.setSpawnSettings(allowMonsters, allowAnimals);
+        this.world.getChunkSource().setSpawnSettings(allowMonsters, allowAnimals);
     }
 
     @Override
@@ -1286,12 +1291,12 @@
 
     @Override
     public int getMinHeight() {
-        return this.world.getMinBuildHeight();
+        return this.world.getMinY();
     }
 
     @Override
     public int getMaxHeight() {
-        return this.world.getMaxBuildHeight();
+        return this.world.getMaxY();
     }
 
     @Override
@@ -1346,7 +1351,7 @@
 
     @Override
     public boolean getKeepSpawnInMemory() {
-        return this.getGameRuleValue(GameRule.SPAWN_RADIUS) > 0;
+        return this.getGameRuleValue(GameRule.SPAWN_CHUNK_RADIUS) > 0;
     }
 
     @Override
@@ -1379,7 +1384,7 @@
 
     @Override
     public File getWorldFolder() {
-        return this.world.bridge$convertable().getLevelPath(LevelResource.ROOT).toFile().getParentFile();
+        return this.world.convertable.getLevelPath(LevelResource.ROOT).toFile().getParentFile();
     }
 
     @Override
@@ -1409,7 +1414,7 @@
 
     @Override
     public boolean canGenerateStructures() {
-        return this.world.bridge$serverLevelDataCB().worldGenOptions().generateStructures();
+        return this.world.serverLevelData.worldGenOptions().generateStructures();
     }
 
     @Override
@@ -1419,7 +1424,7 @@
 
     @Override
     public void setHardcore(boolean hardcore) {
-        this.world.bridge$serverLevelDataCB().settings.hardcore = hardcore;
+        this.world.serverLevelData.settings.hardcore = hardcore;
     }
 
     @Override
@@ -1499,7 +1504,7 @@
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        this.world.bridge$ticksPerSpawnCategory().put(spawnCategory, (long) ticksPerCategorySpawn);
+        this.world.ticksPerSpawnCategory.put(spawnCategory, (long) ticksPerCategorySpawn);
     }
 
     @Override
@@ -1507,7 +1512,7 @@
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        return this.world.bridge$ticksPerSpawnCategory().getLong(spawnCategory);
+        return this.world.ticksPerSpawnCategory.getLong(spawnCategory);
     }
 
     @Override
@@ -1712,38 +1717,41 @@
         }
     }
 
-    private static Map<String, GameRules.Key<?>> gamerules;
-    public static synchronized Map<String, GameRules.Key<?>> getGameRulesNMS() {
-        if (CraftWorld.gamerules != null) {
-            return CraftWorld.gamerules;
+    private Map<String, GameRules.Key<?>> gamerules;
+    public synchronized Map<String, GameRules.Key<?>> getGameRulesNMS() {
+        if (this.gamerules != null) {
+            return this.gamerules;
         }
+
+        return this.gamerules = CraftWorld.getGameRulesNMS(this.getHandle().getGameRules());
+    }
 
+    public static Map<String, GameRules.Key<?>> getGameRulesNMS(GameRules gameRules) {
         Map<String, GameRules.Key<?>> gamerules = new HashMap<>();
-        GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor() {
+        gameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor() {
             @Override
             public <T extends GameRules.Value<T>> void visit(GameRules.Key<T> key, GameRules.Type<T> type) {
                 gamerules.put(key.getId(), key);
             }
         });
-
-        return CraftWorld.gamerules = gamerules;
+        return gamerules;
     }
 
-    private static Map<String, GameRules.Type<?>> gameruleDefinitions;
-    public static synchronized Map<String, GameRules.Type<?>> getGameRuleDefinitions() {
-        if (CraftWorld.gameruleDefinitions != null) {
-            return CraftWorld.gameruleDefinitions;
+    private Map<String, GameRules.Type<?>> gameruleDefinitions;
+    public synchronized Map<String, GameRules.Type<?>> getGameRuleDefinitions() {
+        if (this.gameruleDefinitions != null) {
+            return this.gameruleDefinitions;
         }
 
         Map<String, GameRules.Type<?>> gameruleDefinitions = new HashMap<>();
-        GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor() {
+        this.getHandle().getGameRules().visitGameRuleTypes(new GameRules.GameRuleTypeVisitor() {
             @Override
             public <T extends GameRules.Value<T>> void visit(GameRules.Key<T> key, GameRules.Type<T> type) {
                 gameruleDefinitions.put(key.getId(), type);
             }
         });
 
-        return CraftWorld.gameruleDefinitions = gameruleDefinitions;
+        return this.gameruleDefinitions = gameruleDefinitions;
     }
 
     @Override
@@ -1753,7 +1761,7 @@
             return null;
         }
 
-        GameRules.Value<?> value = this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule));
+        GameRules.Value<?> value = this.getHandle().getGameRules().getRule(this.getGameRulesNMS().get(rule));
         return value != null ? value.toString() : "";
     }
 
@@ -1764,34 +1772,34 @@
 
         if (!this.isGameRule(rule)) return false;
 
-        GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule));
+        GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(this.getGameRulesNMS().get(rule));
         handle.deserialize(value);
-        handle.onChanged(this.getHandle().getServer());// Banner - do not pre world
+        handle.onChanged(this.getHandle());
         return true;
     }
 
     @Override
     public String[] getGameRules() {
-        return CraftWorld.getGameRulesNMS().keySet().toArray(new String[CraftWorld.getGameRulesNMS().size()]);
+        return this.getGameRulesNMS().keySet().toArray(new String[this.getGameRulesNMS().size()]);
     }
 
     @Override
     public boolean isGameRule(String rule) {
         Preconditions.checkArgument(rule != null, "String rule cannot be null");
         Preconditions.checkArgument(!rule.isEmpty(), "String rule cannot be empty");
-        return CraftWorld.getGameRulesNMS().containsKey(rule);
+        return this.getGameRulesNMS().containsKey(rule);
     }
 
     @Override
     public <T> T getGameRuleValue(GameRule<T> rule) {
         Preconditions.checkArgument(rule != null, "GameRule cannot be null");
-        return this.convert(rule, this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule.getName())));
+        return this.convert(rule, this.getHandle().getGameRules().getRule(this.getGameRulesNMS().get(rule.getName())));
     }
 
     @Override
     public <T> T getGameRuleDefault(GameRule<T> rule) {
         Preconditions.checkArgument(rule != null, "GameRule cannot be null");
-        return this.convert(rule, CraftWorld.getGameRuleDefinitions().get(rule.getName()).createRule());
+        return this.convert(rule, this.getGameRuleDefinitions().get(rule.getName()).createRule());
     }
 
     @Override
@@ -1801,9 +1809,9 @@
 
         if (!this.isGameRule(rule.getName())) return false;
 
-        GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule.getName()));
+        GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(this.getGameRulesNMS().get(rule.getName()));
         handle.deserialize(newValue.toString());
-        handle.onChanged(this.getHandle().getServer());// Banner - do not pre world
+        handle.onChanged(this.getHandle());
         return true;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimMaterial.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimMaterial.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimMaterial.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimMaterial.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimMaterial.java	(date 1729674280277)
@@ -11,26 +11,26 @@
 import org.bukkit.inventory.meta.trim.TrimMaterial;
 import org.jetbrains.annotations.NotNull;
 
-public class CraftTrimMaterial implements TrimMaterial, Handleable<net.minecraft.world.item.armortrim.TrimMaterial> {
+public class CraftTrimMaterial implements TrimMaterial, Handleable<net.minecraft.world.item.equipment.trim.TrimMaterial> {
 
-    public static TrimMaterial minecraftToBukkit(net.minecraft.world.item.armortrim.TrimMaterial minecraft) {
+    public static TrimMaterial minecraftToBukkit(net.minecraft.world.item.equipment.trim.TrimMaterial minecraft) {
         return CraftRegistry.minecraftToBukkit(minecraft, Registries.TRIM_MATERIAL, Registry.TRIM_MATERIAL);
     }
 
-    public static TrimMaterial minecraftHolderToBukkit(Holder<net.minecraft.world.item.armortrim.TrimMaterial> minecraft) {
+    public static TrimMaterial minecraftHolderToBukkit(Holder<net.minecraft.world.item.equipment.trim.TrimMaterial> minecraft) {
         return CraftTrimMaterial.minecraftToBukkit(minecraft.value());
     }
 
-    public static net.minecraft.world.item.armortrim.TrimMaterial bukkitToMinecraft(TrimMaterial bukkit) {
+    public static net.minecraft.world.item.equipment.trim.TrimMaterial bukkitToMinecraft(TrimMaterial bukkit) {
         return CraftRegistry.bukkitToMinecraft(bukkit);
     }
 
-    public static Holder<net.minecraft.world.item.armortrim.TrimMaterial> bukkitToMinecraftHolder(TrimMaterial bukkit) {
+    public static Holder<net.minecraft.world.item.equipment.trim.TrimMaterial> bukkitToMinecraftHolder(TrimMaterial bukkit) {
         Preconditions.checkArgument(bukkit != null);
 
-        net.minecraft.core.Registry<net.minecraft.world.item.armortrim.TrimMaterial> registry = CraftRegistry.getMinecraftRegistry(Registries.TRIM_MATERIAL);
+        net.minecraft.core.Registry<net.minecraft.world.item.equipment.trim.TrimMaterial> registry = CraftRegistry.getMinecraftRegistry(Registries.TRIM_MATERIAL);
 
-        if (registry.wrapAsHolder(CraftTrimMaterial.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<net.minecraft.world.item.armortrim.TrimMaterial> holder) {
+        if (registry.wrapAsHolder(CraftTrimMaterial.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<net.minecraft.world.item.equipment.trim.TrimMaterial> holder) {
             return holder;
         }
 
@@ -39,15 +39,15 @@
     }
 
     private final NamespacedKey key;
-    private final net.minecraft.world.item.armortrim.TrimMaterial handle;
+    private final net.minecraft.world.item.equipment.trim.TrimMaterial handle;
 
-    public CraftTrimMaterial(NamespacedKey key, net.minecraft.world.item.armortrim.TrimMaterial handle) {
+    public CraftTrimMaterial(NamespacedKey key, net.minecraft.world.item.equipment.trim.TrimMaterial handle) {
         this.key = key;
         this.handle = handle;
     }
 
     @Override
-    public net.minecraft.world.item.armortrim.TrimMaterial getHandle() {
+    public net.minecraft.world.item.equipment.trim.TrimMaterial getHandle() {
         return this.handle;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java	(date 1729674280014)
@@ -25,7 +25,7 @@
  */
 public class CraftChunkSnapshot implements ChunkSnapshot {
     private final int x, z;
-    private final int minHeight, maxHeight;
+    private final int minHeight, maxHeight, seaLevel;
     private final String worldname;
     private final PalettedContainer<BlockState>[] blockids;
     private final byte[][] skylight;
@@ -36,11 +36,12 @@
     private final Registry<net.minecraft.world.level.biome.Biome> biomeRegistry;
     private final PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>[] biome;
 
-    CraftChunkSnapshot(int x, int z, int minHeight, int maxHeight, String wname, long wtime, PalettedContainer<BlockState>[] sectionBlockIDs, byte[][] sectionSkyLights, byte[][] sectionEmitLights, boolean[] sectionEmpty, Heightmap hmap, Registry<net.minecraft.world.level.biome.Biome> biomeRegistry, PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>[] biome) {
+    CraftChunkSnapshot(int x, int z, int minHeight, int maxHeight, int seaLevel, String wname, long wtime, PalettedContainer<BlockState>[] sectionBlockIDs, byte[][] sectionSkyLights, byte[][] sectionEmitLights, boolean[] sectionEmpty, Heightmap hmap, Registry<net.minecraft.world.level.biome.Biome> biomeRegistry, PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>[] biome) {
         this.x = x;
         this.z = z;
         this.minHeight = minHeight;
         this.maxHeight = maxHeight;
+        this.seaLevel = seaLevel;
         this.worldname = wname;
         this.captureFulltime = wtime;
         this.blockids = sectionBlockIDs;
@@ -165,7 +166,7 @@
         this.validateChunkCoordinates(x, y, z);
 
         PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>> biome = this.biome[this.getSectionIndex(y)]; // SPIGOT-7188: Don't need to convert y to biome coordinate scale since it is bound to the block chunk section
-        return biome.get(x >> 2, (y & 0xF) >> 2, z >> 2).value().getTemperature(new BlockPos((this.x << 4) | x, y, (this.z << 4) | z));
+        return biome.get(x >> 2, (y & 0xF) >> 2, z >> 2).value().getTemperature(new BlockPos((this.x << 4) | x, y, (this.z << 4) | z), this.seaLevel);
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimPattern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimPattern.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimPattern.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimPattern.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/trim/CraftTrimPattern.java	(date 1729674280278)
@@ -11,26 +11,26 @@
 import org.bukkit.inventory.meta.trim.TrimPattern;
 import org.jetbrains.annotations.NotNull;
 
-public class CraftTrimPattern implements TrimPattern, Handleable<net.minecraft.world.item.armortrim.TrimPattern> {
+public class CraftTrimPattern implements TrimPattern, Handleable<net.minecraft.world.item.equipment.trim.TrimPattern> {
 
-    public static TrimPattern minecraftToBukkit(net.minecraft.world.item.armortrim.TrimPattern minecraft) {
+    public static TrimPattern minecraftToBukkit(net.minecraft.world.item.equipment.trim.TrimPattern minecraft) {
         return CraftRegistry.minecraftToBukkit(minecraft, Registries.TRIM_PATTERN, Registry.TRIM_PATTERN);
     }
 
-    public static TrimPattern minecraftHolderToBukkit(Holder<net.minecraft.world.item.armortrim.TrimPattern> minecraft) {
+    public static TrimPattern minecraftHolderToBukkit(Holder<net.minecraft.world.item.equipment.trim.TrimPattern> minecraft) {
         return CraftTrimPattern.minecraftToBukkit(minecraft.value());
     }
 
-    public static net.minecraft.world.item.armortrim.TrimPattern bukkitToMinecraft(TrimPattern bukkit) {
+    public static net.minecraft.world.item.equipment.trim.TrimPattern bukkitToMinecraft(TrimPattern bukkit) {
         return CraftRegistry.bukkitToMinecraft(bukkit);
     }
 
-    public static Holder<net.minecraft.world.item.armortrim.TrimPattern> bukkitToMinecraftHolder(TrimPattern bukkit) {
+    public static Holder<net.minecraft.world.item.equipment.trim.TrimPattern> bukkitToMinecraftHolder(TrimPattern bukkit) {
         Preconditions.checkArgument(bukkit != null);
 
-        net.minecraft.core.Registry<net.minecraft.world.item.armortrim.TrimPattern> registry = CraftRegistry.getMinecraftRegistry(Registries.TRIM_PATTERN);
+        net.minecraft.core.Registry<net.minecraft.world.item.equipment.trim.TrimPattern> registry = CraftRegistry.getMinecraftRegistry(Registries.TRIM_PATTERN);
 
-        if (registry.wrapAsHolder(CraftTrimPattern.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<net.minecraft.world.item.armortrim.TrimPattern> holder) {
+        if (registry.wrapAsHolder(CraftTrimPattern.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<net.minecraft.world.item.equipment.trim.TrimPattern> holder) {
             return holder;
         }
 
@@ -39,15 +39,15 @@
     }
 
     private final NamespacedKey key;
-    private final net.minecraft.world.item.armortrim.TrimPattern handle;
+    private final net.minecraft.world.item.equipment.trim.TrimPattern handle;
 
-    public CraftTrimPattern(NamespacedKey key, net.minecraft.world.item.armortrim.TrimPattern handle) {
+    public CraftTrimPattern(NamespacedKey key, net.minecraft.world.item.equipment.trim.TrimPattern handle) {
         this.key = key;
         this.handle = handle;
     }
 
     @Override
-    public net.minecraft.world.item.armortrim.TrimPattern getHandle() {
+    public net.minecraft.world.item.equipment.trim.TrimPattern getHandle() {
         return this.handle;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/Main.java b/banner-server/src/main/java/org/bukkit/craftbukkit/Main.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/Main.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/Main.java	(date 1729674280017)
@@ -1,149 +1,158 @@
 package org.bukkit.craftbukkit;
 
-import joptsimple.OptionParser;
-import joptsimple.OptionSet;
-import joptsimple.util.PathConverter;
-import net.minecrell.terminalconsole.TerminalConsoleAppender;
-
 import java.io.File;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-
-import static java.util.Arrays.asList;
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import joptsimple.util.PathConverter;
+import org.fusesource.jansi.AnsiConsole;
 
-public class Main extends OptionParser {
-
+public class Main {
     public static boolean useJline = true;
     public static boolean useConsole = true;
 
-    public Main() {
+    public static void main(String[] args) {
+        // Todo: Installation script
+        OptionParser parser = new OptionParser() {
+            {
+                this.acceptsAll(Main.asList("?", "help"), "Show the help");
 
-        acceptsAll(asList("?", "help"), "Show the help");
-
-        acceptsAll(asList("c", "config"), "Properties file to use")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("server.properties"))
-                .describedAs("Properties file");
+                this.acceptsAll(Main.asList("c", "config"), "Properties file to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("server.properties"))
+                        .describedAs("Properties file");
 
-        acceptsAll(asList("P", "plugins"), "Plugin directory to use")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("plugins"))
-                .describedAs("Plugin directory");
+                this.acceptsAll(Main.asList("P", "plugins"), "Plugin directory to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("plugins"))
+                        .describedAs("Plugin directory");
 
-        acceptsAll(asList("h", "host", "server-ip"), "Host to listen on")
-                .withRequiredArg()
-                .ofType(String.class)
-                .describedAs("Hostname or IP");
+                this.acceptsAll(Main.asList("h", "host", "server-ip"), "Host to listen on")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("Hostname or IP");
 
-        acceptsAll(asList("W", "world-dir", "universe", "world-container"), "World container")
-                .withRequiredArg()
-                .ofType(File.class)
-                .describedAs("Directory containing worlds");
+                this.acceptsAll(Main.asList("W", "world-dir", "universe", "world-container"), "World container")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("."))
+                        .describedAs("Directory containing worlds");
 
-        acceptsAll(asList("w", "world", "level-name"), "World name")
-                .withRequiredArg()
-                .ofType(String.class)
-                .describedAs("World name");
+                this.acceptsAll(Main.asList("w", "world", "level-name"), "World name")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("World name");
 
-        acceptsAll(asList("p", "port", "server-port"), "Port to listen on")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .describedAs("Port");
+                this.acceptsAll(Main.asList("p", "port", "server-port"), "Port to listen on")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Port");
 
-        accepts("serverId", "Server ID")
-                .withRequiredArg();
+                this.accepts("serverId", "Server ID")
+                        .withRequiredArg();
 
-        accepts("jfrProfile", "Enable JFR profiling");
+                this.accepts("jfrProfile", "Enable JFR profiling");
 
-        accepts("pidFile", "pid File")
-                .withRequiredArg()
-                .withValuesConvertedBy(new PathConverter());
+                this.accepts("pidFile", "pid File")
+                        .withRequiredArg()
+                        .withValuesConvertedBy(new PathConverter());
 
-        acceptsAll(asList("o", "online-mode"), "Whether to use online authentication")
-                .withRequiredArg()
-                .ofType(Boolean.class)
-                .describedAs("Authentication");
+                this.acceptsAll(Main.asList("o", "online-mode"), "Whether to use online authentication")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("Authentication");
 
-        acceptsAll(asList("s", "size", "max-players"), "Maximum amount of players")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .describedAs("Server size");
+                this.acceptsAll(Main.asList("s", "size", "max-players"), "Maximum amount of players")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Server size");
 
-        acceptsAll(asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
-                .withRequiredArg()
-                .ofType(SimpleDateFormat.class)
-                .describedAs("Log date format");
+                this.acceptsAll(Main.asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
+                        .withRequiredArg()
+                        .ofType(SimpleDateFormat.class)
+                        .describedAs("Log date format");
 
-        acceptsAll(asList("log-pattern"), "Specfies the log filename pattern")
-                .withRequiredArg()
-                .ofType(String.class)
-                .defaultsTo("server.log")
-                .describedAs("Log filename");
+                this.acceptsAll(Main.asList("log-pattern"), "Specfies the log filename pattern")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .defaultsTo("server.log")
+                        .describedAs("Log filename");
 
-        acceptsAll(asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .defaultsTo(0)
-                .describedAs("Max log size");
+                this.acceptsAll(Main.asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(0)
+                        .describedAs("Max log size");
 
-        acceptsAll(asList("log-count"), "Specified how many log files to cycle through")
-                .withRequiredArg()
-                .ofType(Integer.class)
-                .defaultsTo(1)
-                .describedAs("Log count");
+                this.acceptsAll(Main.asList("log-count"), "Specified how many log files to cycle through")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(1)
+                        .describedAs("Log count");
 
-        acceptsAll(asList("log-append"), "Whether to append to the log file")
-                .withRequiredArg()
-                .ofType(Boolean.class)
-                .defaultsTo(true)
-                .describedAs("Log append");
+                this.acceptsAll(Main.asList("log-append"), "Whether to append to the log file")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .defaultsTo(true)
+                        .describedAs("Log append");
 
-        acceptsAll(asList("log-strip-color"), "Strips color codes from log file");
+                this.acceptsAll(Main.asList("log-strip-color"), "Strips color codes from log file");
 
-        acceptsAll(asList("b", "bukkit-settings"), "File for bukkit settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("bukkit.yml"))
-                .describedAs("Yml file");
+                this.acceptsAll(Main.asList("b", "bukkit-settings"), "File for bukkit settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("bukkit.yml"))
+                        .describedAs("Yml file");
 
-        acceptsAll(asList("C", "commands-settings"), "File for command settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("commands.yml"))
-                .describedAs("Yml file");
+                this.acceptsAll(Main.asList("C", "commands-settings"), "File for command settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("commands.yml"))
+                        .describedAs("Yml file");
 
-        acceptsAll(asList("forceUpgrade"), "Whether to force a world upgrade");
-        acceptsAll(asList("eraseCache"), "Whether to force cache erase during world upgrade");
+                this.acceptsAll(Main.asList("forceUpgrade"), "Whether to force a world upgrade");
+                this.acceptsAll(Main.asList("eraseCache"), "Whether to force cache erase during world upgrade");
+                this.acceptsAll(Main.asList("recreateRegionFiles"), "Whether to recreate region files during world upgrade");
+                this.acceptsAll(Main.asList("nogui"), "Disables the graphical console");
+
+                this.acceptsAll(Main.asList("nojline"), "Disables jline and emulates the vanilla console");
 
-        acceptsAll(asList("nojline"), "Disables jline and emulates the vanilla console");
+                this.acceptsAll(Main.asList("noconsole"), "Disables the console");
 
-        acceptsAll(asList("noconsole"), "Disables the console");
-        acceptsAll(asList("v", "version"), "Show the CraftBukkit Version");
+                this.acceptsAll(Main.asList("v", "version"), "Show the CraftBukkit Version");
 
-        acceptsAll(asList("demo"), "Demo mode");
+                this.acceptsAll(Main.asList("demo"), "Demo mode");
+
+                this.acceptsAll(Main.asList("initSettings"), "Only create configuration files and then exit"); // SPIGOT-5761: Add initSettings option
 
-        // Spigot Start
-        acceptsAll(asList("S", "spigot-settings"), "File for spigot settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("spigot.yml"))
-                .describedAs("Yml file");
-
-        // Banner Start
-        acceptsAll(asList("B", "banner-settings"), "File for banner settings")
-                .withRequiredArg()
-                .ofType(File.class)
-                .defaultsTo(new File("banner-config","banner.yml"))
-                .describedAs("Yml file");
+                // Spigot Start
+                this.acceptsAll(Main.asList("S", "spigot-settings"), "File for spigot settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("spigot.yml"))
+                        .describedAs("Yml file");
+                // Spigot End
+            }
+        };
 
-        allowsUnrecognizedOptions();
-    }
+        OptionSet options = null;
+
+        try {
+            options = parser.parse(args);
+        } catch (joptsimple.OptionException ex) {
+            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, ex.getLocalizedMessage());
+        }
 
-    public static void handleParser(OptionParser parser, OptionSet options) {
         if ((options == null) || (options.has("?"))) {
             try {
                 parser.printHelpOn(System.out);
@@ -161,33 +170,56 @@
             }
 
             float javaVersion = Float.parseFloat(System.getProperty("java.class.version"));
-            if (javaVersion < 61.0) {
-                System.err.println("Unsupported Java detected (" + javaVersion + "). This version of Minecraft requires at least Java 17. Check your Java version with the command 'java -version'.");
-                return;
-            }
-            if (javaVersion > 65.0) {
-                System.err.println("Unsupported Java detected (" + javaVersion + "). Only up to Java 21 is supported.");
+            if (javaVersion > 67.0) {
+                System.err.println("Unsupported Java detected (" + javaVersion + "). Only up to Java 23 is supported.");
                 return;
             }
 
-            String javaVersionName = System.getProperty("java.version");
-            // J2SE SDK/JRE Version String Naming Convention
-            boolean isPreRelease = javaVersionName.contains("-");
-            if (isPreRelease && javaVersion == 61.0) {
-                System.err.println("Unsupported Java detected (" + javaVersionName + "). You are running an outdated, pre-release version. Only general availability versions of Java are supported. Please update your Java version.");
-                return;
-            }
+            try {
+                // This trick bypasses Maven Shade's clever rewriting of our getProperty call when using String literals
+                String jline_UnsupportedTerminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+                String jline_terminal = new String(new char[]{'j', 'l', 'i', 'n', 'e', '.', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'l'});
+
+                Main.useJline = !(jline_UnsupportedTerminal).equals(System.getProperty(jline_terminal));
 
-            if (options.has("nojline")) {
-                System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false");
-                useJline = false;
-            }
+                if (options.has("nojline")) {
+                    System.setProperty("user.language", "en");
+                    Main.useJline = false;
+                }
+
+                if (Main.useJline) {
+                    AnsiConsole.systemInstall();
+                } else {
+                    // This ensures the terminal literal will always match the jline implementation
+                    System.setProperty(jline.TerminalFactory.JLINE_TERMINAL, jline.UnsupportedTerminal.class.getName());
+                }
 
-            if (options.has("noconsole")) {
-                useConsole = false;
-                useJline = false;
-                System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false");
+                if (options.has("noconsole")) {
+                    Main.useConsole = false;
+                }
+
+                if (Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {
+                    Date buildDate = new Date(Integer.parseInt(Main.class.getPackage().getImplementationVendor()) * 1000L);
+
+                    Calendar deadline = Calendar.getInstance();
+                    deadline.add(Calendar.DAY_OF_YEAR, -3);
+                    if (buildDate.before(deadline.getTime())) {
+                        System.err.println("*** Error, this build is outdated ***");
+                        System.err.println("*** Please download a new build as per instructions from https://www.spigotmc.org/go/outdated-spigot ***");
+                        System.err.println("*** Server will start in 20 seconds ***");
+                        Thread.sleep(TimeUnit.SECONDS.toMillis(20));
+                    }
+                }
+
+                System.out.println("Loading libraries, please wait...");
+                net.minecraft.server.Main.main(options);
+            } catch (Throwable t) {
+                t.printStackTrace();
             }
         }
     }
+
+    private static List<String> asList(String... params) {
+        return Arrays.asList(params);
+    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftChunk.java	(date 1729674280014)
@@ -61,7 +61,7 @@
     private static final byte[] EMPTY_LIGHT = new byte[2048];
 
     public CraftChunk(net.minecraft.world.level.chunk.LevelChunk chunk) {
-        this.worldServer = chunk.banner$r();
+        this.worldServer = chunk.level;
         this.x = chunk.getPos().x;
         this.z = chunk.getPos().z;
     }
@@ -218,7 +218,7 @@
     @Override
     public boolean isSlimeChunk() {
         // 987234911L is deterimined in EntitySlime when seeing if a slime can spawn in a chunk
-        return WorldgenRandom.seedSlimeChunk(this.getX(), this.getZ(), this.getWorld().getSeed(), this.worldServer.bridge$spigotConfig().slimeSeed).nextInt(10) == 0;
+        return WorldgenRandom.seedSlimeChunk(this.getX(), this.getZ(), this.getWorld().getSeed(), this.worldServer.spigotConfig.slimeSeed).nextInt(10) == 0;
     }
 
     @Override
@@ -309,7 +309,7 @@
         PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>[] biome = (includeBiome || includeBiomeTempRain) ? new PalettedContainer[cs.length] : null;
 
         Registry<net.minecraft.world.level.biome.Biome> iregistry = this.worldServer.registryAccess().lookupOrThrow(Registries.BIOME);
-        Codec<PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>> biomeCodec = PalettedContainer.codecRO(iregistry.asHolderIdMap(), iregistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, iregistry.getHolderOrThrow(Biomes.PLAINS));
+        Codec<PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>> biomeCodec = PalettedContainer.codecRO(iregistry.asHolderIdMap(), iregistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, iregistry.getOrThrow(Biomes.PLAINS));
 
         for (int i = 0; i < cs.length; i++) {
             CompoundTag data = new CompoundTag();
@@ -348,12 +348,12 @@
         }
 
         World world = this.getWorld();
-        return new CraftChunkSnapshot(this.getX(), this.getZ(), chunk.getMinY(), chunk.getMaxY(), world.getName(), world.getFullTime(), sectionBlockIDs, sectionSkyLights, sectionEmitLights, sectionEmpty, hmap, iregistry, biome);
+        return new CraftChunkSnapshot(this.getX(), this.getZ(), chunk.getMinY(), chunk.getMaxY(), world.getSeaLevel(), world.getName(), world.getFullTime(), sectionBlockIDs, sectionSkyLights, sectionEmitLights, sectionEmpty, hmap, iregistry, biome);
     }
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return this.getHandle(ChunkStatus.STRUCTURE_STARTS).bridge$persistentDataContainer();
+        return this.getHandle(ChunkStatus.STRUCTURE_STARTS).persistentDataContainer;
     }
 
     @Override
@@ -409,9 +409,9 @@
         byte[][] skyLight = new byte[hSection][];
         byte[][] emitLight = new byte[hSection][];
         boolean[] empty = new boolean[hSection];
-        Registry<net.minecraft.world.level.biome.Biome> iregistry = world.getHandle().registryAccess().registryOrThrow(Registries.BIOME);
+        Registry<net.minecraft.world.level.biome.Biome> iregistry = world.getHandle().registryAccess().lookupOrThrow(Registries.BIOME);
         PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>>[] biome = (includeBiome || includeBiomeTempRain) ? new PalettedContainer[hSection] : null;
-        Codec<PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>> biomeCodec = PalettedContainer.codecRO(iregistry.asHolderIdMap(), iregistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, iregistry.getHolderOrThrow(Biomes.PLAINS));
+        Codec<PalettedContainerRO<Holder<net.minecraft.world.level.biome.Biome>>> biomeCodec = PalettedContainer.codecRO(iregistry.asHolderIdMap(), iregistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, iregistry.getOrThrow(Biomes.PLAINS));
 
         for (int i = 0; i < hSection; i++) {
             blockIDs[i] = CraftChunk.emptyBlockIDs;
@@ -420,11 +420,11 @@
             empty[i] = true;
 
             if (biome != null) {
-                biome[i] = (PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>>) biomeCodec.parse(NbtOps.INSTANCE, biomeCodec.encodeStart(NbtOps.INSTANCE, actual.getSection(i).getBiomes()).getOrThrow()).getOrThrow(ChunkSerializer.ChunkReadException::new);
+                biome[i] = (PalettedContainer<Holder<net.minecraft.world.level.biome.Biome>>) biomeCodec.parse(NbtOps.INSTANCE, biomeCodec.encodeStart(NbtOps.INSTANCE, actual.getSection(i).getBiomes()).getOrThrow()).getOrThrow(SerializableChunkData.ChunkReadException::new);
             }
         }
 
-        return new CraftChunkSnapshot(x, z, world.getMinHeight(), world.getMaxHeight(), world.getName(), world.getFullTime(), blockIDs, skyLight, emitLight, empty, new Heightmap(actual, Heightmap.Types.MOTION_BLOCKING), iregistry, biome);
+        return new CraftChunkSnapshot(x, z, world.getMinHeight(), world.getMaxHeight(), world.getSeaLevel(), world.getName(), world.getFullTime(), blockIDs, skyLight, emitLight, empty, new Heightmap(actual, Heightmap.Types.MOTION_BLOCKING), iregistry, biome);
     }
 
     static void validateChunkCoordinates(int minY, int maxY, int x, int y, int z) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java	(date 1729674280258)
@@ -10,7 +10,6 @@
 import com.google.common.collect.Multimap;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import com.mojang.serialization.DynamicOps;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -54,9 +53,10 @@
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.SnbtPrinterTagVisitor;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.tags.TagKey;
 import net.minecraft.util.Unit;
 import net.minecraft.world.entity.EquipmentSlotGroup;
 import net.minecraft.world.food.FoodProperties;
@@ -67,13 +67,21 @@
 import net.minecraft.world.item.component.BlockItemStateProperties;
 import net.minecraft.world.item.component.CustomData;
 import net.minecraft.world.item.component.CustomModelData;
+import net.minecraft.world.item.component.DamageResistant;
 import net.minecraft.world.item.component.ItemAttributeModifiers;
 import net.minecraft.world.item.component.ItemLore;
 import net.minecraft.world.item.component.Tool;
 import net.minecraft.world.item.component.Unbreakable;
+import net.minecraft.world.item.component.UseCooldown;
+import net.minecraft.world.item.component.UseRemainder;
+import net.minecraft.world.item.enchantment.Enchantable;
 import net.minecraft.world.item.enchantment.ItemEnchantments;
+import net.minecraft.world.item.equipment.Equippable;
 import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.Bukkit;
 import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Tag;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.block.data.BlockData;
@@ -87,28 +95,37 @@
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.ItemMetaKey.Specific;
+import org.bukkit.craftbukkit.inventory.components.CraftEquippableComponent;
 import org.bukkit.craftbukkit.inventory.components.CraftFoodComponent;
 import org.bukkit.craftbukkit.inventory.components.CraftJukeboxComponent;
 import org.bukkit.craftbukkit.inventory.components.CraftToolComponent;
+import org.bukkit.craftbukkit.inventory.components.CraftUseCooldownComponent;
 import org.bukkit.craftbukkit.inventory.tags.DeprecatedCustomTagContainer;
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.craftbukkit.tag.CraftDamageTag;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNBTTagConfigSerializer;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.damage.DamageType;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemFlag;
 import org.bukkit.inventory.ItemRarity;
+import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.BlockDataMeta;
 import org.bukkit.inventory.meta.Damageable;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.inventory.meta.Repairable;
+import org.bukkit.inventory.meta.components.EquippableComponent;
 import org.bukkit.inventory.meta.components.FoodComponent;
 import org.bukkit.inventory.meta.components.JukeboxPlayableComponent;
 import org.bukkit.inventory.meta.components.ToolComponent;
+import org.bukkit.inventory.meta.components.UseCooldownComponent;
 import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
 import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.tag.DamageTypeTags;
 
 /**
  * Children must include the following:
@@ -190,7 +207,7 @@
         }
 
         <T> Applicator putIfAbsent(TypedDataComponent<?> component) {
-            if (!this.builder.build().isSet(component.type())) {
+            if (!this.builder.isSet(component.type())) {
                 this.builder.set(component);
             }
             return this;
@@ -205,6 +222,7 @@
     static final ItemMetaKeyType<Component> ITEM_NAME = new ItemMetaKeyType(DataComponents.ITEM_NAME, "item-name");
     static final ItemMetaKeyType<ItemLore> LORE = new ItemMetaKeyType<>(DataComponents.LORE, "lore");
     static final ItemMetaKeyType<CustomModelData> CUSTOM_MODEL_DATA = new ItemMetaKeyType<>(DataComponents.CUSTOM_MODEL_DATA, "custom-model-data");
+    static final ItemMetaKeyType<Enchantable> ENCHANTABLE = new ItemMetaKeyType<>(DataComponents.ENCHANTABLE, "enchantable");
     static final ItemMetaKeyType<ItemEnchantments> ENCHANTMENTS = new ItemMetaKeyType<>(DataComponents.ENCHANTMENTS, "enchants");
     static final ItemMetaKeyType<Integer> REPAIR = new ItemMetaKeyType<>(DataComponents.REPAIR_COST, "repair-cost");
     static final ItemMetaKeyType<ItemAttributeModifiers> ATTRIBUTES = new ItemMetaKeyType<>(DataComponents.ATTRIBUTE_MODIFIERS, "attribute-modifiers");
@@ -216,20 +234,32 @@
     static final ItemMetaKey HIDEFLAGS = new ItemMetaKey("ItemFlags");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<Unit> HIDE_TOOLTIP = new ItemMetaKeyType<>(DataComponents.HIDE_TOOLTIP, "hide-tool-tip");
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKeyType<ResourceLocation> TOOLTIP_STYLE = new ItemMetaKeyType<>(DataComponents.TOOLTIP_STYLE, "tool-tip-style");
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKeyType<ResourceLocation> ITEM_MODEL = new ItemMetaKeyType<>(DataComponents.ITEM_MODEL, "item-model");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<Unbreakable> UNBREAKABLE = new ItemMetaKeyType<>(DataComponents.UNBREAKABLE, "Unbreakable");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<Boolean> ENCHANTMENT_GLINT_OVERRIDE = new ItemMetaKeyType<>(DataComponents.ENCHANTMENT_GLINT_OVERRIDE, "enchantment-glint-override");
     @Specific(Specific.To.NBT)
-    static final ItemMetaKeyType<Unit> FIRE_RESISTANT = new ItemMetaKeyType<>(DataComponents.FIRE_RESISTANT, "fire-resistant");
+    static final ItemMetaKeyType<Unit> GLIDER = new ItemMetaKeyType<>(DataComponents.GLIDER, "glider");
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKeyType<DamageResistant> DAMAGE_RESISTANT = new ItemMetaKeyType<>(DataComponents.DAMAGE_RESISTANT, "damage-resistant");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<Integer> MAX_STACK_SIZE = new ItemMetaKeyType<>(DataComponents.MAX_STACK_SIZE, "max-stack-size");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<Rarity> RARITY = new ItemMetaKeyType<>(DataComponents.RARITY, "rarity");
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKeyType<UseRemainder> USE_REMAINDER = new ItemMetaKeyType<>(DataComponents.USE_REMAINDER, "use-remainder");
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKeyType<UseCooldown> USE_COOLDOWN = new ItemMetaKeyType<>(DataComponents.USE_COOLDOWN, "use-cooldown");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<FoodProperties> FOOD = new ItemMetaKeyType<>(DataComponents.FOOD, "food");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<Tool> TOOL = new ItemMetaKeyType<>(DataComponents.TOOL, "tool");
+    @Specific(Specific.To.NBT)
+    static final ItemMetaKeyType<Equippable> EQUIPPABLE = new ItemMetaKeyType<>(DataComponents.EQUIPPABLE, "equippable");
     @Specific(Specific.To.NBT)
     static final ItemMetaKeyType<JukeboxPlayable> JUKEBOX_PLAYABLE = new ItemMetaKeyType<>(DataComponents.JUKEBOX_PLAYABLE, "jukebox-playable");
     @Specific(Specific.To.NBT)
@@ -249,19 +279,26 @@
     private Component itemName;
     private List<Component> lore; // null and empty are two different states internally
     private Integer customModelData;
+    private Integer enchantableValue;
     private Map<String, String> blockData;
     private Map<Enchantment, Integer> enchantments;
     private Multimap<Attribute, AttributeModifier> attributeModifiers;
     private int repairCost;
     private int hideFlag;
     private boolean hideTooltip;
+    private NamespacedKey tooltipStyle;
+    private NamespacedKey itemModel;
     private boolean unbreakable;
     private Boolean enchantmentGlintOverride;
-    private boolean fireResistant;
+    private boolean glider;
+    private TagKey<net.minecraft.world.damagesource.DamageType> damageResistant;
     private Integer maxStackSize;
     private ItemRarity rarity;
+    private ItemStack useRemainder;
+    private CraftUseCooldownComponent useCooldown;
     private CraftFoodComponent food;
     private CraftToolComponent tool;
+    private CraftEquippableComponent equippable;
     private CraftJukeboxComponent jukebox;
     private int damage;
     private Integer maxDamage;
@@ -289,6 +326,7 @@
         }
 
         this.customModelData = meta.customModelData;
+        this.enchantableValue = meta.enchantableValue;
         this.blockData = meta.blockData;
 
         if (meta.enchantments != null) {
@@ -302,23 +340,35 @@
         this.repairCost = meta.repairCost;
         this.hideFlag = meta.hideFlag;
         this.hideTooltip = meta.hideTooltip;
+        this.tooltipStyle = meta.tooltipStyle;
+        this.itemModel = meta.itemModel;
         this.unbreakable = meta.unbreakable;
         this.enchantmentGlintOverride = meta.enchantmentGlintOverride;
-        this.fireResistant = meta.fireResistant;
+        this.glider = meta.glider;
+        this.damageResistant = meta.damageResistant;
         this.maxStackSize = meta.maxStackSize;
         this.rarity = meta.rarity;
+        if (meta.hasUseRemainder()) {
+            this.useRemainder = meta.useRemainder.clone();
+        }
+        if (meta.hasUseCooldown()) {
+            this.useCooldown = new CraftUseCooldownComponent(meta.useCooldown);
+        }
         if (meta.hasFood()) {
             this.food = new CraftFoodComponent(meta.food);
         }
         if (meta.hasTool()) {
             this.tool = new CraftToolComponent(meta.tool);
         }
+        if (meta.hasEquippable()) {
+            this.equippable = new CraftEquippableComponent(meta.equippable);
+        }
         if (meta.hasJukeboxPlayable()) {
             this.jukebox = new CraftJukeboxComponent(meta.jukebox);
         }
         this.damage = meta.damage;
         this.maxDamage = meta.maxDamage;
-        this.unhandledTags.map.putAll(meta.unhandledTags.map);
+        this.unhandledTags.copy(meta.unhandledTags.build());
         this.removedTags.addAll(meta.removedTags);
         this.persistentDataContainer.putAll(meta.persistentDataContainer.getRaw());
 
@@ -347,6 +397,9 @@
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.CUSTOM_MODEL_DATA).ifPresent((i) -> {
             this.customModelData = i.value();
         });
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.ENCHANTABLE).ifPresent((i) -> {
+            this.enchantableValue = i.value();
+        });
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.BLOCK_DATA).ifPresent((t) -> {
             this.blockData = t.properties();
         });
@@ -374,6 +427,12 @@
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.HIDE_TOOLTIP).ifPresent((u) -> {
             this.hideTooltip = true;
         });
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.TOOLTIP_STYLE).ifPresent((key) -> {
+            this.tooltipStyle = CraftNamespacedKey.fromMinecraft(key);
+        });
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.ITEM_MODEL).ifPresent((key) -> {
+            this.itemModel = CraftNamespacedKey.fromMinecraft(key);
+        });
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.UNBREAKABLE).ifPresent((u) -> {
             this.unbreakable = true;
             if (!u.showInTooltip()) {
@@ -383,8 +442,11 @@
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.ENCHANTMENT_GLINT_OVERRIDE).ifPresent((override) -> {
             this.enchantmentGlintOverride = override;
         });
-        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.FIRE_RESISTANT).ifPresent((u) -> {
-            this.fireResistant = true;
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.GLIDER).ifPresent((u) -> {
+            this.glider = true;
+        });
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.DAMAGE_RESISTANT).ifPresent((tags) -> {
+            this.damageResistant = tags.types();
         });
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.MAX_STACK_SIZE).ifPresent((i) -> {
             this.maxStackSize = i;
@@ -392,12 +454,21 @@
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.RARITY).ifPresent((enumItemRarity) -> {
             this.rarity = ItemRarity.valueOf(enumItemRarity.name());
         });
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.USE_REMAINDER).ifPresent((remainder) -> {
+            this.useRemainder = CraftItemStack.asCraftMirror(remainder.convertInto());
+        });
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.USE_COOLDOWN).ifPresent((cooldown) -> {
+            this.useCooldown = new CraftUseCooldownComponent(cooldown);
+        });
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.FOOD).ifPresent((foodInfo) -> {
             this.food = new CraftFoodComponent(foodInfo);
         });
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.TOOL).ifPresent((toolInfo) -> {
             this.tool = new CraftToolComponent(toolInfo);
         });
+        CraftMetaItem.getOrEmpty(tag, CraftMetaItem.EQUIPPABLE).ifPresent((equippableInfo) -> {
+            this.equippable = new CraftEquippableComponent(equippableInfo);
+        });
         CraftMetaItem.getOrEmpty(tag, CraftMetaItem.JUKEBOX_PLAYABLE).ifPresent((jukeboxPlayable) -> {
             this.jukebox = new CraftJukeboxComponent(jukeboxPlayable);
         });
@@ -512,6 +583,10 @@
         if (customModelData != null) {
             this.setCustomModelData(customModelData);
         }
+        Integer enchantmentValue = SerializableMeta.getObject(Integer.class, map, CraftMetaItem.ENCHANTABLE.BUKKIT, true);
+        if (enchantmentValue != null) {
+            this.setEnchantable(enchantmentValue);
+        }
 
         Object blockData = SerializableMeta.getObject(Object.class, map, CraftMetaItem.BLOCK_DATA.BUKKIT, true);
         if (blockData != null) {
@@ -558,6 +633,16 @@
             this.setHideTooltip(hideTooltip);
         }
 
+        String tooltipStyle = SerializableMeta.getString(map, CraftMetaItem.TOOLTIP_STYLE.BUKKIT, true);
+        if (tooltipStyle != null) {
+            this.setTooltipStyle(NamespacedKey.fromString(tooltipStyle));
+        }
+
+        String itemModel = SerializableMeta.getString(map, CraftMetaItem.ITEM_MODEL.BUKKIT, true);
+        if (itemModel != null) {
+            this.setItemModel(NamespacedKey.fromString(itemModel));
+        }
+
         Boolean unbreakable = SerializableMeta.getObject(Boolean.class, map, CraftMetaItem.UNBREAKABLE.BUKKIT, true);
         if (unbreakable != null) {
             this.setUnbreakable(unbreakable);
@@ -568,9 +653,17 @@
             this.setEnchantmentGlintOverride(enchantmentGlintOverride);
         }
 
-        Boolean fireResistant = SerializableMeta.getObject(Boolean.class, map, CraftMetaItem.FIRE_RESISTANT.BUKKIT, true);
-        if (fireResistant != null) {
-            this.setFireResistant(fireResistant);
+        Boolean glider = SerializableMeta.getObject(Boolean.class, map, CraftMetaItem.GLIDER.BUKKIT, true);
+        if (glider != null) {
+            this.setGlider(glider);
+        }
+
+        String damageResistant = SerializableMeta.getString(map, CraftMetaItem.DAMAGE_RESISTANT.BUKKIT, true);
+        if (damageResistant != null) {
+            Tag<DamageType> tag = Bukkit.getTag(DamageTypeTags.REGISTRY_DAMAGE_TYPES, NamespacedKey.fromString(damageResistant), DamageType.class);
+            if (tag != null) {
+                this.setDamageResistant(tag);
+            }
         }
 
         Integer maxStackSize = SerializableMeta.getObject(Integer.class, map, CraftMetaItem.MAX_STACK_SIZE.BUKKIT, true);
@@ -583,6 +676,16 @@
             this.setRarity(ItemRarity.valueOf(rarity));
         }
 
+        ItemStack remainder = SerializableMeta.getObject(ItemStack.class, map, CraftMetaItem.USE_REMAINDER.BUKKIT, true);
+        if (remainder != null) {
+            this.setUseRemainder(remainder);
+        }
+
+        CraftUseCooldownComponent cooldown = SerializableMeta.getObject(CraftUseCooldownComponent.class, map, CraftMetaItem.USE_COOLDOWN.BUKKIT, true);
+        if (cooldown != null) {
+            this.setUseCooldown(cooldown);
+        }
+
         CraftFoodComponent food = SerializableMeta.getObject(CraftFoodComponent.class, map, CraftMetaItem.FOOD.BUKKIT, true);
         if (food != null) {
             this.setFood(food);
@@ -593,6 +696,11 @@
             this.setTool(tool);
         }
 
+        CraftEquippableComponent equippable = SerializableMeta.getObject(CraftEquippableComponent.class, map, CraftMetaItem.EQUIPPABLE.BUKKIT, true);
+        if (equippable != null) {
+            this.setEquippable(equippable);
+        }
+
         CraftJukeboxComponent jukeboxPlayable = SerializableMeta.getObject(CraftJukeboxComponent.class, map, CraftMetaItem.JUKEBOX_PLAYABLE.BUKKIT, true);
         if (jukeboxPlayable != null) {
             this.setJukeboxPlayable(jukeboxPlayable);
@@ -624,15 +732,15 @@
             ByteArrayInputStream buf = new ByteArrayInputStream(Base64.getDecoder().decode(unhandled));
             try {
                 CompoundTag unhandledTag = NbtIo.readCompressed(buf, NbtAccounter.unlimitedHeap());
-                DataComponentPatch unhandledPatch = DataComponentPatch.CODEC.parse(BukkitMethodHooks.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), unhandledTag).result().get();
-                this.unhandledTags.build().copy(unhandledPatch);
+                DataComponentPatch unhandledPatch = DataComponentPatch.CODEC.parse(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), unhandledTag).result().get();
+                this.unhandledTags.copy(unhandledPatch);
 
                 for (Entry<DataComponentType<?>, Optional<?>> entry : unhandledPatch.entrySet()) {
                     // Move removed unhandled tags to dedicated removedTags
                     if (!entry.getValue().isPresent()) {
                         DataComponentType<?> key = entry.getKey();
 
-                        this.unhandledTags.build().clear(key);
+                        this.unhandledTags.clear(key);
                         this.removedTags.add(key);
                     }
                 }
@@ -644,12 +752,12 @@
         Iterable<?> removed = SerializableMeta.getObject(Iterable.class, map, "removed", true);
         if (removed != null) {
             RegistryAccess registryAccess = CraftRegistry.getMinecraftRegistry();
-            Registry<DataComponentType<?>> componentTypeRegistry = registryAccess.registryOrThrow(Registries.DATA_COMPONENT_TYPE);
+            Registry<DataComponentType<?>> componentTypeRegistry = registryAccess.lookupOrThrow(Registries.DATA_COMPONENT_TYPE);
 
             for (Object removedObject : removed) {
                 String removedString = (String) removedObject;
 
-                DataComponentType<?> component = componentTypeRegistry.get(ResourceLocation.parse(removedString));
+                DataComponentType<?> component = componentTypeRegistry.getValue(ResourceLocation.parse(removedString));
                 if (component != null) {
                     this.removedTags.add(component);
                 }
@@ -807,6 +915,10 @@
             itemTag.put(CraftMetaItem.CUSTOM_MODEL_DATA, new CustomModelData(this.customModelData));
         }
 
+        if (this.hasEnchantable()) {
+            itemTag.put(CraftMetaItem.ENCHANTABLE, new Enchantable(this.enchantableValue));
+        }
+
         if (this.hasBlockData()) {
             itemTag.put(CraftMetaItem.BLOCK_DATA, new BlockItemStateProperties(this.blockData));
         }
@@ -828,6 +940,14 @@
             itemTag.put(CraftMetaItem.HIDE_TOOLTIP, Unit.INSTANCE);
         }
 
+        if (this.hasTooltipStyle()) {
+            itemTag.put(CraftMetaItem.TOOLTIP_STYLE, CraftNamespacedKey.toMinecraft(this.getTooltipStyle()));
+        }
+
+        if (this.hasItemModel()) {
+            itemTag.put(CraftMetaItem.ITEM_MODEL, CraftNamespacedKey.toMinecraft(this.getItemModel()));
+        }
+
         if (this.isUnbreakable()) {
             itemTag.put(CraftMetaItem.UNBREAKABLE, new Unbreakable(!this.hasItemFlag(ItemFlag.HIDE_UNBREAKABLE)));
         }
@@ -836,8 +956,12 @@
             itemTag.put(CraftMetaItem.ENCHANTMENT_GLINT_OVERRIDE, this.getEnchantmentGlintOverride());
         }
 
-        if (this.isFireResistant()) {
-            itemTag.put(CraftMetaItem.FIRE_RESISTANT, Unit.INSTANCE);
+        if (this.isGlider()) {
+            itemTag.put(CraftMetaItem.GLIDER, Unit.INSTANCE);
+        }
+
+        if (this.hasDamageResistant()) {
+            itemTag.put(CraftMetaItem.DAMAGE_RESISTANT, new DamageResistant(this.damageResistant));
         }
 
         if (this.hasMaxStackSize()) {
@@ -848,6 +972,14 @@
             itemTag.put(CraftMetaItem.RARITY, Rarity.valueOf(this.rarity.name()));
         }
 
+        if (this.hasUseRemainder()) {
+            itemTag.put(CraftMetaItem.USE_REMAINDER, new UseRemainder(CraftItemStack.asNMSCopy(this.useRemainder)));
+        }
+
+        if (this.hasUseCooldown()) {
+            itemTag.put(CraftMetaItem.USE_COOLDOWN, this.useCooldown.getHandle());
+        }
+
         if (this.hasFood()) {
             itemTag.put(CraftMetaItem.FOOD, this.food.getHandle());
         }
@@ -856,6 +988,10 @@
             itemTag.put(CraftMetaItem.TOOL, this.tool.getHandle());
         }
 
+        if (this.hasEquippable()) {
+            itemTag.put(CraftMetaItem.EQUIPPABLE, this.equippable.getHandle());
+        }
+
         if (this.hasJukeboxPlayable()) {
             itemTag.put(CraftMetaItem.JUKEBOX_PLAYABLE, this.jukebox.getHandle());
         }
@@ -875,7 +1011,7 @@
         }
 
         for (DataComponentType<?> removed : this.removedTags) {
-            if (!itemTag.builder.build().isSet(removed)) {
+            if (!itemTag.builder.isSet(removed)) {
                 itemTag.builder.remove(removed);
             }
         }
@@ -883,9 +1019,9 @@
         CompoundTag customTag = (this.customTag != null) ? this.customTag.copy() : null;
         if (!this.persistentDataContainer.isEmpty()) {
             CompoundTag bukkitCustomCompound = new CompoundTag();
-            Map<String, Tag> rawPublicMap = this.persistentDataContainer.getRaw();
+            Map<String, net.minecraft.nbt.Tag> rawPublicMap = this.persistentDataContainer.getRaw();
 
-            for (Map.Entry<String, Tag> nbtBaseEntry : rawPublicMap.entrySet()) {
+            for (Map.Entry<String, net.minecraft.nbt.Tag> nbtBaseEntry : rawPublicMap.entrySet()) {
                 bukkitCustomCompound.put(nbtBaseEntry.getKey(), nbtBaseEntry.getValue());
             }
 
@@ -901,14 +1037,16 @@
     }
 
     void applyEnchantments(Map<Enchantment, Integer> enchantments, CraftMetaItem.Applicator tag, ItemMetaKeyType<ItemEnchantments> key, ItemFlag itemFlag) {
-        if (enchantments == null) {
+        if (enchantments == null && !this.hasItemFlag(itemFlag)) {
             return;
         }
 
         ItemEnchantments.Mutable list = new ItemEnchantments.Mutable(ItemEnchantments.EMPTY);
 
-        for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
-            list.set(CraftEnchantment.bukkitToMinecraftHolder(entry.getKey()), entry.getValue());
+        if (enchantments != null) {
+            for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
+                list.set(CraftEnchantment.bukkitToMinecraftHolder(entry.getKey()), entry.getValue());
+            }
         }
 
         list.showInTooltip = !this.hasItemFlag(itemFlag);
@@ -956,7 +1094,7 @@
 
     @Overridden
     boolean isEmpty() {
-        return !(this.hasDisplayName() || this.hasItemName() || this.hasLocalizedName() || this.hasEnchants() || (this.lore != null) || this.hasCustomModelData() || this.hasBlockData() || this.hasRepairCost() || !this.unhandledTags.build().isEmpty() || !this.removedTags.isEmpty() || !this.persistentDataContainer.isEmpty() || this.hideFlag != 0 || this.isHideTooltip() || this.isUnbreakable() || this.hasEnchantmentGlintOverride() || this.isFireResistant() || this.hasMaxStackSize() || this.hasRarity() || this.hasFood() || this.hasTool() || this.hasDamage() || this.hasMaxDamage() || this.hasAttributeModifiers() || this.customTag != null);
+        return !(this.hasDisplayName() || this.hasItemName() || this.hasLocalizedName() || this.hasEnchants() || (this.lore != null) || this.hasCustomModelData() || this.hasEnchantable() || this.hasBlockData() || this.hasRepairCost() || !this.unhandledTags.build().isEmpty() || !this.removedTags.isEmpty() || !this.persistentDataContainer.isEmpty() || this.hideFlag != 0 || this.isHideTooltip() || this.hasTooltipStyle() || this.hasItemModel() || this.isUnbreakable() || this.hasEnchantmentGlintOverride() || this.isGlider() || this.hasDamageResistant() || this.hasMaxStackSize() || this.hasRarity() || this.hasUseRemainder() || this.hasUseCooldown() || this.hasFood() || this.hasTool() || this.hasJukeboxPlayable() || this.hasEquippable() || this.hasDamage() || this.hasMaxDamage() || this.hasAttributeModifiers() || this.customTag != null);
     }
 
     @Override
@@ -1148,6 +1286,22 @@
         this.customModelData = data;
     }
 
+    @Override
+    public boolean hasEnchantable() {
+        return this.enchantableValue != null;
+    }
+
+    @Override
+    public int getEnchantable() {
+        Preconditions.checkState(this.hasEnchantable(), "We don't have Enchantable! Check hasEnchantable first!");
+        return this.enchantableValue;
+    }
+
+    @Override
+    public void setEnchantable(Integer data) {
+        this.enchantableValue = data;
+    }
+
     @Override
     public boolean hasBlockData() {
         return this.blockData != null;
@@ -1184,6 +1338,36 @@
         this.hideTooltip = hideTooltip;
     }
 
+    @Override
+    public boolean hasTooltipStyle() {
+        return this.tooltipStyle != null;
+    }
+
+    @Override
+    public NamespacedKey getTooltipStyle() {
+        return this.tooltipStyle;
+    }
+
+    @Override
+    public void setTooltipStyle(NamespacedKey tooltipStyle) {
+        this.tooltipStyle = tooltipStyle;
+    }
+
+    @Override
+    public boolean hasItemModel() {
+        return this.itemModel != null;
+    }
+
+    @Override
+    public NamespacedKey getItemModel() {
+        return this.itemModel;
+    }
+
+    @Override
+    public void setItemModel(NamespacedKey itemModel) {
+        this.itemModel = itemModel;
+    }
+
     @Override
     public boolean isUnbreakable() {
         return this.unbreakable;
@@ -1210,14 +1394,39 @@
         this.enchantmentGlintOverride = override;
     }
 
+    @Override
+    public boolean isGlider() {
+        return this.glider;
+    }
+
+    @Override
+    public void setGlider(boolean glider) {
+        this.glider = glider;
+    }
+
     @Override
     public boolean isFireResistant() {
-        return this.fireResistant;
+        return this.hasDamageResistant() && DamageTypeTags.IS_FIRE.equals(this.getDamageResistant());
     }
 
     @Override
     public void setFireResistant(boolean fireResistant) {
-        this.fireResistant = fireResistant;
+        this.setDamageResistant(DamageTypeTags.IS_FIRE);
+    }
+
+    @Override
+    public boolean hasDamageResistant() {
+        return this.damageResistant != null;
+    }
+
+    @Override
+    public Tag<DamageType> getDamageResistant() {
+        return (this.hasDamageResistant()) ? Bukkit.getTag(DamageTypeTags.REGISTRY_DAMAGE_TYPES, CraftNamespacedKey.fromMinecraft(this.damageResistant.location()), DamageType.class) : null;
+    }
+
+    @Override
+    public void setDamageResistant(Tag<DamageType> tag) {
+        this.damageResistant = (tag != null) ? ((CraftDamageTag) tag).getHandle().key() : null;
     }
 
     @Override
@@ -1254,6 +1463,36 @@
         this.rarity = rarity;
     }
 
+    @Override
+    public boolean hasUseRemainder() {
+        return this.useRemainder != null;
+    }
+
+    @Override
+    public ItemStack getUseRemainder() {
+        return this.useRemainder;
+    }
+
+    @Override
+    public void setUseRemainder(ItemStack useRemainder) {
+        this.useRemainder = useRemainder;
+    }
+
+    @Override
+    public boolean hasUseCooldown() {
+        return this.useCooldown != null;
+    }
+
+    @Override
+    public UseCooldownComponent getUseCooldown() {
+        return (this.hasUseCooldown()) ? new CraftUseCooldownComponent(this.useCooldown) : new CraftUseCooldownComponent(new UseCooldown(0));
+    }
+
+    @Override
+    public void setUseCooldown(UseCooldownComponent cooldown) {
+        this.useCooldown = (cooldown == null) ? null : new CraftUseCooldownComponent((CraftUseCooldownComponent) cooldown);
+    }
+
     @Override
     public boolean hasFood() {
         return this.food != null;
@@ -1261,7 +1500,7 @@
 
     @Override
     public FoodComponent getFood() {
-        return (this.hasFood()) ? new CraftFoodComponent(this.food) : new CraftFoodComponent(new FoodProperties(0, 0, false, 0, Optional.empty(), Collections.emptyList()));
+        return (this.hasFood()) ? new CraftFoodComponent(this.food) : new CraftFoodComponent(new FoodProperties(0, 0, false));
     }
 
     @Override
@@ -1284,6 +1523,21 @@
         this.tool = (tool == null) ? null : new CraftToolComponent((CraftToolComponent) tool);
     }
 
+    @Override
+    public boolean hasEquippable() {
+        return this.equippable != null;
+    }
+
+    @Override
+    public EquippableComponent getEquippable() {
+        return (this.hasEquippable()) ? new CraftEquippableComponent(this.equippable) : new CraftEquippableComponent(Equippable.builder(net.minecraft.world.entity.EquipmentSlot.HEAD).build());
+    }
+
+    @Override
+    public void setEquippable(EquippableComponent equippable) {
+        this.equippable = (equippable == null) ? null : new CraftEquippableComponent((CraftEquippableComponent) this.equippable);
+    }
+
     @Override
     public boolean hasJukeboxPlayable() {
         return this.jukebox != null;
@@ -1420,7 +1674,7 @@
         CraftMetaItem.Applicator tag = new CraftMetaItem.Applicator();
         this.applyToItem(tag);
         DataComponentPatch patch = tag.build();
-        Tag nbt = DataComponentPatch.CODEC.encodeStart(BukkitMethodHooks.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), patch).getOrThrow();
+        net.minecraft.nbt.Tag nbt = DataComponentPatch.CODEC.encodeStart(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), patch).getOrThrow();
         return nbt.toString();
     }
 
@@ -1431,8 +1685,8 @@
         DataComponentPatch patch = tag.build();
 
         RegistryAccess registryAccess = CraftRegistry.getMinecraftRegistry();
-        DynamicOps<Tag> ops = registryAccess.createSerializationContext(NbtOps.INSTANCE);
-        Registry<DataComponentType<?>> componentTypeRegistry = registryAccess.registryOrThrow(Registries.DATA_COMPONENT_TYPE);
+        DynamicOps<net.minecraft.nbt.Tag> ops = registryAccess.createSerializationContext(NbtOps.INSTANCE);
+        Registry<DataComponentType<?>> componentTypeRegistry = registryAccess.lookupOrThrow(Registries.DATA_COMPONENT_TYPE);
 
         StringJoiner componentString = new StringJoiner(",", "[", "]");
         for (Entry<DataComponentType<?>, Optional<?>> entry : patch.entrySet()) {
@@ -1441,7 +1695,7 @@
             String componentKey = componentTypeRegistry.getResourceKey(componentType).orElseThrow().location().toString();
 
             if (componentValue.isPresent()) {
-                Tag componentValueAsNBT = (Tag) ((DataComponentType) componentType).codecOrThrow().encodeStart(ops, componentValue.get()).getOrThrow();
+                net.minecraft.nbt.Tag componentValueAsNBT = (net.minecraft.nbt.Tag) ((DataComponentType) componentType).codecOrThrow().encodeStart(ops, componentValue.get()).getOrThrow();
                 String componentValueAsNBTString = new SnbtPrinterTagVisitor("", 0, new ArrayList<>()).visit(componentValueAsNBT);
                 componentString.add(componentKey + "=" + componentValueAsNBTString);
             } else {
@@ -1536,6 +1790,7 @@
                 && (this.hasEnchants() ? that.hasEnchants() && this.enchantments.equals(that.enchantments) : !that.hasEnchants())
                 && (Objects.equals(this.lore, that.lore))
                 && (this.hasCustomModelData() ? that.hasCustomModelData() && this.customModelData.equals(that.customModelData) : !that.hasCustomModelData())
+                && (this.hasEnchantable() ? that.hasEnchantable() && this.enchantableValue.equals(that.enchantableValue) : !that.hasEnchantable())
                 && (this.hasBlockData() ? that.hasBlockData() && this.blockData.equals(that.blockData) : !that.hasBlockData())
                 && (this.hasRepairCost() ? that.hasRepairCost() && this.repairCost == that.repairCost : !that.hasRepairCost())
                 && (this.hasAttributeModifiers() ? that.hasAttributeModifiers() && CraftMetaItem.compareModifiers(this.attributeModifiers, that.attributeModifiers) : !that.hasAttributeModifiers())
@@ -1545,13 +1800,19 @@
                 && (this.persistentDataContainer.equals(that.persistentDataContainer))
                 && (this.hideFlag == that.hideFlag)
                 && (this.isHideTooltip() == that.isHideTooltip())
+                && (this.hasTooltipStyle() ? that.hasTooltipStyle() && this.tooltipStyle.equals(that.tooltipStyle) : !that.hasTooltipStyle())
+                && (this.hasItemModel() ? that.hasItemModel() && this.itemModel.equals(that.itemModel) : !that.hasItemModel())
                 && (this.isUnbreakable() == that.isUnbreakable())
                 && (this.hasEnchantmentGlintOverride() ? that.hasEnchantmentGlintOverride() && this.enchantmentGlintOverride.equals(that.enchantmentGlintOverride) : !that.hasEnchantmentGlintOverride())
-                && (this.fireResistant == that.fireResistant)
+                && (this.glider == that.glider)
+                && (this.hasDamageResistant() ? that.hasDamageResistant() && this.damageResistant.equals(that.damageResistant) : !that.hasDamageResistant())
                 && (this.hasMaxStackSize() ? that.hasMaxStackSize() && this.maxStackSize.equals(that.maxStackSize) : !that.hasMaxStackSize())
                 && (this.rarity == that.rarity)
+                && (this.hasUseRemainder() ? that.hasUseRemainder() && this.useRemainder.equals(that.useRemainder) : !that.hasUseRemainder())
+                && (this.hasUseCooldown() ? that.hasUseCooldown() && this.useCooldown.equals(that.useCooldown) : !that.hasUseCooldown())
                 && (this.hasFood() ? that.hasFood() && this.food.equals(that.food) : !that.hasFood())
                 && (this.hasTool() ? that.hasTool() && this.tool.equals(that.tool) : !that.hasTool())
+                && (this.hasEquippable() ? that.hasEquippable() && this.equippable.equals(that.equippable) : !that.hasEquippable())
                 && (this.hasJukeboxPlayable() ? that.hasJukeboxPlayable() && this.jukebox.equals(that.jukebox) : !that.hasJukeboxPlayable())
                 && (this.hasDamage() ? that.hasDamage() && this.damage == that.damage : !that.hasDamage())
                 && (this.hasMaxDamage() ? that.hasMaxDamage() && this.maxDamage.equals(that.maxDamage) : !that.hasMaxDamage())
@@ -1580,6 +1841,7 @@
         hash = 61 * hash + (this.hasItemName() ? this.itemName.hashCode() : 0);
         hash = 61 * hash + ((this.lore != null) ? this.lore.hashCode() : 0);
         hash = 61 * hash + (this.hasCustomModelData() ? this.customModelData.hashCode() : 0);
+        hash = 61 * hash + (this.hasEnchantable() ? this.enchantableValue.hashCode() : 0);
         hash = 61 * hash + (this.hasBlockData() ? this.blockData.hashCode() : 0);
         hash = 61 * hash + (this.hasEnchants() ? this.enchantments.hashCode() : 0);
         hash = 61 * hash + (this.hasRepairCost() ? this.repairCost : 0);
@@ -1589,14 +1851,20 @@
         hash = 61 * hash + (!this.persistentDataContainer.isEmpty() ? this.persistentDataContainer.hashCode() : 0);
         hash = 61 * hash + this.hideFlag;
         hash = 61 * hash + (this.isHideTooltip() ? 1231 : 1237);
+        hash = 61 * hash + (this.hasTooltipStyle() ? this.tooltipStyle.hashCode() : 0);
+        hash = 61 * hash + (this.hasItemModel() ? this.itemModel.hashCode() : 0);
         hash = 61 * hash + (this.isUnbreakable() ? 1231 : 1237);
         hash = 61 * hash + (this.hasEnchantmentGlintOverride() ? this.enchantmentGlintOverride.hashCode() : 0);
-        hash = 61 * hash + (this.isFireResistant() ? 1231 : 1237);
+        hash = 61 * hash + (this.isGlider() ? 1231 : 1237);
+        hash = 61 * hash + (this.hasDamageResistant() ? this.damageResistant.hashCode() : 0);
         hash = 61 * hash + (this.hasMaxStackSize() ? this.maxStackSize.hashCode() : 0);
         hash = 61 * hash + (this.hasRarity() ? this.rarity.hashCode() : 0);
+        hash = 61 * hash + (this.hasUseRemainder() ? this.useRemainder.hashCode() : 0);
+        hash = 61 * hash + (this.hasUseCooldown() ? this.useCooldown.hashCode() : 0);
         hash = 61 * hash + (this.hasFood() ? this.food.hashCode() : 0);
         hash = 61 * hash + (this.hasTool() ? this.tool.hashCode() : 0);
         hash = 61 * hash + (this.hasJukeboxPlayable() ? this.jukebox.hashCode() : 0);
+        hash = 61 * hash + (this.hasEquippable() ? this.equippable.hashCode() : 0);
         hash = 61 * hash + (this.hasDamage() ? this.damage : 0);
         hash = 61 * hash + (this.hasMaxDamage() ? 1231 : 1237);
         hash = 61 * hash + (this.hasAttributeModifiers() ? this.attributeModifiers.hashCode() : 0);
@@ -1613,6 +1881,7 @@
                 clone.lore = new ArrayList<Component>(this.lore);
             }
             clone.customModelData = this.customModelData;
+            clone.enchantableValue = this.enchantableValue;
             clone.blockData = this.blockData;
             if (this.enchantments != null) {
                 clone.enchantments = new LinkedHashMap<Enchantment, Integer>(this.enchantments);
@@ -1627,17 +1896,29 @@
             clone.persistentDataContainer = new CraftPersistentDataContainer(this.persistentDataContainer.getRaw(), CraftMetaItem.DATA_TYPE_REGISTRY);
             clone.hideFlag = this.hideFlag;
             clone.hideTooltip = this.hideTooltip;
+            clone.tooltipStyle = this.tooltipStyle;
+            clone.itemModel = this.itemModel;
             clone.unbreakable = this.unbreakable;
             clone.enchantmentGlintOverride = this.enchantmentGlintOverride;
-            clone.fireResistant = this.fireResistant;
+            clone.glider = this.glider;
+            clone.damageResistant = this.damageResistant;
             clone.maxStackSize = this.maxStackSize;
             clone.rarity = this.rarity;
+            if (this.hasUseRemainder()) {
+                clone.useRemainder = this.useRemainder.clone();
+            }
+            if (this.hasUseCooldown()) {
+                clone.useCooldown = new CraftUseCooldownComponent(this.useCooldown);
+            }
             if (this.hasFood()) {
                 clone.food = new CraftFoodComponent(this.food);
             }
             if (this.hasTool()) {
                 clone.tool = new CraftToolComponent(this.tool);
             }
+            if (this.hasEquippable()) {
+                clone.equippable = new CraftEquippableComponent(this.equippable);
+            }
             if (this.hasJukeboxPlayable()) {
                 clone.jukebox = new CraftJukeboxComponent(this.jukebox);
             }
@@ -1682,6 +1963,9 @@
         if (this.hasCustomModelData()) {
             builder.put(CraftMetaItem.CUSTOM_MODEL_DATA.BUKKIT, this.customModelData);
         }
+        if (this.hasEnchantable()) {
+            builder.put(CraftMetaItem.ENCHANTABLE.BUKKIT, this.enchantableValue);
+        }
         if (this.hasBlockData()) {
             builder.put(CraftMetaItem.BLOCK_DATA.BUKKIT, this.blockData);
         }
@@ -1705,6 +1989,14 @@
             builder.put(CraftMetaItem.HIDE_TOOLTIP.BUKKIT, this.hideTooltip);
         }
 
+        if (this.hasTooltipStyle()) {
+            builder.put(CraftMetaItem.TOOLTIP_STYLE.BUKKIT, this.tooltipStyle.toString());
+        }
+
+        if (this.hasItemModel()) {
+            builder.put(CraftMetaItem.ITEM_MODEL.BUKKIT, this.itemModel.toString());
+        }
+
         if (this.isUnbreakable()) {
             builder.put(CraftMetaItem.UNBREAKABLE.BUKKIT, this.unbreakable);
         }
@@ -1713,8 +2005,12 @@
             builder.put(CraftMetaItem.ENCHANTMENT_GLINT_OVERRIDE.BUKKIT, this.enchantmentGlintOverride);
         }
 
-        if (this.isFireResistant()) {
-            builder.put(CraftMetaItem.FIRE_RESISTANT.BUKKIT, this.fireResistant);
+        if (this.isGlider()) {
+            builder.put(CraftMetaItem.GLIDER.BUKKIT, this.glider);
+        }
+
+        if (this.hasDamageResistant()) {
+            builder.put(CraftMetaItem.DAMAGE_RESISTANT.BUKKIT, this.damageResistant.location().toString());
         }
 
         if (this.hasMaxStackSize()) {
@@ -1725,6 +2021,14 @@
             builder.put(CraftMetaItem.RARITY.BUKKIT, this.rarity.name());
         }
 
+        if (this.hasUseRemainder()) {
+            builder.put(CraftMetaItem.USE_REMAINDER.BUKKIT, this.useRemainder);
+        }
+
+        if (this.hasUseCooldown()) {
+            builder.put(CraftMetaItem.USE_COOLDOWN.BUKKIT, this.useCooldown);
+        }
+
         if (this.hasFood()) {
             builder.put(CraftMetaItem.FOOD.BUKKIT, this.food);
         }
@@ -1733,6 +2037,10 @@
             builder.put(CraftMetaItem.TOOL.BUKKIT, this.tool);
         }
 
+        if (this.hasEquippable()) {
+            builder.put(CraftMetaItem.EQUIPPABLE.BUKKIT, this.equippable);
+        }
+
         if (this.hasJukeboxPlayable()) {
             builder.put(CraftMetaItem.JUKEBOX_PLAYABLE.BUKKIT, this.jukebox);
         }
@@ -1745,11 +2053,11 @@
             builder.put(CraftMetaItem.MAX_DAMAGE.BUKKIT, this.maxDamage);
         }
 
-        final Map<String, Tag> internalTags = new HashMap<String, Tag>();
+        final Map<String, net.minecraft.nbt.Tag> internalTags = new HashMap<String, net.minecraft.nbt.Tag>();
         this.serializeInternal(internalTags);
         if (!internalTags.isEmpty()) {
             CompoundTag internal = new CompoundTag();
-            for (Map.Entry<String, Tag> e : internalTags.entrySet()) {
+            for (Map.Entry<String, net.minecraft.nbt.Tag> e : internalTags.entrySet()) {
                 internal.put(e.getKey(), e.getValue());
             }
             try {
@@ -1761,8 +2069,8 @@
             }
         }
 
-        if (!this.unhandledTags.build().isEmpty()) {
-            Tag unhandled = DataComponentPatch.CODEC.encodeStart(BukkitMethodHooks.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), this.unhandledTags.build()).getOrThrow(IllegalStateException::new);
+        if (!this.unhandledTags.isEmpty()) {
+            net.minecraft.nbt.Tag unhandled = DataComponentPatch.CODEC.encodeStart(MinecraftServer.getDefaultRegistryAccess().createSerializationContext(NbtOps.INSTANCE), this.unhandledTags.build()).getOrThrow(IllegalStateException::new);
             try {
                 ByteArrayOutputStream buf = new ByteArrayOutputStream();
                 NbtIo.writeCompressed((CompoundTag) unhandled, buf);
@@ -1774,7 +2082,7 @@
 
         if (!this.removedTags.isEmpty()) {
             RegistryAccess registryAccess = CraftRegistry.getMinecraftRegistry();
-            Registry<DataComponentType<?>> componentTypeRegistry = registryAccess.registryOrThrow(Registries.DATA_COMPONENT_TYPE);
+            Registry<DataComponentType<?>> componentTypeRegistry = registryAccess.lookupOrThrow(Registries.DATA_COMPONENT_TYPE);
 
             List<String> removedTags = new ArrayList<>();
             for (DataComponentType<?> removed : this.removedTags) {
@@ -1803,7 +2111,7 @@
         return builder;
     }
 
-    void serializeInternal(final Map<String, Tag> unhandledTags) {
+    void serializeInternal(final Map<String, net.minecraft.nbt.Tag> unhandledTags) {
     }
 
     static void serializeEnchantments(Map<Enchantment, Integer> enchantments, ImmutableMap.Builder<String, Object> builder, ItemMetaKey key) {
@@ -1902,18 +2210,25 @@
                         CraftMetaItem.ITEM_NAME.TYPE,
                         CraftMetaItem.LORE.TYPE,
                         CraftMetaItem.CUSTOM_MODEL_DATA.TYPE,
+                        CraftMetaItem.ENCHANTABLE.TYPE,
                         CraftMetaItem.BLOCK_DATA.TYPE,
                         CraftMetaItem.REPAIR.TYPE,
                         CraftMetaItem.ENCHANTMENTS.TYPE,
                         CraftMetaItem.HIDE_ADDITIONAL_TOOLTIP.TYPE,
                         CraftMetaItem.HIDE_TOOLTIP.TYPE,
+                        CraftMetaItem.TOOLTIP_STYLE.TYPE,
+                        CraftMetaItem.ITEM_MODEL.TYPE,
                         CraftMetaItem.UNBREAKABLE.TYPE,
                         CraftMetaItem.ENCHANTMENT_GLINT_OVERRIDE.TYPE,
-                        CraftMetaItem.FIRE_RESISTANT.TYPE,
+                        CraftMetaItem.GLIDER.TYPE,
+                        CraftMetaItem.DAMAGE_RESISTANT.TYPE,
                         CraftMetaItem.MAX_STACK_SIZE.TYPE,
                         CraftMetaItem.RARITY.TYPE,
+                        CraftMetaItem.USE_REMAINDER.TYPE,
+                        CraftMetaItem.USE_COOLDOWN.TYPE,
                         CraftMetaItem.FOOD.TYPE,
                         CraftMetaItem.TOOL.TYPE,
+                        CraftMetaItem.EQUIPPABLE.TYPE,
                         CraftMetaItem.JUKEBOX_PLAYABLE.TYPE,
                         CraftMetaItem.DAMAGE.TYPE,
                         CraftMetaItem.MAX_DAMAGE.TYPE,
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java	(date 1729674280247)
@@ -3,7 +3,9 @@
 import com.google.common.base.Preconditions;
 import java.util.List;
 import java.util.Optional;
+import net.minecraft.core.component.DataComponentMap;
 import net.minecraft.core.component.DataComponentPredicate;
+import net.minecraft.core.component.PatchedDataComponentMap;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.trading.ItemCost;
 import org.bukkit.inventory.ItemStack;
@@ -35,7 +37,8 @@
                 maxUses,
                 experience,
                 priceMultiplier,
-                demand
+                demand,
+                this
         );
         this.setSpecialPrice(specialPrice);
         this.setExperienceReward(experienceReward);
@@ -115,10 +118,14 @@
         List<ItemStack> ingredients = this.getIngredients();
         Preconditions.checkState(!ingredients.isEmpty(), "No offered ingredients");
         net.minecraft.world.item.ItemStack baseCostA = CraftItemStack.asNMSCopy(ingredients.get(0));
-        this.handle.baseCostA = new ItemCost(baseCostA.getItemHolder(), baseCostA.getCount(), DataComponentPredicate.allOf(baseCostA.getComponents()), baseCostA);
+        DataComponentPredicate baseCostAPredicate = DataComponentPredicate.allOf(PatchedDataComponentMap.fromPatch(DataComponentMap.EMPTY, baseCostA.getComponentsPatch()));
+        this.handle.baseCostA = new ItemCost(baseCostA.getItemHolder(), baseCostA.getCount(), baseCostAPredicate, baseCostA);
         if (ingredients.size() > 1) {
             net.minecraft.world.item.ItemStack costB = CraftItemStack.asNMSCopy(ingredients.get(1));
-            this.handle.costB = Optional.of(new ItemCost(costB.getItemHolder(), costB.getCount(), DataComponentPredicate.allOf(costB.getComponents()), costB));
+            DataComponentPredicate costBPredicate = DataComponentPredicate.allOf(PatchedDataComponentMap.fromPatch(DataComponentMap.EMPTY, costB.getComponentsPatch()));
+            this.handle.costB = Optional.of(new ItemCost(costB.getItemHolder(), costB.getCount(), costBPredicate, costB));
+        } else {
+            this.handle.costB = Optional.empty();
         }
         return this.handle;
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/banner-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java	(date 1729674280316)
@@ -26,7 +26,6 @@
 
 /**
  * The fundamental concepts for this implementation:
- * <ul>
  * <li>Main thread owns {@link #head} and {@link #currentTick}, but it may be read from any thread</li>
  * <li>Main thread exclusively controls {@link #temp} and {@link #pending}.
  *     They are never to be accessed outside of the main thread; alternatives exist to prevent locking.</li>
@@ -42,7 +41,6 @@
  * <li>Sync tasks are only to be removed from runners on the main thread when coupled with a removal from pending and temp.</li>
  * <li>Most of the design in this scheduler relies on queuing special tasks to perform any data changes on the main thread.
  *     When executed from inside a synchronous method, the scheduler will be updated before next execution by virtue of the frequent {@link #parsePending()} calls.</li>
- * </ul>
  */
 public class CraftScheduler implements BukkitScheduler {
 
@@ -397,11 +395,11 @@
     /**
      * This method is designed to never block or wait for locks; an immediate execution of all current tasks.
      */
-    public void mainThreadHeartbeat(final int currentTick) {
-        this.currentTick = currentTick;
+    public void mainThreadHeartbeat() {
+        this.currentTick++;
         final List<CraftTask> temp = this.temp;
         this.parsePending();
-        while (this.isReady(currentTick)) {
+        while (this.isReady(this.currentTick)) {
             final CraftTask task = this.pending.remove();
             if (task.getPeriod() < CraftTask.NO_REPEATING) {
                 if (task.isSync()) {
@@ -429,14 +427,14 @@
                 }
                 this.parsePending();
             } else {
-                this.debugTail = this.debugTail.setNext(new CraftAsyncDebugger(currentTick + CraftScheduler.RECENT_TICKS, task.getOwner(), task.getTaskClass()));
+                this.debugTail = this.debugTail.setNext(new CraftAsyncDebugger(this.currentTick + CraftScheduler.RECENT_TICKS, task.getOwner(), task.getTaskClass()));
                 this.executor.execute(task);
                 // We don't need to parse pending
                 // (async tasks must live with race-conditions if they attempt to cancel between these few lines of code)
             }
             final long period = task.getPeriod(); // State consistency
             if (period > 0) {
-                task.setNextRun(currentTick + period);
+                task.setNextRun(this.currentTick + period);
                 temp.add(task);
             } else if (task.isSync()) {
                 this.runners.remove(task.getTaskId());
@@ -444,7 +442,7 @@
         }
         this.pending.addAll(temp);
         temp.clear();
-        this.debugHead = this.debugHead.getNextHead(currentTick);
+        this.debugHead = this.debugHead.getNextHead(this.currentTick);
     }
 
     private void addTask(final CraftTask task) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java	(date 1729674280132)
@@ -137,7 +137,7 @@
 
     @Override
     public boolean hasBasePlate() {
-        return !this.getHandle().isNoBasePlate();
+        return this.getHandle().showBasePlate();
     }
 
     @Override
@@ -164,7 +164,7 @@
 
     @Override
     public boolean hasArms() {
-        return this.getHandle().isShowArms();
+        return this.getHandle().showArms();
     }
 
     @Override
@@ -210,16 +210,16 @@
 
     @Override
     public void addEquipmentLock(EquipmentSlot equipmentSlot, LockType lockType) {
-        this.getHandle().disabledSlots |= (1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterFlag() + lockType.ordinal() * 8);
+        this.getHandle().disabledSlots |= (1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterBit(lockType.ordinal() * 8));
     }
 
     @Override
     public void removeEquipmentLock(EquipmentSlot equipmentSlot, LockType lockType) {
-        this.getHandle().disabledSlots &= ~(1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterFlag() + lockType.ordinal() * 8);
+        this.getHandle().disabledSlots &= ~(1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterBit(lockType.ordinal() * 8));
     }
 
     @Override
     public boolean hasEquipmentLock(EquipmentSlot equipmentSlot, LockType lockType) {
-        return (this.getHandle().disabledSlots & (1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterFlag() + lockType.ordinal() * 8)) != 0;
+        return (this.getHandle().disabledSlots & (1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterBit(lockType.ordinal() * 8))) != 0;
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftServer.java	(date 1729674280017)
@@ -8,10 +8,6 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
-import com.mohistmc.banner.BannerMCStart;
-import com.mohistmc.banner.BannerMod;
-import com.mohistmc.banner.bukkit.BukkitFieldHooks;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -48,13 +44,11 @@
 import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 import jline.console.ConsoleReader;
-import net.fabricmc.loader.api.FabricLoader;
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.EntityArgument;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.NonNullList;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
@@ -67,11 +61,14 @@
 import net.minecraft.server.ReloadableServerRegistries;
 import net.minecraft.server.WorldLoader;
 import net.minecraft.server.bossevents.CustomBossEvent;
+import net.minecraft.server.commands.ReloadCommand;
 import net.minecraft.server.dedicated.DedicatedPlayerList;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
+import net.minecraft.server.dedicated.DedicatedServerSettings;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.TicketType;
 import net.minecraft.server.players.IpBanListEntry;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.ServerOpListEntry;
@@ -81,6 +78,7 @@
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.world.Difficulty;
+import net.minecraft.world.damagesource.DamageType;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.entity.npc.CatSpawner;
@@ -116,9 +114,26 @@
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.validation.ContentValidationException;
 import net.minecraft.world.phys.Vec3;
-import org.bukkit.*;
+import org.bukkit.BanList;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.GameMode;
+import org.bukkit.Keyed;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.Registry;
+import org.bukkit.Server;
+import org.bukkit.ServerLinks;
+import org.bukkit.ServerTickManager;
+import org.bukkit.StructureType;
+import org.bukkit.UnsafeValues;
 import org.bukkit.Warning.WarningState;
+import org.bukkit.World;
 import org.bukkit.World.Environment;
+import org.bukkit.WorldBorder;
+import org.bukkit.WorldCreator;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.boss.BarColor;
 import org.bukkit.boss.BarFlag;
@@ -163,6 +178,7 @@
 import org.bukkit.craftbukkit.inventory.CraftSmithingTrimRecipe;
 import org.bukkit.craftbukkit.inventory.CraftSmokingRecipe;
 import org.bukkit.craftbukkit.inventory.CraftStonecuttingRecipe;
+import org.bukkit.craftbukkit.inventory.CraftTransmuteRecipe;
 import org.bukkit.craftbukkit.inventory.RecipeIterator;
 import org.bukkit.craftbukkit.inventory.util.CraftInventoryCreator;
 import org.bukkit.craftbukkit.map.CraftMapColorCache;
@@ -179,10 +195,19 @@
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
 import org.bukkit.craftbukkit.structure.CraftStructureManager;
 import org.bukkit.craftbukkit.tag.CraftBlockTag;
+import org.bukkit.craftbukkit.tag.CraftDamageTag;
 import org.bukkit.craftbukkit.tag.CraftEntityTag;
 import org.bukkit.craftbukkit.tag.CraftFluidTag;
 import org.bukkit.craftbukkit.tag.CraftItemTag;
-import org.bukkit.craftbukkit.util.*;
+import org.bukkit.craftbukkit.util.ApiVersion;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftIconCache;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.CraftSpawnCategory;
+import org.bukkit.craftbukkit.util.DatFileFilter;
+import org.bukkit.craftbukkit.util.Versioning;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
@@ -190,6 +215,7 @@
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.event.server.BroadcastMessageEvent;
+import org.bukkit.event.server.ServerLoadEvent;
 import org.bukkit.event.server.TabCompleteEvent;
 import org.bukkit.event.world.WorldLoadEvent;
 import org.bukkit.event.world.WorldUnloadEvent;
@@ -214,6 +240,7 @@
 import org.bukkit.inventory.SmithingTrimRecipe;
 import org.bukkit.inventory.SmokingRecipe;
 import org.bukkit.inventory.StonecuttingRecipe;
+import org.bukkit.inventory.TransmuteRecipe;
 import org.bukkit.loot.LootTable;
 import org.bukkit.map.MapPalette;
 import org.bukkit.map.MapView;
@@ -231,19 +258,20 @@
 import org.bukkit.plugin.messaging.Messenger;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.profile.PlayerProfile;
+import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
-import com.mohistmc.org.yaml.snakeyaml .LoaderOptions;
-import com.mohistmc.org.yaml.snakeyaml .Yaml;
-import com.mohistmc.org.yaml.snakeyaml .constructor.SafeConstructor;
-import com.mohistmc.org.yaml.snakeyaml .error.MarkedYAMLException;
+import org.yaml.snakeyaml.LoaderOptions;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.SafeConstructor;
+import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 
 public final class CraftServer implements Server {
-    private final String serverName = "Banner";
+    private final String serverName = "CraftBukkit";
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -298,7 +326,7 @@
                 return player.getBukkitEntity();
             }
         }));
-        this.serverVersion = BannerMCStart.getVersion();
+        this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
         this.structureManager = new CraftStructureManager(console.getStructureManager(), console.registryAccess());
         this.dataPackManager = new CraftDataPackManager(this.getServer().getPackRepository());
         this.serverTickManager = new CraftServerTickManager(console.tickRateManager());
@@ -352,12 +380,13 @@
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
         this.pluginManager.useTimings(this.configuration.getBoolean("settings.plugin-profiling"));
         this.overrideSpawnLimits();
-        console.banner$setAutosavePeriod(this.configuration.getInt("ticks-per.autosave"));
+        console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
         this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
-        BukkitFieldHooks.pluginTicket().timeout = this.configuration.getInt("chunk-gc.period-in-ticks");
+        TicketType.PLUGIN.timeout = this.configuration.getInt("chunk-gc.period-in-ticks");
         this.minimumAPI = ApiVersion.getOrCreateVersion(this.configuration.getString("settings.minimum-api"));
         this.loadIcon();
         this.loadCompatibilities();
+        CraftMagicNumbers.INSTANCE.getCommodore().updateReroute(activeCompatibilities::contains);
 
         // Set map color cache
         if (this.configuration.getBoolean("settings.use-map-color-cache")) {
@@ -370,11 +399,11 @@
     }
 
     private File getConfigFile() {
-        return (File) this.console.bridge$options().valueOf("bukkit-settings");
+        return (File) this.console.options.valueOf("bukkit-settings");
     }
 
     private File getCommandsConfigFile() {
-        return (File) this.console.bridge$options().valueOf("commands-settings");
+        return (File) this.console.options.valueOf("commands-settings");
     }
 
     private void overrideSpawnLimits() {
@@ -385,6 +414,22 @@
         }
     }
 
+    private void saveConfig() {
+        try {
+            this.configuration.save(this.getConfigFile());
+        } catch (IOException ex) {
+            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getConfigFile(), ex);
+        }
+    }
+
+    private void saveCommandsConfig() {
+        try {
+            this.commandsConfiguration.save(this.getCommandsConfigFile());
+        } catch (IOException ex) {
+            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getCommandsConfigFile(), ex);
+        }
+    }
+
     private void loadCompatibilities() {
         ConfigurationSection compatibilities = this.configuration.getConfigurationSection("settings.compatibility");
         if (compatibilities == null) {
@@ -412,48 +457,10 @@
         }
     }
 
-    private void saveConfig() {
-        try {
-            this.configuration.save(this.getConfigFile());
-        } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getConfigFile(), ex);
-        }
-    }
-
-    private void saveCommandsConfig() {
-        try {
-            this.commandsConfiguration.save(this.getCommandsConfigFile());
-        } catch (IOException ex) {
-            Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, "Could not save " + this.getCommandsConfigFile(), ex);
-        }
-    }
-
     public void loadPlugins() {
         this.pluginManager.registerInterface(JavaPluginLoader.class);
 
-        File pluginFolder = (File) this.console.bridge$options().valueOf("plugins");
-
-        if (pluginFolder.exists()) {
-            Plugin[] plugins = this.pluginManager.loadPlugins(pluginFolder);
-            for (Plugin plugin : plugins) {
-                try {
-                    String message = String.format("Loading %s", plugin.getDescription().getFullName());
-                    plugin.getLogger().info(message);
-                    plugin.onLoad();
-                } catch (Throwable ex) {
-                    Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE, ex.getMessage() + " initializing " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
-                }
-            }
-        } else {
-            pluginFolder.mkdir();
-        }
-        loadBannerPlugin();
-    }
-
-    public void loadBannerPlugin() {
-        this.pluginManager.registerInterface(JavaPluginLoader.class);
-
-        File pluginFolder = new File(FabricLoader.getInstance().getGameDir().toFile(), ".banner/plugin_file");
+        File pluginFolder = (File) this.console.options.valueOf("plugins");
 
         if (pluginFolder.exists()) {
             Plugin[] plugins = this.pluginManager.loadPlugins(pluginFolder);
@@ -505,7 +512,7 @@
     }
 
     private void setVanillaCommands(boolean first) { // Spigot
-        Commands dispatcher = this.console.bridge$getVanillaCommands();
+        Commands dispatcher = this.console.vanillaCommandDispatcher;
 
         // Build a list of all Vanilla commands and create wrappers
         for (CommandNode<CommandSourceStack> cmd : dispatcher.getDispatcher().getRoot().getChildren()) {
@@ -523,11 +530,11 @@
     }
 
     public void syncCommands() {
-        // Clear existing commands // Banner - do not clear
-        Commands dispatcher = console.resources.managers().commands;
+        // Clear existing commands
+        Commands dispatcher = this.console.resources.managers().commands = new Commands();
 
         // Register all commands, vanilla ones will be using the old dispatcher references
-        for (Map.Entry<String, Command> entry : commandMap.getKnownCommands().entrySet()) {
+        for (Map.Entry<String, Command> entry : this.commandMap.getKnownCommands().entrySet()) {
             String label = entry.getKey();
             Command command = entry.getValue();
 
@@ -549,7 +556,7 @@
         }
 
         // Refresh commands
-        for (ServerPlayer player : getHandle().players) {
+        for (ServerPlayer player : this.getHandle().players) {
             dispatcher.sendCommands(player);
         }
     }
@@ -590,14 +597,6 @@
 
     @Override
     public List<CraftPlayer> getOnlinePlayers() {
-        // Banner start - refresh online players
-        this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, new Function<ServerPlayer, CraftPlayer>() {
-            @Override
-            public CraftPlayer apply(ServerPlayer player) {
-                return player.getBukkitEntity();
-            }
-        }));
-        // Banner end
         return this.playerView;
     }
 
@@ -612,10 +611,10 @@
             return found;
         }
 
-        String lowerName = name.toLowerCase(java.util.Locale.ENGLISH);
+        String lowerName = name.toLowerCase(Locale.ROOT);
         int delta = Integer.MAX_VALUE;
         for (Player player : this.getOnlinePlayers()) {
-            if (player.getName().toLowerCase(java.util.Locale.ENGLISH).startsWith(lowerName)) {
+            if (player.getName().toLowerCase(Locale.ROOT).startsWith(lowerName)) {
                 int curDelta = Math.abs(player.getName().length() - lowerName.length());
                 if (curDelta < delta) {
                     found = player;
@@ -669,7 +668,7 @@
                 matchedPlayers.add(iterPlayer);
                 break;
             }
-            if (iterPlayerName.toLowerCase(java.util.Locale.ENGLISH).contains(partialName.toLowerCase(java.util.Locale.ENGLISH))) {
+            if (iterPlayerName.toLowerCase(Locale.ROOT).contains(partialName.toLowerCase(Locale.ROOT))) {
                 // Partial match
                 matchedPlayers.add(iterPlayer);
             }
@@ -813,7 +812,7 @@
 
     @Override
     public File getUpdateFolderFile() {
-        return new File((File) this.console.bridge$options().valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
+        return new File((File) this.console.options.valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
     }
 
     @Override
@@ -936,12 +935,91 @@
 
     @Override
     public void reload() {
-        BannerMod.LOGGER.warn("For your server security, Bukkit reloading is not supported by Banner.");
+        this.reloadCount++;
+        this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
+        this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
+
+        this.console.settings = new DedicatedServerSettings(this.console.options);
+        DedicatedServerProperties config = this.console.settings.getProperties();
+
+        this.console.setPvpAllowed(config.pvp);
+        this.console.setFlightAllowed(config.allowFlight);
+        this.console.setMotd(config.motd);
+        this.overrideSpawnLimits();
+        this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
+        TicketType.PLUGIN.timeout = this.configuration.getInt("chunk-gc.period-in-ticks");
+        this.minimumAPI = ApiVersion.getOrCreateVersion(this.configuration.getString("settings.minimum-api"));
+        this.printSaveWarning = false;
+        this.console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
+        this.loadIcon();
+        this.loadCompatibilities();
+        CraftMagicNumbers.INSTANCE.getCommodore().updateReroute(activeCompatibilities::contains);
+
+        try {
+            this.playerList.getIpBans().load();
+        } catch (IOException ex) {
+            this.logger.log(Level.WARNING, "Failed to load banned-ips.json, " + ex.getMessage());
+        }
+        try {
+            this.playerList.getBans().load();
+        } catch (IOException ex) {
+            this.logger.log(Level.WARNING, "Failed to load banned-players.json, " + ex.getMessage());
+        }
+
+        org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
+        for (ServerLevel world : this.console.getAllLevels()) {
+            world.serverLevelData.setDifficulty(config.difficulty);
+            world.setSpawnSettings(config.spawnMonsters);
+
+            for (SpawnCategory spawnCategory : SpawnCategory.values()) {
+                if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+                    long ticksPerCategorySpawn = this.getTicksPerSpawns(spawnCategory);
+                    if (ticksPerCategorySpawn < 0) {
+                        world.ticksPerSpawnCategory.put(spawnCategory, CraftSpawnCategory.getDefaultTicksPerSpawn(spawnCategory));
+                    } else {
+                        world.ticksPerSpawnCategory.put(spawnCategory, ticksPerCategorySpawn);
+                    }
+                }
+            }
+            world.spigotConfig.init(); // Spigot
+        }
+
+        this.pluginManager.clearPlugins();
+        this.commandMap.clearCommands();
+        this.reloadData();
+        org.spigotmc.SpigotConfig.registerCommands(); // Spigot
+        this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
+        this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
+
+        int pollCount = 0;
+
+        // Wait for at most 2.5 seconds for plugins to close their threads
+        while (pollCount < 50 && this.getScheduler().getActiveWorkers().size() > 0) {
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {}
+            pollCount++;
+        }
+
+        List<BukkitWorker> overdueWorkers = this.getScheduler().getActiveWorkers();
+        for (BukkitWorker worker : overdueWorkers) {
+            Plugin plugin = worker.getOwner();
+            this.getLogger().log(Level.SEVERE, String.format(
+                "Nag author(s): '%s' of '%s' about the following: %s",
+                plugin.getDescription().getAuthors(),
+                plugin.getDescription().getFullName(),
+                "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
+            ));
+        }
+        this.loadPlugins();
+        this.enablePlugins(PluginLoadOrder.STARTUP);
+        this.enablePlugins(PluginLoadOrder.POSTWORLD);
+        this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
     }
 
     @Override
     public void reloadData() {
-        BukkitMethodHooks.reload(this.console);
+        ReloadCommand.reload(this.console);
     }
 
     private void loadIcon() {
@@ -1114,9 +1192,9 @@
         boolean hardcore = creator.hardcore();
 
         PrimaryLevelData worlddata;
-        WorldLoader.DataLoadContext worldloader_a = this.console.bridge$worldLoader();
+        WorldLoader.DataLoadContext worldloader_a = this.console.worldLoader;
         RegistryAccess.Frozen iregistrycustom_dimension = worldloader_a.datapackDimensions();
-        net.minecraft.core.Registry<LevelStem> iregistry = iregistrycustom_dimension.registryOrThrow(Registries.LEVEL_STEM);
+        net.minecraft.core.Registry<LevelStem> iregistry = iregistrycustom_dimension.lookupOrThrow(Registries.LEVEL_STEM);
         if (dynamic != null) {
             LevelDataAndDimensions leveldataanddimensions = LevelStorageSource.getLevelDataAndDimensions(dynamic, worldloader_a.dataConfiguration(), iregistry, worldloader_a.datapackWorldgen());
 
@@ -1129,7 +1207,7 @@
 
             DedicatedServerProperties.WorldDimensionData properties = new DedicatedServerProperties.WorldDimensionData(GsonHelper.parse((creator.generatorSettings().isEmpty()) ? "{}" : creator.generatorSettings()), creator.type().name().toLowerCase(Locale.ROOT));
 
-            worldsettings = new LevelSettings(name, GameType.byId(this.getDefaultGameMode().getValue()), hardcore, Difficulty.EASY, false, new GameRules(), worldloader_a.dataConfiguration());
+            worldsettings = new LevelSettings(name, GameType.byId(this.getDefaultGameMode().getValue()), hardcore, Difficulty.EASY, false, new GameRules(worldloader_a.dataConfiguration().enabledFeatures()), worldloader_a.dataConfiguration());
             worlddimensions = properties.create(worldloader_a.datapackWorldgen());
 
             WorldDimensions.Complete worlddimensions_b = worlddimensions.bake(iregistry);
@@ -1138,18 +1216,18 @@
             worlddata = new PrimaryLevelData(worldsettings, worldoptions, worlddimensions_b.specialWorldProperty(), lifecycle);
             iregistrycustom_dimension = worlddimensions_b.dimensionsRegistryAccess();
         }
-        iregistry = iregistrycustom_dimension.registryOrThrow(Registries.LEVEL_STEM);
-        worlddata.banner$setCustomDimensions(iregistry);
+        iregistry = iregistrycustom_dimension.lookupOrThrow(Registries.LEVEL_STEM);
+        worlddata.customDimensions = iregistry;
         worlddata.checkName(name);
         worlddata.setModdedInfo(this.console.getServerModName(), this.console.getModdedStatus().shouldReportAsModified());
 
-        if (this.console.bridge$options().has("forceUpgrade")) {
-            net.minecraft.server.Main.forceUpgrade(worldSession, DataFixers.getDataFixer(), this.console.bridge$options().has("eraseCache"), () -> true, iregistrycustom_dimension, this.console.bridge$options().has("recreateRegionFiles"));
+        if (this.console.options.has("forceUpgrade")) {
+            net.minecraft.server.Main.forceUpgrade(worldSession, DataFixers.getDataFixer(), this.console.options.has("eraseCache"), () -> true, iregistrycustom_dimension, this.console.options.has("recreateRegionFiles"));
         }
 
         long j = BiomeManager.obfuscateSeed(creator.seed());
         List<CustomSpawner> list = ImmutableList.of(new PhantomSpawner(), new PatrolSpawner(), new CatSpawner(), new VillageSiege(), new WanderingTraderSpawner(worlddata));
-        LevelStem worlddimension = iregistry.get(actualDimension);
+        LevelStem worlddimension = iregistry.getValue(actualDimension);
 
         WorldInfo worldInfo = new CraftWorldInfo(worlddata, worldSession, creator.environment(), worlddimension.type().value());
         if (biomeProvider == null && generator != null) {
@@ -1163,26 +1241,23 @@
         } else if (name.equals(levelName + "_the_end")) {
             worldKey = net.minecraft.world.level.Level.END;
         } else {
-            worldKey = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace(name.toLowerCase(java.util.Locale.ENGLISH)));
+            worldKey = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace(name.toLowerCase(Locale.ROOT)));
         }
 
         // If set to not keep spawn in memory (changed from default) then adjust rule accordingly
         if (!creator.keepSpawnInMemory()) {
             worlddata.getGameRules().getRule(GameRules.RULE_SPAWN_CHUNK_RADIUS).set(0, null);
         }
-        ServerLevel internal = new ServerLevel(console, console.executor, worldSession, worlddata, worldKey, worlddimension, getServer().progressListenerFactory.create(11),
-                worlddata.isDebugWorld(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, console.overworld().getRandomSequences());
+        ServerLevel internal = (ServerLevel) new ServerLevel(this.console, this.console.executor, worldSession, worlddata, worldKey, worlddimension, this.getServer().progressListenerFactory.create(worlddata.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS)),
+                worlddata.isDebugWorld(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, this.console.overworld().getRandomSequences(), creator.environment(), generator, biomeProvider);
 
-        name = name.contains("DIM") ? name : name.toLowerCase(java.util.Locale.ENGLISH);
-        internal.banner$setGenerator(generator);
-        internal.banner$setBiomeProvider(biomeProvider);
-        if (!(this.worlds.containsKey(name.toLowerCase(java.util.Locale.ENGLISH)))) {
+        if (!(this.worlds.containsKey(name.toLowerCase(Locale.ROOT)))) {
             return null;
         }
 
         this.console.initWorld(internal, worlddata, worlddata, worlddata.worldGenOptions());
 
-        internal.setSpawnSettings(true, true);
+        internal.setSpawnSettings(true);
         this.console.addLevel(internal);
 
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
@@ -1231,12 +1306,12 @@
 
             handle.getChunkSource().close(save);
             handle.entityManager.close(save); // SPIGOT-6722: close entityManager
-            handle.bridge$convertable().close();
+            handle.convertable.close();
         } catch (Exception ex) {
             this.getLogger().log(Level.SEVERE, null, ex);
         }
 
-        this.worlds.remove(world.getName().toLowerCase(java.util.Locale.ENGLISH));
+        this.worlds.remove(world.getName().toLowerCase(Locale.ROOT));
         this.console.removeLevel(handle);
         return true;
     }
@@ -1249,7 +1324,7 @@
     public World getWorld(String name) {
         Preconditions.checkArgument(name != null, "name cannot be null");
 
-        return this.worlds.get(name.toLowerCase(java.util.Locale.ENGLISH));
+        return this.worlds.get(name.toLowerCase(Locale.ROOT));
     }
 
     @Override
@@ -1268,7 +1343,7 @@
             System.out.println("World " + world.getName() + " is a duplicate of another world and has been prevented from loading. Please delete the uid.dat file from " + world.getName() + "'s world directory if you want to be able to load the duplicate world.");
             return;
         }
-        this.worlds.put(world.getName().toLowerCase(java.util.Locale.ENGLISH), world);
+        this.worlds.put(world.getName().toLowerCase(Locale.ROOT), world);
     }
 
     @Override
@@ -1282,7 +1357,7 @@
     }
 
     public ConsoleReader getReader() {
-        return this.console.bridge$reader();
+        return this.console.reader;
     }
 
     @Override
@@ -1326,6 +1401,8 @@
                 toAdd = CraftSmithingTransformRecipe.fromBukkitRecipe((SmithingTransformRecipe) recipe);
             } else if (recipe instanceof SmithingTrimRecipe) {
                 toAdd = CraftSmithingTrimRecipe.fromBukkitRecipe((SmithingTrimRecipe) recipe);
+            } else if (recipe instanceof TransmuteRecipe) {
+                toAdd = CraftTransmuteRecipe.fromBukkitRecipe((TransmuteRecipe) recipe);
             } else if (recipe instanceof ComplexRecipe) {
                 throw new UnsupportedOperationException("Cannot add custom complex recipe");
             } else {
@@ -1359,7 +1436,7 @@
     public Recipe getRecipe(NamespacedKey recipeKey) {
         Preconditions.checkArgument(recipeKey != null, "NamespacedKey recipeKey cannot be null");
 
-        return this.getServer().getRecipeManager().byKey(CraftNamespacedKey.toMinecraft(recipeKey)).map(RecipeHolder::toBukkitRecipe).orElse(null);
+        return this.getServer().getRecipeManager().byKey(CraftRecipe.toMinecraft(recipeKey)).map(RecipeHolder::toBukkitRecipe).orElse(null);
     }
 
     private CraftingContainer createInventoryCrafting() {
@@ -1414,7 +1491,7 @@
 
         if (recipe.isPresent()) {
             RecipeHolder<CraftingRecipe> recipeCrafting = recipe.get();
-            if (craftResult.setRecipeUsed(craftWorld.getHandle(), craftPlayer.getHandle(), recipeCrafting)) {
+            if (craftResult.setRecipeUsed(craftPlayer.getHandle(), recipeCrafting)) {
                 itemstack = recipeCrafting.value().assemble(inventoryCrafting.asCraftInput(), craftWorld.getHandle().registryAccess());
             }
         }
@@ -1422,7 +1499,7 @@
         // Call Bukkit event to check for matrix/result changes.
         net.minecraft.world.item.ItemStack result = CraftEventFactory.callPreCraftEvent(inventoryCrafting, craftResult, itemstack, container.getBukkitView(), recipe.map(RecipeHolder::value).orElse(null) instanceof RepairItemRecipe);
 
-        return this.createItemCraftResult(CraftItemStack.asBukkitCopy(result), inventoryCrafting, craftWorld.getHandle());
+        return this.createItemCraftResult(recipe, CraftItemStack.asBukkitCopy(result), inventoryCrafting, craftWorld.getHandle());
     }
 
     @Override
@@ -1448,34 +1525,34 @@
             itemStack = recipe.get().value().assemble(inventoryCrafting.asCraftInput(), craftWorld.getHandle().registryAccess());
         }
 
-        return this.createItemCraftResult(CraftItemStack.asBukkitCopy(itemStack), inventoryCrafting, craftWorld.getHandle());
+        return this.createItemCraftResult(recipe, CraftItemStack.asBukkitCopy(itemStack), inventoryCrafting, craftWorld.getHandle());
     }
 
-    private CraftItemCraftResult createItemCraftResult(ItemStack itemStack, CraftingContainer inventoryCrafting, ServerLevel worldServer) {
+    private CraftItemCraftResult createItemCraftResult(Optional<RecipeHolder<CraftingRecipe>> recipe, ItemStack itemStack, CraftingContainer inventoryCrafting, ServerLevel worldServer) {
         CraftItemCraftResult craftItemResult = new CraftItemCraftResult(itemStack);
-        NonNullList<net.minecraft.world.item.ItemStack> remainingItems = this.getServer().getRecipeManager().getRemainingItemsFor(RecipeType.CRAFTING, inventoryCrafting.asCraftInput(), worldServer);
-
-        // Set the resulting matrix items and overflow items
-        for (int i = 0; i < remainingItems.size(); ++i) {
-            net.minecraft.world.item.ItemStack itemstack1 = inventoryCrafting.getItem(i);
-            net.minecraft.world.item.ItemStack itemstack2 = (net.minecraft.world.item.ItemStack) remainingItems.get(i);
+        recipe.map((holder) -> holder.value().getRemainingItems(inventoryCrafting.asCraftInput())).ifPresent((remainingItems) -> {
+            // Set the resulting matrix items and overflow items
+            for (int i = 0; i < remainingItems.size(); ++i) {
+                net.minecraft.world.item.ItemStack itemstack1 = inventoryCrafting.getItem(i);
+                net.minecraft.world.item.ItemStack itemstack2 = (net.minecraft.world.item.ItemStack) remainingItems.get(i);
 
-            if (!itemstack1.isEmpty()) {
-                inventoryCrafting.removeItem(i, 1);
-                itemstack1 = inventoryCrafting.getItem(i);
-            }
+                if (!itemstack1.isEmpty()) {
+                    inventoryCrafting.removeItem(i, 1);
+                    itemstack1 = inventoryCrafting.getItem(i);
+                }
 
-            if (!itemstack2.isEmpty()) {
-                if (itemstack1.isEmpty()) {
-                    inventoryCrafting.setItem(i, itemstack2);
-                } else if (net.minecraft.world.item.ItemStack.isSameItemSameComponents(itemstack1, itemstack2)) {
-                    itemstack2.grow(itemstack1.getCount());
-                    inventoryCrafting.setItem(i, itemstack2);
-                } else {
-                    craftItemResult.getOverflowItems().add(CraftItemStack.asBukkitCopy(itemstack2));
-                }
-            }
-        }
+                if (!itemstack2.isEmpty()) {
+                    if (itemstack1.isEmpty()) {
+                        inventoryCrafting.setItem(i, itemstack2);
+                    } else if (net.minecraft.world.item.ItemStack.isSameItemSameComponents(itemstack1, itemstack2)) {
+                        itemstack2.grow(itemstack1.getCount());
+                        inventoryCrafting.setItem(i, itemstack2);
+                    } else {
+                        craftItemResult.getOverflowItems().add(CraftItemStack.asBukkitCopy(itemstack2));
+                    }
+                }
+            }
+        });
 
         for (int i = 0; i < inventoryCrafting.getContents().size(); i++) {
             craftItemResult.setResultMatrix(i, CraftItemStack.asBukkitCopy(inventoryCrafting.getItem(i)));
@@ -1515,8 +1592,7 @@
     public boolean removeRecipe(NamespacedKey recipeKey) {
         Preconditions.checkArgument(recipeKey != null, "recipeKey == null");
 
-        ResourceLocation mcKey = CraftNamespacedKey.toMinecraft(recipeKey);
-        return this.getServer().getRecipeManager().removeRecipe(mcKey);
+        return this.getServer().getRecipeManager().removeRecipe(CraftRecipe.toMinecraft(recipeKey));
     }
 
     @Override
@@ -1680,7 +1756,7 @@
         if (worldmap == null) {
             return null;
         }
-        return worldmap.bridge$mapView();
+        return worldmap.mapView;
     }
 
     @Override
@@ -1691,7 +1767,7 @@
         // creates a new map at world spawn with the scale of 3, with out tracking position and unlimited tracking
         BlockPos spawn = minecraftWorld.getLevelData().getSpawnPos();
         MapId newId = MapItem.createNewSavedData(minecraftWorld, spawn.getX(), spawn.getZ(), 3, false, false, minecraftWorld.dimension());
-        return minecraftWorld.getMapData(newId).bridge$mapView();
+        return minecraftWorld.getMapData(newId).mapView;
     }
 
     @Override
@@ -1930,7 +2006,7 @@
 
     @Override
     public ConsoleCommandSender getConsoleSender() {
-        return this.console.bridge$console();
+        return this.console.console;
     }
 
     public EntityMetadataStore getEntityMetadata() {
@@ -2196,7 +2272,7 @@
     }
 
     public void checkSaveState() {
-        if (this.playerCommandState || this.printSaveWarning || console.bridge$autosavePeriod() <= 0) {
+        if (this.playerCommandState || this.printSaveWarning || this.console.autosavePeriod <= 0) {
             return;
         }
         this.printSaveWarning = true;
@@ -2249,7 +2325,7 @@
     public ChunkGenerator.ChunkData createChunkData(World world) {
         Preconditions.checkArgument(world != null, "World cannot be null");
         ServerLevel handle = ((CraftWorld) world).getHandle();
-        return new OldCraftChunkData(world.getMinHeight(), world.getMaxHeight(), handle.registryAccess().registryOrThrow(Registries.BIOME));
+        return new OldCraftChunkData(world.getMinHeight(), world.getMaxHeight(), handle.registryAccess().lookupOrThrow(Registries.BIOME));
     }
 
     @Override
@@ -2328,7 +2404,7 @@
         Preconditions.checkArgument(key != null, "NamespacedKey key cannot be null");
 
         AdvancementHolder advancement = this.console.getAdvancements().get(CraftNamespacedKey.toMinecraft(key));
-        return (advancement == null) ? null : advancement.bridge$bukkit();
+        return (advancement == null) ? null : advancement.toBukkit();
     }
 
     @Override
@@ -2336,7 +2412,7 @@
         return Iterators.unmodifiableIterator(Iterators.transform(this.console.getAdvancements().getAllAdvancements().iterator(), new Function<AdvancementHolder, org.bukkit.advancement.Advancement>() {
             @Override
             public org.bukkit.advancement.Advancement apply(AdvancementHolder advancement) {
-                return advancement.bridge$bukkit();
+                return advancement.toBukkit();
             }
         }));
     }
@@ -2363,7 +2439,7 @@
     public BlockData createBlockData(String data) throws IllegalArgumentException {
         Preconditions.checkArgument(data != null, "data cannot be null");
 
-        return this.createBlockData(null, data);
+        return this.createBlockData((Material) null, data);
     }
 
     @Override
@@ -2385,31 +2461,39 @@
             case org.bukkit.Tag.REGISTRY_BLOCKS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Block namespace (%s) must have material type", clazz.getName());
                 TagKey<Block> blockTagKey = TagKey.create(Registries.BLOCK, key);
-                if (BuiltInRegistries.BLOCK.getTag(blockTagKey).isPresent()) {
+                if (BuiltInRegistries.BLOCK.get(blockTagKey).isPresent()) {
                     return (org.bukkit.Tag<T>) new CraftBlockTag(BuiltInRegistries.BLOCK, blockTagKey);
                 }
             }
             case org.bukkit.Tag.REGISTRY_ITEMS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Item namespace (%s) must have material type", clazz.getName());
                 TagKey<Item> itemTagKey = TagKey.create(Registries.ITEM, key);
-                if (BuiltInRegistries.ITEM.getTag(itemTagKey).isPresent()) {
+                if (BuiltInRegistries.ITEM.get(itemTagKey).isPresent()) {
                     return (org.bukkit.Tag<T>) new CraftItemTag(BuiltInRegistries.ITEM, itemTagKey);
                 }
             }
             case org.bukkit.Tag.REGISTRY_FLUIDS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Fluid.class, "Fluid namespace (%s) must have fluid type", clazz.getName());
                 TagKey<Fluid> fluidTagKey = TagKey.create(Registries.FLUID, key);
-                if (BuiltInRegistries.FLUID.getTag(fluidTagKey).isPresent()) {
+                if (BuiltInRegistries.FLUID.get(fluidTagKey).isPresent()) {
                     return (org.bukkit.Tag<T>) new CraftFluidTag(BuiltInRegistries.FLUID, fluidTagKey);
                 }
             }
             case org.bukkit.Tag.REGISTRY_ENTITY_TYPES -> {
                 Preconditions.checkArgument(clazz == org.bukkit.entity.EntityType.class, "Entity type namespace (%s) must have entity type", clazz.getName());
                 TagKey<EntityType<?>> entityTagKey = TagKey.create(Registries.ENTITY_TYPE, key);
-                if (BuiltInRegistries.ENTITY_TYPE.getTag(entityTagKey).isPresent()) {
+                if (BuiltInRegistries.ENTITY_TYPE.get(entityTagKey).isPresent()) {
                     return (org.bukkit.Tag<T>) new CraftEntityTag(BuiltInRegistries.ENTITY_TYPE, entityTagKey);
                 }
             }
+            case org.bukkit.tag.DamageTypeTags.REGISTRY_DAMAGE_TYPES -> {
+                Preconditions.checkArgument(clazz == org.bukkit.damage.DamageType.class, "Damage type namespace (%s) must have damage type", clazz.getName());
+                TagKey<DamageType> damageTagKey = TagKey.create(Registries.DAMAGE_TYPE, key);
+                net.minecraft.core.Registry<DamageType> damageRegistry = CraftRegistry.getMinecraftRegistry(Registries.DAMAGE_TYPE);
+                if (damageRegistry.get(damageTagKey).isPresent()) {
+                    return (org.bukkit.Tag<T>) new CraftDamageTag(damageRegistry, damageTagKey);
+                }
+            }
             default -> throw new IllegalArgumentException();
         }
 
@@ -2425,22 +2509,27 @@
             case org.bukkit.Tag.REGISTRY_BLOCKS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Block namespace (%s) must have material type", clazz.getName());
                 net.minecraft.core.Registry<Block> blockTags = BuiltInRegistries.BLOCK;
-                return blockTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftBlockTag(blockTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return blockTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftBlockTag(blockTags, pair.key())).collect(ImmutableList.toImmutableList());
             }
             case org.bukkit.Tag.REGISTRY_ITEMS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Item namespace (%s) must have material type", clazz.getName());
                 net.minecraft.core.Registry<Item> itemTags = BuiltInRegistries.ITEM;
-                return itemTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftItemTag(itemTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return itemTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftItemTag(itemTags, pair.key())).collect(ImmutableList.toImmutableList());
             }
             case org.bukkit.Tag.REGISTRY_FLUIDS -> {
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Fluid namespace (%s) must have fluid type", clazz.getName());
                 net.minecraft.core.Registry<Fluid> fluidTags = BuiltInRegistries.FLUID;
-                return fluidTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftFluidTag(fluidTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return fluidTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftFluidTag(fluidTags, pair.key())).collect(ImmutableList.toImmutableList());
             }
             case org.bukkit.Tag.REGISTRY_ENTITY_TYPES -> {
                 Preconditions.checkArgument(clazz == org.bukkit.entity.EntityType.class, "Entity type namespace (%s) must have entity type", clazz.getName());
                 net.minecraft.core.Registry<EntityType<?>> entityTags = BuiltInRegistries.ENTITY_TYPE;
-                return entityTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftEntityTag(entityTags, pair.getFirst())).collect(ImmutableList.toImmutableList());
+                return entityTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftEntityTag(entityTags, pair.key())).collect(ImmutableList.toImmutableList());
+            }
+            case org.bukkit.tag.DamageTypeTags.REGISTRY_DAMAGE_TYPES -> {
+                Preconditions.checkArgument(clazz == org.bukkit.damage.DamageType.class, "Damage type namespace (%s) must have damage type", clazz.getName());
+                net.minecraft.core.Registry<DamageType> damageTags = CraftRegistry.getMinecraftRegistry(Registries.DAMAGE_TYPE);
+                return damageTags.getTags().map(pair -> (org.bukkit.Tag<T>) new CraftDamageTag(damageTags, pair.key())).collect(ImmutableList.toImmutableList());
             }
             default -> throw new IllegalArgumentException();
         }
@@ -2451,7 +2540,10 @@
         Preconditions.checkArgument(key != null, "NamespacedKey key cannot be null");
 
         ReloadableServerRegistries.Holder registry = this.getServer().reloadableRegistries();
-        return new CraftLootTable(key, registry.getLootTable(CraftLootTable.bukkitKeyToMinecraft(key)));
+        return registry.lookup().lookup(Registries.LOOT_TABLE)
+                .flatMap((lookup) -> lookup.get(CraftLootTable.bukkitKeyToMinecraft(key)))
+                .map((holder) -> new CraftLootTable(key, holder.value()))
+                .orElse(null);
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java	(date 1729674280181)
@@ -12,7 +12,7 @@
 
     @Override
     public ProjectileSource getShooter() {
-        return this.getHandle().bridge$projectileSource();
+        return this.getHandle().projectileSource;
     }
 
     @Override
@@ -22,7 +22,7 @@
         } else {
             this.getHandle().setOwner(null);
         }
-        this.getHandle().banner$setProjectileSource(shooter);
+        this.getHandle().projectileSource = shooter;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftFoodComponent.java	(date 1729674280272)
@@ -1,22 +1,13 @@
 package org.bukkit.craftbukkit.inventory.components;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
 import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Optional;
-import java.util.stream.Collectors;
 import net.minecraft.world.food.FoodProperties;
 import org.bukkit.configuration.serialization.SerializableAs;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.SerializableMeta;
-import org.bukkit.craftbukkit.potion.CraftPotionUtil;
-import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.components.FoodComponent;
-import org.bukkit.potion.PotionEffect;
 
 @SerializableAs("Food")
 public final class CraftFoodComponent implements FoodComponent {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftToolComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftToolComponent.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftToolComponent.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftToolComponent.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/components/CraftToolComponent.java	(date 1729674280274)
@@ -14,8 +14,6 @@
 import net.minecraft.core.HolderSet;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.tags.TagKey;
 import net.minecraft.world.item.component.Tool;
 import net.minecraft.world.level.block.Block;
 import org.bukkit.Material;
@@ -195,37 +193,9 @@
         }
 
         public CraftToolRule(Map<String, Object> map) {
-            Float speed = SerializableMeta.getObject(Float.class, map, "speed", false);
-            Boolean correct = SerializableMeta.getObject(Boolean.class, map, "correct-for-drops", false);
-
-            HolderSet<Block> blocks = null;
-            Object blocksObject = SerializableMeta.getObject(Object.class, map, "blocks", false);
-            if (blocksObject instanceof String blocksString && blocksString.startsWith("#")) { // Tag
-                blocksString = blocksString.substring(1);
-                ResourceLocation key = ResourceLocation.tryParse(blocksString);
-                if (key != null) {
-                    blocks = BuiltInRegistries.BLOCK.getTag(TagKey.create(Registries.BLOCK, key)).orElse(null);
-                }
-            } else if (blocksObject instanceof List blocksList) { // List of blocks
-                List<Holder.Reference<Block>> blockHolders = new ArrayList<>(blocksList.size());
-
-                for (Object entry : blocksList) {
-                    ResourceLocation key = ResourceLocation.tryParse(entry.toString());
-                    if (key == null) {
-                        continue;
-                    }
-
-                    BuiltInRegistries.BLOCK.getHolder(key).ifPresent(blockHolders::add);
-                }
-
-                blocks = HolderSet.direct(blockHolders);
-            } else {
-                throw new IllegalArgumentException("blocks" + "(" + blocksObject + ") is not a valid String or List");
-            }
-
-            if (blocks == null) {
-                blocks = HolderSet.empty();
-            }
+            Float speed = SerializableMeta.getObject(Float.class, map, "speed", true);
+            Boolean correct = SerializableMeta.getObject(Boolean.class, map, "correct-for-drops", true);
+            HolderSet<Block> blocks = CraftHolderUtil.parse(SerializableMeta.getObject(Object.class, map, "blocks", false), Registries.BLOCK, BuiltInRegistries.BLOCK);
 
             this.handle = new Tool.Rule(blocks, Optional.ofNullable(speed), Optional.ofNullable(correct));
         }
@@ -234,9 +204,7 @@
         public Map<String, Object> serialize() {
             Map<String, Object> result = new LinkedHashMap<>();
 
-            this.handle.blocks().unwrap()
-                    .ifLeft(key -> result.put("blocks", "#" + key.location().toString())) // Tag
-                    .ifRight(blocks -> result.put("blocks", blocks.stream().map((block) -> block.unwrapKey().orElseThrow().location().toString()).toList())); // List of blocks
+            CraftHolderUtil.serialize(result, "blocks", this.handle.blocks());
 
             Float speed = this.getSpeed();
             if (speed != null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java	(date 1729674280129)
@@ -45,7 +45,7 @@
     @Override
     public void setMaxDomestication(int value) {
         Preconditions.checkArgument(value > 0, "Max domestication (%s) cannot be zero or less", value);
-        this.getHandle().banner$setMaxDomestication(value);
+        this.getHandle().maxDomestication = value;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBeaconView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBeaconView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBeaconView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBeaconView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftBeaconView.java	(date 1729674280282)
@@ -5,14 +5,14 @@
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.BeaconInventory;
 import org.bukkit.inventory.view.BeaconView;
 import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.Nullable;
 
-public class CraftBeaconView extends CraftInventoryView<BeaconMenu> implements BeaconView {
+public class CraftBeaconView extends CraftInventoryView<BeaconMenu, BeaconInventory> implements BeaconView {
 
-    public CraftBeaconView(final HumanEntity player, final Inventory viewing, final BeaconMenu container) {
+    public CraftBeaconView(final HumanEntity player, final BeaconInventory viewing, final BeaconMenu container) {
         super(player, viewing, container);
     }
 
@@ -35,11 +35,11 @@
 
     @Override
     public void setPrimaryEffect(@Nullable final PotionEffectType effectType) {
-        this.container.setData(BeaconBlockEntity.DATA_PRIMARY, BeaconMenu.encodeEffect(CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
+        this.container.setData(BeaconBlockEntity.DATA_PRIMARY, BeaconMenu.encodeEffect((effectType == null) ? null : CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
     }
 
     @Override
     public void setSecondaryEffect(@Nullable final PotionEffectType effectType) {
-        this.container.setData(BeaconBlockEntity.DATA_SECONDARY, BeaconMenu.encodeEffect(CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
+        this.container.setData(BeaconBlockEntity.DATA_SECONDARY, BeaconMenu.encodeEffect((effectType == null) ? null : CraftPotionEffectType.bukkitToMinecraftHolder(effectType)));
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftMerchantView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftMerchantView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftMerchantView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftMerchantView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftMerchantView.java	(date 1729674280284)
@@ -3,16 +3,16 @@
 import net.minecraft.world.inventory.MerchantMenu;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.Merchant;
+import org.bukkit.inventory.MerchantInventory;
 import org.bukkit.inventory.view.MerchantView;
 import org.jetbrains.annotations.NotNull;
 
-public class CraftMerchantView extends CraftInventoryView<MerchantMenu> implements MerchantView {
+public class CraftMerchantView extends CraftInventoryView<MerchantMenu, MerchantInventory> implements MerchantView {
 
     private final net.minecraft.world.item.trading.Merchant trader;
 
-    public CraftMerchantView(final HumanEntity player, final Inventory viewing, final MerchantMenu container, final net.minecraft.world.item.trading.Merchant trader) {
+    public CraftMerchantView(final HumanEntity player, final MerchantInventory viewing, final MerchantMenu container, final net.minecraft.world.item.trading.Merchant trader) {
         super(player, viewing, container);
         this.trader = trader;
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLoomView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLoomView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLoomView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLoomView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLoomView.java	(date 1729674280284)
@@ -9,12 +9,12 @@
 import org.bukkit.craftbukkit.block.banner.CraftPatternType;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.LoomInventory;
 import org.bukkit.inventory.view.LoomView;
 
-public class CraftLoomView extends CraftInventoryView<LoomMenu> implements LoomView {
+public class CraftLoomView extends CraftInventoryView<LoomMenu, LoomInventory> implements LoomView {
 
-    public CraftLoomView(final HumanEntity player, final Inventory viewing, final LoomMenu container) {
+    public CraftLoomView(final HumanEntity player, final LoomInventory viewing, final LoomMenu container) {
         super(player, viewing, container);
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLecternView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLecternView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLecternView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLecternView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftLecternView.java	(date 1729674280284)
@@ -5,12 +5,12 @@
 import net.minecraft.world.level.block.entity.LecternBlockEntity;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.LecternInventory;
 import org.bukkit.inventory.view.LecternView;
 
-public class CraftLecternView extends CraftInventoryView<LecternMenu> implements LecternView {
+public class CraftLecternView extends CraftInventoryView<LecternMenu, LecternInventory> implements LecternView {
 
-    public CraftLecternView(final HumanEntity player, final Inventory viewing, final LecternMenu container) {
+    public CraftLecternView(final HumanEntity player, final LecternInventory viewing, final LecternMenu container) {
         super(player, viewing, container);
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java	(date 1729674280130)
@@ -70,20 +70,20 @@
 
     @Override
     public void startDancing() {
-        this.getHandle().banner$setForceDancing(true);
+        this.getHandle().forceDancing = true;
         this.getHandle().setDancing(true);
     }
 
     @Override
     public void stopDancing() {
-        this.getHandle().banner$setForceDancing(false);
+        this.getHandle().forceDancing = false;
         this.getHandle().jukeboxPos = null;
         this.getHandle().setJukeboxPlaying(null, false);
     }
 
     @Override
     public org.bukkit.entity.Allay duplicateAllay() {
-        Allay nmsAllay = this.getHandle().duplicateAllay0();
+        Allay nmsAllay = this.getHandle().duplicateAllay();
         return (nmsAllay != null) ? (org.bukkit.entity.Allay) nmsAllay.getBukkitEntity() : null;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftCrafterView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftCrafterView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftCrafterView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftCrafterView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftCrafterView.java	(date 1729674280283)
@@ -4,12 +4,12 @@
 import net.minecraft.world.inventory.CrafterMenu;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.CrafterInventory;
 import org.bukkit.inventory.view.CrafterView;
 
-public class CraftCrafterView extends CraftInventoryView<CrafterMenu> implements CrafterView {
+public class CraftCrafterView extends CraftInventoryView<CrafterMenu, CrafterInventory> implements CrafterView {
 
-    public CraftCrafterView(final HumanEntity player, final Inventory viewing, final CrafterMenu container) {
+    public CraftCrafterView(final HumanEntity player, final CrafterInventory viewing, final CrafterMenu container) {
         super(player, viewing, container);
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftAnvilView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftAnvilView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftAnvilView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftAnvilView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftAnvilView.java	(date 1729674280281)
@@ -4,13 +4,13 @@
 import org.bukkit.craftbukkit.inventory.CraftInventoryAnvil;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.AnvilInventory;
 import org.bukkit.inventory.view.AnvilView;
 import org.jetbrains.annotations.Nullable;
 
-public class CraftAnvilView extends CraftInventoryView<AnvilMenu> implements AnvilView {
+public class CraftAnvilView extends CraftInventoryView<AnvilMenu, AnvilInventory> implements AnvilView {
 
-    public CraftAnvilView(final HumanEntity player, final Inventory viewing, final AnvilMenu container) {
+    public CraftAnvilView(final HumanEntity player, final AnvilInventory viewing, final AnvilMenu container) {
         super(player, viewing, container);
     }
 
@@ -32,7 +32,7 @@
 
     @Override
     public int getMaximumRepairCost() {
-        return this.container.bridge$maximumRepairCost();
+        return this.container.maximumRepairCost;
     }
 
     @Override
@@ -47,7 +47,7 @@
 
     @Override
     public void setMaximumRepairCost(final int cost) {
-        this.container.banner$setMaximumRepairCost(cost);
+        this.container.maximumRepairCost = cost;
     }
 
     public void updateFromLegacy(CraftInventoryAnvil legacy) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java	(date 1729674280198)
@@ -48,7 +48,7 @@
 
     @Override
     public boolean isWet() {
-        return this.getHandle().isWet();
+        return this.getHandle().isWet;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java	(date 1729674280017)
@@ -187,11 +187,4 @@
         org.bukkit.loot.LootTable table = (org.bukkit.loot.LootTable) obj;
         return table.getKey().equals(this.getKey());
     }
-
-    // Paper start - satisfy equals/hashCode contract
-    @Override
-    public int hashCode() {
-        return java.util.Objects.hash(key);
-    }
-    // Paper end
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftFurnaceView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftFurnaceView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftFurnaceView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftFurnaceView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/inventory/view/CraftFurnaceView.java	(date 1729674280284)
@@ -4,12 +4,12 @@
 import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.HumanEntity;
-import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.FurnaceInventory;
 import org.bukkit.inventory.view.FurnaceView;
 
-public class CraftFurnaceView extends CraftInventoryView<AbstractFurnaceMenu> implements FurnaceView {
+public class CraftFurnaceView extends CraftInventoryView<AbstractFurnaceMenu, FurnaceInventory> implements FurnaceView {
 
-    public CraftFurnaceView(final HumanEntity player, final Inventory viewing, final AbstractFurnaceMenu container) {
+    public CraftFurnaceView(final HumanEntity player, final FurnaceInventory viewing, final AbstractFurnaceMenu container) {
         super(player, viewing, container);
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java	(date 1729674280184)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Salmon;
 
@@ -18,4 +19,16 @@
     public String toString() {
         return "CraftSalmon";
     }
+
+    @Override
+    public Variant getVariant() {
+        return Variant.values()[this.getHandle().getVariant().ordinal()];
+    }
+
+    @Override
+    public void setVariant(Variant variant) {
+        Preconditions.checkArgument(variant != null, "variant");
+
+        this.getHandle().setVariant(net.minecraft.world.entity.animal.Salmon.Variant.values()[variant.ordinal()]);
+    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntitySnapshot.java	(date 1729674280150)
@@ -3,6 +3,7 @@
 import com.google.common.base.Preconditions;
 import java.util.function.Function;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.world.entity.EntitySpawnReason;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -48,9 +49,9 @@
 
     private net.minecraft.world.entity.Entity createInternal(World world) {
         net.minecraft.world.level.Level nms = ((CraftWorld) world).getHandle();
-        net.minecraft.world.entity.Entity internal = net.minecraft.world.entity.EntityType.loadEntityRecursive(this.data, nms, Function.identity());
+        net.minecraft.world.entity.Entity internal = net.minecraft.world.entity.EntityType.loadEntityRecursive(this.data, nms, EntitySpawnReason.LOAD, Function.identity());
         if (internal == null) { // Try creating by type
-            internal = CraftEntityType.bukkitToMinecraft(this.type).create(nms);
+            internal = CraftEntityType.bukkitToMinecraft(this.type).create(nms, EntitySpawnReason.LOAD);
         }
 
         Preconditions.checkArgument(internal != null, "Error creating new entity."); // This should only fail if the stored NBTTagCompound is malformed.
@@ -65,8 +66,7 @@
 
     public static CraftEntitySnapshot create(CraftEntity entity) {
         CompoundTag tag = new CompoundTag();
-        // Banner TODO fixme
-        if (!entity.getHandle().saveAsPassenger(tag)) {
+        if (!entity.getHandle().saveAsPassenger(tag, false)) {
             return null;
         }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java	(date 1729674280192)
@@ -14,22 +14,22 @@
 
     @Override
     public float getYield() {
-        return this.getHandle().bridge$yield();
+        return this.getHandle().explosionPower;
     }
 
     @Override
     public boolean isIncendiary() {
-        return this.getHandle().bridge$isIncendiary();
+        return this.getHandle().isIncendiary;
     }
 
     @Override
     public void setIsIncendiary(boolean isIncendiary) {
-        this.getHandle().banner$setIsIncendiary(isIncendiary);
+        this.getHandle().isIncendiary = isIncendiary;
     }
 
     @Override
     public void setYield(float yield) {
-        this.getHandle().banner$setYield(yield);
+        this.getHandle().explosionPower = yield;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java b/banner-server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java	(date 1729674280322)
@@ -10,6 +10,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.WorldGenLevel;
@@ -132,7 +133,7 @@
     public List<Entity> getEntities() {
         List<Entity> entities = new ArrayList<>();
         for (StructureTemplate.StructureEntityInfo entity : this.structure.entityInfoList) {
-            EntityType.create(entity.nbt, ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle()).ifPresent(dummyEntity -> {
+            EntityType.create(entity.nbt, ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle(), EntitySpawnReason.STRUCTURE).ifPresent(dummyEntity -> {
                 dummyEntity.setPos(entity.pos.x, entity.pos.y, entity.pos.z);
                 entities.add(dummyEntity.getBukkitEntity());
             });
@@ -157,7 +158,7 @@
 
     @Override
     public PersistentDataContainer getPersistentDataContainer() {
-        return this.getHandle().bridge$persistentDataContainer();
+        return this.getHandle().persistentDataContainer;
     }
 
     public StructureTemplate getHandle() {
Index: banner-server/src/main/java/org/spigotmc/ActivationRange.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/ActivationRange.java b/banner-server/src/main/java/org/spigotmc/ActivationRange.java
--- a/banner-server/src/main/java/org/spigotmc/ActivationRange.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/ActivationRange.java	(date 1729674280343)
@@ -1,6 +1,6 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitFieldHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.LightningBolt;
@@ -77,10 +77,10 @@
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
     {
-        if ( ( entity.bridge$activationType() == ActivationType.MISC && config.miscActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.RAIDER && config.raiderActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.ANIMAL && config.animalActivationRange == 0 )
-                || ( entity.bridge$activationType() == ActivationType.MONSTER && config.monsterActivationRange == 0 )
+        if ( ( entity.activationType == ActivationType.MISC && config.miscActivationRange == 0 )
+                || ( entity.activationType == ActivationType.RAIDER && config.raiderActivationRange == 0 )
+                || ( entity.activationType == ActivationType.ANIMAL && config.animalActivationRange == 0 )
+                || ( entity.activationType == ActivationType.MONSTER && config.monsterActivationRange == 0 )
                 || entity instanceof Player
                 || entity instanceof ThrowableProjectile
                 || entity instanceof EnderDragon
@@ -108,20 +108,20 @@
     public static void activateEntities(Level world)
     {
         SpigotTimings.entityActivationCheckTimer.startTiming();
-        final int miscActivationRange = world.bridge$spigotConfig().miscActivationRange;
-        final int raiderActivationRange = world.bridge$spigotConfig().raiderActivationRange;
-        final int animalActivationRange = world.bridge$spigotConfig().animalActivationRange;
-        final int monsterActivationRange = world.bridge$spigotConfig().monsterActivationRange;
+        final int miscActivationRange = world.spigotConfig.miscActivationRange;
+        final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
+        final int animalActivationRange = world.spigotConfig.animalActivationRange;
+        final int monsterActivationRange = world.spigotConfig.monsterActivationRange;
 
         int maxRange = Math.max( monsterActivationRange, animalActivationRange );
         maxRange = Math.max( maxRange, raiderActivationRange );
         maxRange = Math.max( maxRange, miscActivationRange );
-        maxRange = Math.min( ( world.bridge$spigotConfig().simulationDistance << 4 ) - 8, maxRange );
+        maxRange = Math.min( ( world.spigotConfig.simulationDistance << 4 ) - 8, maxRange );
 
         for ( Player player : world.players() )
         {
-            player.banner$setActivatedTick(BukkitFieldHooks.currentTick());
-            if ( world.bridge$spigotConfig().ignoreSpectatorActivation && player.isSpectator() )
+            player.activatedTick = MinecraftServer.currentTick;
+            if ( world.spigotConfig.ignoreSpectatorActivation && player.isSpectator() )
             {
                 continue;
             }
@@ -144,16 +144,16 @@
      */
     private static void activateEntity(Entity entity)
     {
-        if ( BukkitFieldHooks.currentTick() > entity.bridge$activatedTick() )
+        if ( MinecraftServer.currentTick > entity.activatedTick )
         {
-            if ( entity.bridge$defaultActivationState() )
+            if ( entity.defaultActivationState )
             {
-                entity.banner$setActivatedTick(BukkitFieldHooks.currentTick());
+                entity.activatedTick = MinecraftServer.currentTick;
                 return;
             }
-            if ( entity.bridge$activationType().boundingBox.intersects( entity.getBoundingBox() ) )
+            if ( entity.activationType.boundingBox.intersects( entity.getBoundingBox() ) )
             {
-                entity.banner$setActivatedTick(BukkitFieldHooks.currentTick());
+                entity.activatedTick = MinecraftServer.currentTick;
             }
         }
     }
@@ -178,7 +178,7 @@
             {
                 return true;
             }
-        } else if ( !( (AbstractArrow) entity ).inGround )
+        } else if ( !( (AbstractArrow) entity ).isInGround() )
         {
             return true;
         }
@@ -236,23 +236,23 @@
             return true;
         }
 
-        boolean isActive = entity.bridge$activatedTick() >= BukkitFieldHooks.currentTick() || entity.bridge$defaultActivationState();
+        boolean isActive = entity.activatedTick >= MinecraftServer.currentTick || entity.defaultActivationState;
 
         // Should this entity tick?
         if ( !isActive )
         {
-            if ( ( BukkitFieldHooks.currentTick() - entity.bridge$activatedTick() - 1 ) % 20 == 0 )
+            if ( ( MinecraftServer.currentTick - entity.activatedTick - 1 ) % 20 == 0 )
             {
                 // Check immunities every 20 ticks.
                 if ( ActivationRange.checkEntityImmunities( entity ) )
                 {
                     // Triggered some sort of immunity, give 20 full ticks before we check again.
-                    entity.banner$setActivatedTick(BukkitFieldHooks.currentTick() + 20);
+                    entity.activatedTick = MinecraftServer.currentTick + 20;
                 }
                 isActive = true;
             }
             // Add a little performance juice to active entities. Skip 1/4 if not immune.
-        } else if ( !entity.bridge$defaultActivationState() && entity.tickCount % 4 == 0 && !ActivationRange.checkEntityImmunities( entity ) )
+        } else if ( !entity.defaultActivationState && entity.tickCount % 4 == 0 && !ActivationRange.checkEntityImmunities( entity ) )
         {
             isActive = false;
         }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java	(date 1729674280163)
@@ -25,7 +25,7 @@
         Preconditions.checkArgument(newDir != null, "%s is not a valid facing direction", face);
 
         this.getHandle().setDirection(newDir);
-        if (!force && !this.getHandle().bridge$generation() && !hanging.survives()) {
+        if (!force && !this.getHandle().generation && !hanging.survives()) {
             hanging.setDirection(oldDir);
             return false;
         }
@@ -44,7 +44,7 @@
         this.getHandle().getEntityData().markDirty(net.minecraft.world.entity.decoration.ItemFrame.DATA_ROTATION);
 
         // update redstone
-        if (!this.getHandle().bridge$generation()) {
+        if (!this.getHandle().generation) {
             this.getHandle().level().updateNeighbourForOutputSignal(this.getHandle().getPos(), Blocks.AIR);
         }
     }
@@ -57,7 +57,7 @@
     @Override
     public void setItem(org.bukkit.inventory.ItemStack item, boolean playSound) {
         // only updated redstone and play sound when it is not in generation
-        this.getHandle().setItem(CraftItemStack.asNMSCopy(item), !this.getHandle().bridge$generation(), !this.getHandle().bridge$generation() && playSound);
+        this.getHandle().setItem(CraftItemStack.asNMSCopy(item), !this.getHandle().generation, !this.getHandle().generation && playSound);
     }
 
     @Override
Index: banner-server/src/main/java/org/spigotmc/TrackingRange.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/TrackingRange.java b/banner-server/src/main/java/org/spigotmc/TrackingRange.java
--- a/banner-server/src/main/java/org/spigotmc/TrackingRange.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/TrackingRange.java	(date 1729674280346)
@@ -26,11 +26,11 @@
         {
             return defaultRange;
         }
-        SpigotWorldConfig config = entity.level().bridge$spigotConfig();
+        SpigotWorldConfig config = entity.level().spigotConfig;
         if ( entity instanceof ServerPlayer )
         {
             return config.playerTrackingRange;
-        } else if ( entity.bridge$activationType() == ActivationRange.ActivationType.MONSTER || entity.bridge$activationType() == ActivationRange.ActivationType.RAIDER )
+        } else if ( entity.activationType == ActivationRange.ActivationType.MONSTER || entity.activationType == ActivationRange.ActivationType.RAIDER )
         {
             return config.monsterTrackingRange;
         } else if ( entity instanceof Ghast )
@@ -42,7 +42,7 @@
             {
                 return config.monsterActivationRange;
             }
-        } else if ( entity.bridge$activationType() == ActivationRange.ActivationType.ANIMAL )
+        } else if ( entity.activationType == ActivationRange.ActivationType.ANIMAL )
         {
             return config.animalTrackingRange;
         } else if ( entity instanceof ItemFrame || entity instanceof Painting || entity instanceof ItemEntity || entity instanceof ExperienceOrb )
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftAgeable.java	(date 1729674280130)
@@ -21,12 +21,12 @@
 
     @Override
     public void setAgeLock(boolean lock) {
-        this.getHandle().banner$setAgeLocked(lock);
+        this.getHandle().ageLocked = lock;
     }
 
     @Override
     public boolean getAgeLock() {
-        return this.getHandle().bridge$ageLocked();
+        return this.getHandle().ageLocked;
     }
 
     @Override
Index: banner-server/src/main/java/org/spigotmc/TicksPerSecondCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/banner-server/src/main/java/org/spigotmc/TicksPerSecondCommand.java
--- a/banner-server/src/main/java/org/spigotmc/TicksPerSecondCommand.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/TicksPerSecondCommand.java	(date 1729674280346)
@@ -1,6 +1,6 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -25,7 +25,7 @@
         }
 
         StringBuilder sb = new StringBuilder( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " );
-        for ( double tps : BukkitMethodHooks.getServer().getTPS() )
+        for ( double tps : MinecraftServer.getServer().recentTps )
         {
             sb.append( this.format( tps ) );
             sb.append( ", " );
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java	(date 1729674280108)
@@ -3,7 +3,7 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
-public final class CraftSkullPlayer extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rotatable {
+public final class CraftSkullPlayer extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Skull, org.bukkit.block.data.Powerable, org.bukkit.block.data.Rotatable {
 
     public CraftSkullPlayer() {
         super();
@@ -13,6 +13,20 @@
         super(state);
     }
 
+    // org.bukkit.craftbukkit.block.data.CraftPowerable
+
+    private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.PlayerHeadBlock.class, "powered");
+
+    @Override
+    public boolean isPowered() {
+        return this.get(CraftSkullPlayer.POWERED);
+    }
+
+    @Override
+    public void setPowered(boolean powered) {
+        this.set(CraftSkullPlayer.POWERED, powered);
+    }
+
     // org.bukkit.craftbukkit.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.PlayerHeadBlock.class, "rotation");
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java	(date 1729674280170)
@@ -1,6 +1,9 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import java.util.Collection;
+import java.util.List;
+import java.util.Optional;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.random.SimpleWeightedRandomList;
 import net.minecraft.world.entity.vehicle.MinecartSpawner;
@@ -13,10 +16,6 @@
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.SpawnerMinecart;
 
-import java.util.Collection;
-import java.util.List;
-import java.util.Optional;
-
 final class CraftMinecartMobSpawner extends CraftMinecart implements SpawnerMinecart {
     CraftMinecartMobSpawner(CraftServer server, MinecartSpawner entity) {
         super(server, entity);
Index: banner-server/src/main/java/org/spigotmc/AsyncCatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/AsyncCatcher.java b/banner-server/src/main/java/org/spigotmc/AsyncCatcher.java
--- a/banner-server/src/main/java/org/spigotmc/AsyncCatcher.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/AsyncCatcher.java	(date 1729674280343)
@@ -1,6 +1,6 @@
 package org.spigotmc;
 
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 
 public class AsyncCatcher
 {
@@ -9,7 +9,7 @@
 
     public static void catchOp(String reason)
     {
-        if ( AsyncCatcher.enabled && Thread.currentThread() != BukkitMethodHooks.getServer().serverThread )
+        if ( AsyncCatcher.enabled && Thread.currentThread() != MinecraftServer.getServer().serverThread )
         {
             throw new IllegalStateException( "Asynchronous " + reason + "!" );
         }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java	(date 1729674280108)
@@ -3,7 +3,7 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
-public final class CraftSkullPlayerWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
+public final class CraftSkullPlayerWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.WallSkull, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftSkullPlayerWall() {
         super();
@@ -31,4 +31,18 @@
     public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
         return this.getValues(CraftSkullPlayerWall.FACING, org.bukkit.block.BlockFace.class);
     }
+
+    // org.bukkit.craftbukkit.block.data.CraftPowerable
+
+    private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.PlayerWallHeadBlock.class, "powered");
+
+    @Override
+    public boolean isPowered() {
+        return this.get(CraftSkullPlayerWall.POWERED);
+    }
+
+    @Override
+    public void setPowered(boolean powered) {
+        this.set(CraftSkullPlayerWall.POWERED, powered);
+    }
 }
Index: banner-server/src/main/java/org/spigotmc/SpigotConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/SpigotConfig.java b/banner-server/src/main/java/org/spigotmc/SpigotConfig.java
--- a/banner-server/src/main/java/org/spigotmc/SpigotConfig.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/SpigotConfig.java	(date 1729674280346)
@@ -13,10 +13,9 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.attributes.RangedAttribute;
 import org.apache.logging.log4j.LogManager;
@@ -49,6 +48,7 @@
     static int version;
     static Map<String, Command> commands;
     /*========================================================================*/
+    private static Metrics metrics;
 
     public static void init(File configFile)
     {
@@ -80,7 +80,19 @@
     {
         for ( Map.Entry<String, Command> entry : SpigotConfig.commands.entrySet() )
         {
-            BukkitMethodHooks.getServer().bridge$server().getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
+            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "Spigot", entry.getValue() );
+        }
+
+        if ( SpigotConfig.metrics == null )
+        {
+            try
+            {
+                SpigotConfig.metrics = new Metrics();
+                SpigotConfig.metrics.start();
+            } catch ( IOException ex )
+            {
+                Bukkit.getServer().getLogger().log( Level.SEVERE, "Could not start metrics service", ex );
+            }
         }
     }
 
@@ -332,11 +344,14 @@
         SpigotConfig.movedTooQuicklyMultiplier = SpigotConfig.getDouble( "settings.moved-too-quickly-multiplier", 10.0D );
     }
 
+    public static double maxAbsorption = 2048;
     public static double maxHealth = 2048;
     public static double movementSpeed = 2048;
     public static double attackDamage = 2048;
     private static void attributeMaxes()
     {
+        SpigotConfig.maxAbsorption = SpigotConfig.getDouble( "settings.attribute.maxAbsorption.max", SpigotConfig.maxAbsorption );
+        ( (RangedAttribute) Attributes.MAX_ABSORPTION.value() ).maxValue = SpigotConfig.maxAbsorption;
         SpigotConfig.maxHealth = SpigotConfig.getDouble( "settings.attribute.maxHealth.max", SpigotConfig.maxHealth );
         ( (RangedAttribute) Attributes.MAX_HEALTH.value() ).maxValue = SpigotConfig.maxHealth;
         SpigotConfig.movementSpeed = SpigotConfig.getDouble( "settings.attribute.movementSpeed.max", SpigotConfig.movementSpeed );
Index: banner-server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java b/banner-server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/ban/CraftProfileBanList.java	(date 1729674280026)
@@ -2,14 +2,13 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import com.mojang.authlib.GameProfile;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Date;
 import java.util.Set;
 import java.util.UUID;
-
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.players.UserBanList;
 import net.minecraft.server.players.UserBanListEntry;
 import org.bukkit.BanEntry;
@@ -162,10 +161,10 @@
     }
 
     static GameProfile getProfileByUUID(UUID uuid) {
-        return (BukkitMethodHooks.getServer() != null) ? BukkitMethodHooks.getServer().getProfileCache().get(uuid).orElse(null) : null;
+        return (MinecraftServer.getServer() != null) ? MinecraftServer.getServer().getProfileCache().get(uuid).orElse(null) : null;
     }
 
     static GameProfile getProfileByName(String name) {
-        return (BukkitMethodHooks.getServer() != null) ? BukkitMethodHooks.getServer().getProfileCache().get(name).orElse(null) : null;
+        return (MinecraftServer.getServer() != null) ? MinecraftServer.getServer().getProfileCache().get(name).orElse(null) : null;
     }
 }
Index: banner-server/src/main/java/org/spigotmc/SpigotCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/SpigotCommand.java b/banner-server/src/main/java/org/spigotmc/SpigotCommand.java
--- a/banner-server/src/main/java/org/spigotmc/SpigotCommand.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/SpigotCommand.java	(date 1729674280344)
@@ -1,8 +1,6 @@
 package org.spigotmc;
 
 import java.io.File;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import org.bukkit.ChatColor;
@@ -31,12 +29,12 @@
             Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
             Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
 
-            MinecraftServer console = BukkitMethodHooks.getServer();
-            org.spigotmc.SpigotConfig.init((File) console.bridge$options().valueOf("spigot-settings"));
+            MinecraftServer console = MinecraftServer.getServer();
+            org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings"));
             for (ServerLevel world : console.getAllLevels()) {
-                world.bridge$spigotConfig().init();
+                world.spigotConfig.init();
             }
-            console.bridge$server().reloadCount++;
+            console.server.reloadCount++;
 
             Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Reload complete.");
         }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java	(date 1729674280167)
@@ -45,7 +45,7 @@
     public void setStrength(int strength) {
         Preconditions.checkArgument(1 <= strength && strength <= 5, "strength must be [1,5]");
         if (strength == this.getStrength()) return;
-        this.getHandle().setStrength(strength);
+        this.getHandle().setStrengthPublic(strength);
         this.getHandle().createInventory();
     }
 
Index: banner-server/src/main/java/org/spigotmc/SpigotWorldConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/SpigotWorldConfig.java b/banner-server/src/main/java/org/spigotmc/SpigotWorldConfig.java
--- a/banner-server/src/main/java/org/spigotmc/SpigotWorldConfig.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/SpigotWorldConfig.java	(date 1729674280346)
@@ -20,7 +20,7 @@
 
     public void init()
     {
-        this.verbose = this.getBoolean( "verbose", false );
+        this.verbose = this.getBoolean( "verbose", true );
 
         this.log( "-------- World Settings For [" + this.worldName + "] --------" );
         SpigotConfig.readConfig( SpigotWorldConfig.class, this );
Index: banner-server/src/main/java/org/spigotmc/RestartCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/RestartCommand.java b/banner-server/src/main/java/org/spigotmc/RestartCommand.java
--- a/banner-server/src/main/java/org/spigotmc/RestartCommand.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/RestartCommand.java	(date 1729674280344)
@@ -2,8 +2,7 @@
 
 import java.io.File;
 import java.util.List;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -25,7 +24,7 @@
     {
         if ( this.testPermission( sender ) )
         {
-            BukkitMethodHooks.getServer().bridge$processQueue().add(new Runnable()
+            MinecraftServer.getServer().processQueue.add( new Runnable()
             {
                 @Override
                 public void run()
@@ -56,9 +55,9 @@
                 WatchdogThread.doStop();
 
                 // Kick all players
-                for ( ServerPlayer p : (List<ServerPlayer>) BukkitMethodHooks.getServer().getPlayerList().players )
+                for ( ServerPlayer p : (List<ServerPlayer>) MinecraftServer.getServer().getPlayerList().players )
                 {
-                    p.connection.disconnect( CraftChatMessage.fromStringOrEmpty( SpigotConfig.restartMessage ) );
+                    p.connection.disconnect( CraftChatMessage.fromStringOrEmpty( SpigotConfig.restartMessage, true ) );
                 }
                 // Give the socket a chance to send the packets
                 try
@@ -68,7 +67,7 @@
                 {
                 }
                 // Close the socket so we can rebind with the new process
-                BukkitMethodHooks.getServer().getConnection().stop();
+                MinecraftServer.getServer().getConnection().stop();
 
                 // Give time for it to kick in
                 try
@@ -81,7 +80,7 @@
                 // Actually shutdown
                 try
                 {
-                    BukkitMethodHooks.getServer().close();
+                    MinecraftServer.getServer().close();
                 } catch ( Throwable t )
                 {
                 }
@@ -118,7 +117,7 @@
                 // Actually shutdown
                 try
                 {
-                    BukkitMethodHooks.getServer().close();
+                    MinecraftServer.getServer().close();
                 } catch ( Throwable t )
                 {
                 }
Index: banner-server/src/main/java/org/spigotmc/WatchdogThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/spigotmc/WatchdogThread.java b/banner-server/src/main/java/org/spigotmc/WatchdogThread.java
--- a/banner-server/src/main/java/org/spigotmc/WatchdogThread.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/spigotmc/WatchdogThread.java	(date 1729674280346)
@@ -5,8 +5,7 @@
 import java.lang.management.ThreadInfo;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 
 public class WatchdogThread extends Thread
@@ -75,19 +74,16 @@
                 log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
                 log.log( Level.SEVERE, "Spigot version: " + Bukkit.getServer().getVersion() );
                 //
-                // Banner start - disable
-                /*
                 if ( net.minecraft.world.level.Level.lastPhysicsProblem != null )
                 {
                     log.log( Level.SEVERE, "------------------------------" );
                     log.log( Level.SEVERE, "During the run of the server, a physics stackoverflow was supressed" );
                     log.log( Level.SEVERE, "near " + net.minecraft.world.level.Level.lastPhysicsProblem );
-                }*/
-                // Banner end
+                }
                 //
                 log.log( Level.SEVERE, "------------------------------" );
                 log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Spigot!):" );
-                WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( BukkitMethodHooks.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
+                WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
                 log.log( Level.SEVERE, "------------------------------" );
                 //
                 log.log( Level.SEVERE, "Entire Thread Dump:" );
@@ -98,7 +94,7 @@
                 }
                 log.log( Level.SEVERE, "------------------------------" );
 
-                if ( this.restart && !BukkitMethodHooks.getServer().hasStopped() )
+                if ( this.restart && !MinecraftServer.getServer().hasStopped() )
                 {
                     RestartCommand.restart();
                 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftParticle.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftParticle.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftParticle.java	(date 1729674280017)
@@ -13,6 +13,7 @@
 import net.minecraft.core.particles.SculkChargeParticleOptions;
 import net.minecraft.core.particles.ShriekParticleOption;
 import net.minecraft.core.particles.SimpleParticleType;
+import net.minecraft.core.particles.TargetColorParticleOption;
 import net.minecraft.core.particles.VibrationParticleOption;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.entity.Entity;
@@ -36,7 +37,6 @@
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
-import org.joml.Vector3f;
 
 public abstract class CraftParticle<D> implements Keyed {
 
@@ -123,7 +123,7 @@
                 @Override
                 public ParticleOptions createParticleParam(Particle.DustOptions data) {
                     Color color = data.getColor();
-                    return new DustParticleOptions(new Vector3f(color.getRed() / 255.0f, color.getGreen() / 255.0f, color.getBlue() / 255.0f), data.getSize());
+                    return new DustParticleOptions(color.asRGB(), data.getSize());
                 }
             };
 
@@ -146,7 +146,7 @@
                 public ParticleOptions createParticleParam(Particle.DustTransition data) {
                     Color from = data.getColor();
                     Color to = data.getToColor();
-                    return new DustColorTransitionOptions(new Vector3f(from.getRed() / 255.0f, from.getGreen() / 255.0f, from.getBlue() / 255.0f), new Vector3f(to.getRed() / 255.0f, to.getGreen() / 255.0f, to.getBlue() / 255.0f), data.getSize());
+                    return new DustColorTransitionOptions(from.asRGB(), to.asRGB(), data.getSize());
                 }
             };
 
@@ -189,6 +189,13 @@
                 }
             };
 
+            BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> targetColorFunction = (name, particle) -> new CraftParticle<>(name, particle, Particle.TargetColor.class) {
+                @Override
+                public ParticleOptions createParticleParam(Particle.TargetColor data) {
+                    return new TargetColorParticleOption(CraftLocation.toVec3D(data.getTarget()), data.getColor().asRGB());
+                }
+            };
+
             add("dust", dustOptionsFunction);
             add("item", itemStackFunction);
             add("block", blockDataFunction);
@@ -200,6 +207,8 @@
             add("block_marker", blockDataFunction);
             add("entity_effect", colorFunction);
             add("dust_pillar", blockDataFunction);
+            add("block_crumble", blockDataFunction);
+            add("trail", targetColorFunction);
         }
 
         private static void add(String name, BiFunction<NamespacedKey, net.minecraft.core.particles.ParticleType<?>, CraftParticle<?>> function) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java	(date 1729674280017)
@@ -277,7 +277,7 @@
                 break;
         }
 
-        Holder<ConfiguredFeature<?, ?>> holder = access.registryAccess().registryOrThrow(Registries.CONFIGURED_FEATURE).getHolder(gen).orElse(null);
+        Holder<ConfiguredFeature<?, ?>> holder = access.registryAccess().lookupOrThrow(Registries.CONFIGURED_FEATURE).get(gen).orElse(null);
         return (holder != null) ? holder.value().place(access, chunkGenerator, random, pos) : false;
     }
 
@@ -379,7 +379,7 @@
         net.minecraft.world.entity.Entity entity = this.createEntity(location, clazz, true);
 
         if (!this.isNormalWorld()) {
-            entity.banner$setGeneration(true);
+            entity.generation = true;
         }
 
         return (T) entity.getBukkitEntity();
@@ -416,7 +416,7 @@
         Preconditions.checkArgument(!entity.isInWorld(), "Entity has already been added to a world");
         net.minecraft.world.entity.Entity nmsEntity = ((CraftEntity) entity).getHandle();
         if (nmsEntity.level() != this.getHandle().getLevel()) {
-            nmsEntity = nmsEntity.changeDimension(new TeleportTransition(this.getHandle().getLevel(), nmsEntity, TeleportTransition.DO_NOTHING));
+            nmsEntity = nmsEntity.teleport(new TeleportTransition(this.getHandle().getLevel(), nmsEntity, TeleportTransition.DO_NOTHING));
         }
 
         this.addEntityWithPassengers(nmsEntity, CreatureSpawnEvent.SpawnReason.CUSTOM);
@@ -437,7 +437,7 @@
         }
 
         if (!this.isNormalWorld()) {
-            entity.banner$setGeneration(true);
+            entity.generation = true;
         }
 
         if (function != null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java	(date 1729674280014)
@@ -6,8 +6,7 @@
 import java.util.Collection;
 import java.util.Map;
 import java.util.function.Supplier;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
 import org.bukkit.World;
@@ -21,7 +20,7 @@
     public String get() {
         StringWriter value = new StringWriter();
         try {
-            value.append("\n   Running: ").append(Bukkit.getName()).append(" version ").append(Bukkit.getVersion()).append(" (Implementing API version ").append(Bukkit.getBukkitVersion()).append(") ").append(String.valueOf(BukkitMethodHooks.getServer().usesAuthentication()));
+            value.append("\n   Running: ").append(Bukkit.getName()).append(" version ").append(Bukkit.getVersion()).append(" (Implementing API version ").append(Bukkit.getBukkitVersion()).append(") ").append(String.valueOf(MinecraftServer.getServer().usesAuthentication()));
             value.append("\n   Plugins: {");
             for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 PluginDescriptionFile description = plugin.getDescription();
@@ -29,7 +28,7 @@
                 value.append(' ').append(description.getFullName()).append(legacy ? "*" : "").append(' ').append(description.getMain()).append(' ').append(Arrays.toString(description.getAuthors().toArray())).append(',');
             }
             value.append("}\n   Warnings: ").append(Bukkit.getWarningState().name());
-            value.append("\n   Reload Count: ").append(String.valueOf(BukkitMethodHooks.getServer().bridge$server().reloadCount));
+            value.append("\n   Reload Count: ").append(String.valueOf(MinecraftServer.getServer().server.reloadCount));
             value.append("\n   Threads: {");
             for (Map.Entry<Thread, ? extends Object[]> entry : Thread.getAllStackTraces().entrySet()) {
                 value.append(' ').append(entry.getKey().getState().name()).append(' ').append(entry.getKey().getName()).append(": ").append(Arrays.toString(entry.getValue())).append(',');
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java	(date 1729674280158)
@@ -63,7 +63,7 @@
     public void setLaserTicks(int ticks) {
         Preconditions.checkArgument(ticks >= CraftGuardian.MINIMUM_ATTACK_TICKS, "ticks must be >= %s. Given %s", CraftGuardian.MINIMUM_ATTACK_TICKS, ticks);
 
-        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().bridge$guardianAttackGoal();
+        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().guardianAttackGoal;
         if (goal != null) {
             goal.attackTime = ticks;
         }
@@ -71,7 +71,7 @@
 
     @Override
     public int getLaserTicks() {
-        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().bridge$guardianAttackGoal();
+        net.minecraft.world.entity.monster.Guardian.GuardianAttackGoal goal = this.getHandle().guardianAttackGoal;
         return (goal != null) ? goal.attackTime : CraftGuardian.MINIMUM_ATTACK_TICKS;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java	(date 1729674280017)
@@ -8,7 +8,6 @@
 import java.util.stream.Stream;
 import net.minecraft.core.Holder;
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.ResourceKey;
 import org.bukkit.GameEvent;
@@ -33,6 +32,7 @@
 import org.bukkit.craftbukkit.generator.structure.CraftStructure;
 import org.bukkit.craftbukkit.generator.structure.CraftStructureType;
 import org.bukkit.craftbukkit.inventory.CraftItemType;
+import org.bukkit.craftbukkit.inventory.CraftMenuType;
 import org.bukkit.craftbukkit.inventory.trim.CraftTrimMaterial;
 import org.bukkit.craftbukkit.inventory.trim.CraftTrimPattern;
 import org.bukkit.craftbukkit.legacy.FieldRename;
@@ -43,10 +43,15 @@
 import org.bukkit.craftbukkit.util.Handleable;
 import org.bukkit.damage.DamageType;
 import org.bukkit.enchantments.Enchantment;
-import org.bukkit.entity.*;
+import org.bukkit.entity.Cat;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Frog;
+import org.bukkit.entity.Villager;
+import org.bukkit.entity.Wolf;
 import org.bukkit.generator.structure.Structure;
 import org.bukkit.generator.structure.StructureType;
 import org.bukkit.inventory.ItemType;
+import org.bukkit.inventory.MenuType;
 import org.bukkit.inventory.meta.trim.TrimMaterial;
 import org.bukkit.inventory.meta.trim.TrimPattern;
 import org.bukkit.map.MapCursor;
@@ -67,7 +72,7 @@
     }
 
     public static <E> net.minecraft.core.Registry<E> getMinecraftRegistry(ResourceKey<net.minecraft.core.Registry<E>> key) {
-        return CraftRegistry.getMinecraftRegistry().registryOrThrow(key);
+        return CraftRegistry.getMinecraftRegistry().lookupOrThrow(key);
     }
 
     /**
@@ -126,61 +131,64 @@
      */
     public static <B extends Keyed> Registry<?> createRegistry(Class<? super B> bukkitClass, RegistryAccess registryHolder) {
         if (bukkitClass == Enchantment.class) {
-            return new CraftRegistry<>(Enchantment.class, registryHolder.registryOrThrow(Registries.ENCHANTMENT), CraftEnchantment::new, FieldRename.ENCHANTMENT_RENAME);
+            return new CraftRegistry<>(Enchantment.class, registryHolder.lookupOrThrow(Registries.ENCHANTMENT), CraftEnchantment::new, FieldRename.ENCHANTMENT_RENAME);
         }
         if (bukkitClass == GameEvent.class) {
-            return new CraftRegistry<>(GameEvent.class, registryHolder.registryOrThrow(Registries.GAME_EVENT), CraftGameEvent::new, FieldRename.NONE);
+            return new CraftRegistry<>(GameEvent.class, registryHolder.lookupOrThrow(Registries.GAME_EVENT), CraftGameEvent::new, FieldRename.NONE);
         }
         if (bukkitClass == MusicInstrument.class) {
-            return new CraftRegistry<>(MusicInstrument.class, registryHolder.registryOrThrow(Registries.INSTRUMENT), CraftMusicInstrument::new, FieldRename.NONE);
+            return new CraftRegistry<>(MusicInstrument.class, registryHolder.lookupOrThrow(Registries.INSTRUMENT), CraftMusicInstrument::new, FieldRename.NONE);
+        }
+        if (bukkitClass == MenuType.class) {
+            return new CraftRegistry<>(MenuType.class, registryHolder.lookupOrThrow(Registries.MENU), CraftMenuType::new, FieldRename.NONE);
         }
         if (bukkitClass == PotionEffectType.class) {
-            return new CraftRegistry<>(PotionEffectType.class, registryHolder.registryOrThrow(Registries.MOB_EFFECT), CraftPotionEffectType::new, FieldRename.NONE);
+            return new CraftRegistry<>(PotionEffectType.class, registryHolder.lookupOrThrow(Registries.MOB_EFFECT), CraftPotionEffectType::new, FieldRename.NONE);
         }
         if (bukkitClass == Structure.class) {
-            return new CraftRegistry<>(Structure.class, registryHolder.registryOrThrow(Registries.STRUCTURE), CraftStructure::new, FieldRename.NONE);
+            return new CraftRegistry<>(Structure.class, registryHolder.lookupOrThrow(Registries.STRUCTURE), CraftStructure::new, FieldRename.NONE);
         }
         if (bukkitClass == StructureType.class) {
-            return new CraftRegistry<>(StructureType.class, registryHolder.registryOrThrow(Registries.STRUCTURE_TYPE), CraftStructureType::new, FieldRename.NONE);
+            return new CraftRegistry<>(StructureType.class, registryHolder.lookupOrThrow(Registries.STRUCTURE_TYPE), CraftStructureType::new, FieldRename.NONE);
         }
         if (bukkitClass == Villager.Type.class) {
-            return new CraftRegistry<>(Villager.Type.class, registryHolder.registryOrThrow(Registries.VILLAGER_TYPE), CraftVillager.CraftType::new, FieldRename.NONE);
+            return new CraftRegistry<>(Villager.Type.class, registryHolder.lookupOrThrow(Registries.VILLAGER_TYPE), CraftVillager.CraftType::new, FieldRename.NONE);
         }
         if (bukkitClass == Villager.Profession.class) {
-            return new CraftRegistry<>(Villager.Profession.class, registryHolder.registryOrThrow(Registries.VILLAGER_PROFESSION), CraftVillager.CraftProfession::new, FieldRename.NONE);
+            return new CraftRegistry<>(Villager.Profession.class, registryHolder.lookupOrThrow(Registries.VILLAGER_PROFESSION), CraftVillager.CraftProfession::new, FieldRename.NONE);
         }
         if (bukkitClass == TrimMaterial.class) {
-            return new CraftRegistry<>(TrimMaterial.class, registryHolder.registryOrThrow(Registries.TRIM_MATERIAL), CraftTrimMaterial::new, FieldRename.NONE);
+            return new CraftRegistry<>(TrimMaterial.class, registryHolder.lookupOrThrow(Registries.TRIM_MATERIAL), CraftTrimMaterial::new, FieldRename.NONE);
         }
         if (bukkitClass == TrimPattern.class) {
-            return new CraftRegistry<>(TrimPattern.class, registryHolder.registryOrThrow(Registries.TRIM_PATTERN), CraftTrimPattern::new, FieldRename.NONE);
+            return new CraftRegistry<>(TrimPattern.class, registryHolder.lookupOrThrow(Registries.TRIM_PATTERN), CraftTrimPattern::new, FieldRename.NONE);
         }
         if (bukkitClass == DamageType.class) {
-            return new CraftRegistry<>(DamageType.class, registryHolder.registryOrThrow(Registries.DAMAGE_TYPE), CraftDamageType::new, FieldRename.NONE);
+            return new CraftRegistry<>(DamageType.class, registryHolder.lookupOrThrow(Registries.DAMAGE_TYPE), CraftDamageType::new, FieldRename.NONE);
         }
         if (bukkitClass == JukeboxSong.class) {
-            return new CraftRegistry<>(JukeboxSong.class, registryHolder.registryOrThrow(Registries.JUKEBOX_SONG), CraftJukeboxSong::new, FieldRename.NONE);
+            return new CraftRegistry<>(JukeboxSong.class, registryHolder.lookupOrThrow(Registries.JUKEBOX_SONG), CraftJukeboxSong::new, FieldRename.NONE);
         }
         if (bukkitClass == Wolf.Variant.class) {
-            return new CraftRegistry<>(Wolf.Variant.class, registryHolder.registryOrThrow(Registries.WOLF_VARIANT), CraftWolf.CraftVariant::new, FieldRename.NONE);
+            return new CraftRegistry<>(Wolf.Variant.class, registryHolder.lookupOrThrow(Registries.WOLF_VARIANT), CraftWolf.CraftVariant::new, FieldRename.NONE);
         }
         if (bukkitClass == BlockType.class) {
-            return new CraftRegistry<>(BlockType.class, registryHolder.registryOrThrow(Registries.BLOCK), CraftBlockType::new, FieldRename.NONE);
+            return new CraftRegistry<>(BlockType.class, registryHolder.lookupOrThrow(Registries.BLOCK), CraftBlockType::new, FieldRename.NONE);
         }
         if (bukkitClass == ItemType.class) {
-            return new CraftRegistry<>(ItemType.class, registryHolder.registryOrThrow(Registries.ITEM), CraftItemType::new, FieldRename.NONE);
+            return new CraftRegistry<>(ItemType.class, registryHolder.lookupOrThrow(Registries.ITEM), CraftItemType::new, FieldRename.NONE);
         }
         if (bukkitClass == Frog.Variant.class) {
-            return new CraftRegistry<>(Frog.Variant.class, registryHolder.registryOrThrow(Registries.FROG_VARIANT), CraftFrog.CraftVariant::new, FieldRename.NONE);
+            return new CraftRegistry<>(Frog.Variant.class, registryHolder.lookupOrThrow(Registries.FROG_VARIANT), CraftFrog.CraftVariant::new, FieldRename.NONE);
         }
         if (bukkitClass == Cat.Type.class) {
-            return new CraftRegistry<>(Cat.Type.class, registryHolder.registryOrThrow(Registries.CAT_VARIANT), CraftCat.CraftType::new, FieldRename.NONE);
+            return new CraftRegistry<>(Cat.Type.class, registryHolder.lookupOrThrow(Registries.CAT_VARIANT), CraftCat.CraftType::new, FieldRename.NONE);
         }
         if (bukkitClass == MapCursor.Type.class) {
-            return new CraftRegistry<>(MapCursor.Type.class, registryHolder.registryOrThrow(Registries.MAP_DECORATION_TYPE), CraftMapCursor.CraftType::new, FieldRename.NONE);
+            return new CraftRegistry<>(MapCursor.Type.class, registryHolder.lookupOrThrow(Registries.MAP_DECORATION_TYPE), CraftMapCursor.CraftType::new, FieldRename.NONE);
         }
         if (bukkitClass == PatternType.class) {
-            return new CraftRegistry<>(PatternType.class, registryHolder.registryOrThrow(Registries.BANNER_PATTERN), CraftPatternType::new, FieldRename.NONE);
+            return new CraftRegistry<>(PatternType.class, registryHolder.lookupOrThrow(Registries.BANNER_PATTERN), CraftPatternType::new, FieldRename.NONE);
         }
 
         return null;
@@ -270,6 +278,16 @@
         return bukkit;
     }
 
+    @NotNull
+    @Override
+    public B getOrThrow(@NotNull NamespacedKey namespacedKey) {
+        B object = this.get(namespacedKey);
+
+        Preconditions.checkArgument(object != null, "No %s registry entry found for key %s.", this.minecraftRegistry.key(), namespacedKey);
+
+        return object;
+    }
+
     @NotNull
     @Override
     public Stream<B> stream() {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/banner-server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java	(date 1729674280314)
@@ -6,34 +6,34 @@
 import net.minecraft.core.dispenser.BlockSource;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
-import net.minecraft.world.entity.projectile.ThrowableProjectile;
-import net.minecraft.world.entity.projectile.ThrownEgg;
-import net.minecraft.world.entity.projectile.ThrownEnderpearl;
-import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.ProjectileItem;
 import net.minecraft.world.level.block.DispenserBlock;
 import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
-import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.AbstractArrow;
-import org.bukkit.entity.Arrow;
+import org.bukkit.entity.AbstractWindCharge;
+import org.bukkit.entity.BreezeWindCharge;
+import org.bukkit.entity.DragonFireball;
 import org.bukkit.entity.Egg;
 import org.bukkit.entity.EnderPearl;
 import org.bukkit.entity.Fireball;
+import org.bukkit.entity.Firework;
+import org.bukkit.entity.LargeFireball;
 import org.bukkit.entity.LingeringPotion;
 import org.bukkit.entity.Projectile;
-import org.bukkit.entity.SmallFireball;
 import org.bukkit.entity.Snowball;
 import org.bukkit.entity.SpectralArrow;
 import org.bukkit.entity.ThrownExpBottle;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.WitherSkull;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionType;
 import org.bukkit.projectiles.BlockProjectileSource;
 import org.bukkit.util.Vector;
 
@@ -60,82 +60,81 @@
         // Copied from BlockDispenser.dispense()
         BlockSource sourceblock = new BlockSource((ServerLevel) this.dispenserBlock.getLevel(), this.dispenserBlock.getBlockPos(), this.dispenserBlock.getBlockState(), this.dispenserBlock);
         // Copied from DispenseBehaviorProjectile
-        Position iposition = DispenserBlock.getDispensePosition(sourceblock);
         Direction enumdirection = (Direction) sourceblock.state().getValue(DispenserBlock.FACING);
         net.minecraft.world.level.Level world = this.dispenserBlock.getLevel();
-        net.minecraft.world.entity.Entity launch = null;
+        net.minecraft.world.item.Item item = null;
 
         if (Snowball.class.isAssignableFrom(projectile)) {
-            launch = new net.minecraft.world.entity.projectile.Snowball(world, iposition.x(), iposition.y(), iposition.z());
+            item = Items.SNOWBALL;
         } else if (Egg.class.isAssignableFrom(projectile)) {
-            launch = new ThrownEgg(world, iposition.x(), iposition.y(), iposition.z());
+            item = Items.EGG;
         } else if (EnderPearl.class.isAssignableFrom(projectile)) {
-            launch = new ThrownEnderpearl(world, null);
-            launch.setPos(iposition.x(), iposition.y(), iposition.z());
+            item = Items.ENDER_PEARL;
         } else if (ThrownExpBottle.class.isAssignableFrom(projectile)) {
-            launch = new ThrownExperienceBottle(world, iposition.x(), iposition.y(), iposition.z());
+            item = Items.EXPERIENCE_BOTTLE;
         } else if (ThrownPotion.class.isAssignableFrom(projectile)) {
             if (LingeringPotion.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, iposition.x(), iposition.y(), iposition.z());
-                ((net.minecraft.world.entity.projectile.ThrownPotion) launch).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.LINGERING_POTION, 1)));
+                item = Items.LINGERING_POTION;
             } else {
-                launch = new net.minecraft.world.entity.projectile.ThrownPotion(world, iposition.x(), iposition.y(), iposition.z());
-                ((net.minecraft.world.entity.projectile.ThrownPotion) launch).setItem(CraftItemStack.asNMSCopy(new ItemStack(org.bukkit.Material.SPLASH_POTION, 1)));
+                item = Items.SPLASH_POTION;
             }
         } else if (AbstractArrow.class.isAssignableFrom(projectile)) {
             if (TippedArrow.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.Arrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW), null);
-                ((Arrow) launch.getBukkitEntity()).setBasePotionType(PotionType.WATER);
+                item = Items.TIPPED_ARROW;
             } else if (SpectralArrow.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.SpectralArrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.SPECTRAL_ARROW), null);
+                item = Items.SPECTRAL_ARROW;
             } else {
-                launch = new net.minecraft.world.entity.projectile.Arrow(world, iposition.x(), iposition.y(), iposition.z(), new net.minecraft.world.item.ItemStack(net.minecraft.world.item.Items.ARROW), null);
+                item = Items.ARROW;
             }
-            ((net.minecraft.world.entity.projectile.AbstractArrow) launch).pickup = net.minecraft.world.entity.projectile.AbstractArrow.Pickup.ALLOWED;
-            ((net.minecraft.world.entity.projectile.AbstractArrow) launch).banner$setProjectileSource(this);
         } else if (Fireball.class.isAssignableFrom(projectile)) {
-            double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
-            double d1 = iposition.y() + (double) ((float) enumdirection.getStepY() * 0.3F);
-            double d2 = iposition.z() + (double) ((float) enumdirection.getStepZ() * 0.3F);
-            RandomSource random = world.random;
-            double d3 = random.nextGaussian() * 0.05D + (double) enumdirection.getStepX();
-            double d4 = random.nextGaussian() * 0.05D + (double) enumdirection.getStepY();
-            double d5 = random.nextGaussian() * 0.05D + (double) enumdirection.getStepZ();
-
-            if (SmallFireball.class.isAssignableFrom(projectile)) {
-                launch = new net.minecraft.world.entity.projectile.SmallFireball(world, null, new Vec3(d0, d1, d2));
-            } else if (WitherSkull.class.isAssignableFrom(projectile)) {
-                launch = EntityType.WITHER_SKULL.create(world);
-                launch.setPos(d0, d1, d2);
-
-                ((AbstractHurtingProjectile) launch).assignDirectionalMovement(new Vec3(d3, d4, d5), 0.1D);
+            if (AbstractWindCharge.class.isAssignableFrom(projectile)) {
+                item = Items.WIND_CHARGE;
             } else {
-                launch = EntityType.FIREBALL.create(world);
-                launch.setPos(d0, d1, d2);
+                item = Items.FIRE_CHARGE;
+            }
+        } else if (Firework.class.isAssignableFrom(projectile)) {
+            item = Items.FIREWORK_ROCKET;
+        }
 
-                ((AbstractHurtingProjectile) launch).assignDirectionalMovement(new Vec3(d3, d4, d5), 0.1D);
-            }
+        Preconditions.checkArgument(item instanceof ProjectileItem, "Projectile not supported");
+
+        ItemStack itemstack = new ItemStack(item);
+        ProjectileItem projectileItem = (ProjectileItem) item;
+        ProjectileItem.DispenseConfig dispenseConfig = projectileItem.createDispenseConfig();
 
-            ((AbstractHurtingProjectile) launch).banner$setProjectileSource(this);
-        }
+        Position iposition = dispenseConfig.positionFunction().getDispensePosition(sourceblock, enumdirection);
+        net.minecraft.world.entity.projectile.Projectile launch = projectileItem.asProjectile(world, iposition, itemstack, enumdirection);
+
+        if (Fireball.class.isAssignableFrom(projectile)) {
+            AbstractHurtingProjectile customFireball = null;
+            if (WitherSkull.class.isAssignableFrom(projectile)) {
+                launch = customFireball = EntityType.WITHER_SKULL.create(world, EntitySpawnReason.TRIGGERED);
+            } else if (DragonFireball.class.isAssignableFrom(projectile)) {
+                launch = EntityType.DRAGON_FIREBALL.create(world, EntitySpawnReason.TRIGGERED);
+            } else if (BreezeWindCharge.class.isAssignableFrom(projectile)) {
+                launch = customFireball = EntityType.BREEZE_WIND_CHARGE.create(world, EntitySpawnReason.TRIGGERED);
+            } else if (LargeFireball.class.isAssignableFrom(projectile)) {
+                launch = customFireball = EntityType.FIREBALL.create(world, EntitySpawnReason.TRIGGERED);
+            }
 
-        Preconditions.checkArgument(launch != null, "Projectile not supported");
+            if (customFireball != null) {
+                customFireball.setPos(iposition.x(), iposition.y(), iposition.z());
 
-        if (launch instanceof net.minecraft.world.entity.projectile.Projectile) {
-            if (launch instanceof ThrowableProjectile) {
-                ((ThrowableProjectile) launch).banner$setProjectileSource(this);
+                // Values from ItemFireball
+                RandomSource randomsource = world.getRandom();
+                double d0 = randomsource.triangle((double) enumdirection.getStepX(), 0.11485000000000001D);
+                double d1 = randomsource.triangle((double) enumdirection.getStepY(), 0.11485000000000001D);
+                double d2 = randomsource.triangle((double) enumdirection.getStepZ(), 0.11485000000000001D);
+                Vec3 vec3d = new Vec3(d0, d1, d2);
+                customFireball.assignDirectionalMovement(vec3d, 0.1D);
             }
-            // Values from DispenseBehaviorProjectile
-            float a = 6.0F;
-            float b = 1.1F;
-            if (launch instanceof net.minecraft.world.entity.projectile.ThrownPotion || launch instanceof ThrownExpBottle) {
-                // Values from respective DispenseBehavior classes
-                a *= 0.5F;
-                b *= 1.25F;
-            }
-            // Copied from DispenseBehaviorProjectile
-            ((net.minecraft.world.entity.projectile.Projectile) launch).shoot((double) enumdirection.getStepX(), (double) ((float) enumdirection.getStepY() + 0.1F), (double) enumdirection.getStepZ(), b, a);
+        }
+
+        if (launch instanceof net.minecraft.world.entity.projectile.AbstractArrow arrow) {
+            arrow.pickup = net.minecraft.world.entity.projectile.AbstractArrow.Pickup.ALLOWED;
         }
+        launch.projectileSource = this;
+        projectileItem.shoot(launch, (double) enumdirection.getStepX(), (double) enumdirection.getStepY(), (double) enumdirection.getStepZ(), dispenseConfig.power(), dispenseConfig.uncertainty());
 
         if (velocity != null) {
             ((T) launch.getBukkitEntity()).setVelocity(velocity);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java	(date 1729674280108)
@@ -3,7 +3,7 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
-public final class CraftSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rotatable {
+public final class CraftSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Skull, org.bukkit.block.data.Powerable, org.bukkit.block.data.Rotatable {
 
     public CraftSkull() {
         super();
@@ -13,6 +13,20 @@
         super(state);
     }
 
+    // org.bukkit.craftbukkit.block.data.CraftPowerable
+
+    private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.SkullBlock.class, "powered");
+
+    @Override
+    public boolean isPowered() {
+        return this.get(CraftSkull.POWERED);
+    }
+
+    @Override
+    public void setPowered(boolean powered) {
+        this.set(CraftSkull.POWERED, powered);
+    }
+
     // org.bukkit.craftbukkit.block.data.CraftRotatable
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.SkullBlock.class, "rotation");
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java	(date 1729674280177)
@@ -33,7 +33,7 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$allowedBarterItems().add(item);
+        return this.getHandle().allowedBarterItems.add(item);
     }
 
     @Override
@@ -41,7 +41,7 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$allowedBarterItems().remove(item);
+        return this.getHandle().allowedBarterItems.remove(item);
     }
 
     @Override
@@ -49,7 +49,7 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$interestItems().add(item);
+        return this.getHandle().interestItems.add(item);
     }
 
     @Override
@@ -57,17 +57,17 @@
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftItemType.bukkitToMinecraft(material);
-        return this.getHandle().bridge$interestItems().remove(item);
+        return this.getHandle().interestItems.remove(item);
     }
 
     @Override
     public Set<Material> getInterestList() {
-        return Collections.unmodifiableSet(this.getHandle().bridge$interestItems().stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
+        return Collections.unmodifiableSet(this.getHandle().interestItems.stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
     }
 
     @Override
     public Set<Material> getBarterList() {
-        return Collections.unmodifiableSet(this.getHandle().bridge$allowedBarterItems().stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
+        return Collections.unmodifiableSet(this.getHandle().allowedBarterItems.stream().map(CraftItemType::minecraftToBukkit).collect(Collectors.toSet()));
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java	(date 1729674280170)
@@ -98,7 +98,7 @@
     public void setVariant(Variant variant) {
         Preconditions.checkArgument(variant != null, "Variant cannot be null");
 
-        this.getHandle().setVariant(net.minecraft.world.entity.animal.MushroomCow.MushroomType.values()[variant.ordinal()]);
+        this.getHandle().setVariant(net.minecraft.world.entity.animal.MushroomCow.Variant.values()[variant.ordinal()]);
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java	(date 1729674280150)
@@ -1,8 +1,8 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.fabric.BukkitRegistry;
 import java.util.Locale;
+import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
@@ -18,11 +18,7 @@
         Preconditions.checkArgument(minecraft != null);
 
         net.minecraft.core.Registry<net.minecraft.world.entity.EntityType<?>> registry = CraftRegistry.getMinecraftRegistry(Registries.ENTITY_TYPE);
-        NamespacedKey key = CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location());
-        if (BukkitRegistry.entityTypeMap.containsKey(key)) {
-            return BukkitRegistry.entityTypeMap.get(key);
-        }
-        EntityType bukkit = Registry.ENTITY_TYPE.get(key);
+        EntityType bukkit = Registry.ENTITY_TYPE.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
 
         Preconditions.checkArgument(bukkit != null);
 
@@ -36,6 +32,19 @@
                 .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
     }
 
+    public static Holder<net.minecraft.world.entity.EntityType<?>> bukkitToMinecraftHolder(EntityType bukkit) {
+        Preconditions.checkArgument(bukkit != null);
+
+        net.minecraft.core.Registry<net.minecraft.world.entity.EntityType<?>> registry = CraftRegistry.getMinecraftRegistry(Registries.ENTITY_TYPE);
+
+        if (registry.wrapAsHolder(CraftEntityType.bukkitToMinecraft(bukkit)) instanceof Holder.Reference<net.minecraft.world.entity.EntityType<?>> holder) {
+            return holder;
+        }
+
+        throw new IllegalArgumentException("No Reference holder found for " + bukkit
+                + ", this can happen if a plugin creates its own sound effect with out properly registering it.");
+    }
+
     public static String bukkitToString(EntityType bukkit) {
         Preconditions.checkArgument(bukkit != null);
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java b/banner-server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java	(date 1729674280121)
@@ -93,8 +93,7 @@
                 return !((CraftWorld) world).getHandle().equals(this.handle.level);
             });
 
-            this.handle.respawnDragon(list.stream().map(enderCrystal -> ((CraftEnderCrystal) enderCrystal).getHandle()).collect(Collectors.toList()));
-            return this.handle.bridge$isRespawnDragon();
+            return this.handle.respawnDragon(list.stream().map(enderCrystal -> ((CraftEnderCrystal) enderCrystal).getHandle()).collect(Collectors.toList()));
         }
         return false;
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java	(date 1729674280191)
@@ -3,7 +3,7 @@
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Squid;
 
-public class CraftSquid extends CraftWaterMob implements Squid {
+public class CraftSquid extends CraftAgeable implements Squid {
 
     public CraftSquid(CraftServer server, net.minecraft.world.entity.animal.Squid entity) {
         super(server, entity);
Index: banner-server/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java b/banner-server/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java	(date 1729674280325)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.tag;
 
+import java.util.Objects;
 import net.minecraft.core.HolderSet;
 import net.minecraft.core.Registry;
 import net.minecraft.tags.TagKey;
@@ -18,7 +19,7 @@
     public CraftTag(Registry<N> registry, TagKey<N> tag) {
         this.registry = registry;
         this.tag = tag;
-        this.handle = registry.getTag(this.tag).orElseThrow();
+        this.handle = registry.get(this.tag).orElseThrow();
     }
 
     public HolderSet.Named<N> getHandle() {
@@ -29,4 +30,30 @@
     public NamespacedKey getKey() {
         return CraftNamespacedKey.fromMinecraft(this.tag.location());
     }
+
+    @Override
+    public int hashCode() {
+        int hash = 3;
+        hash = 59 * hash + Objects.hashCode(this.registry);
+        hash = 59 * hash + Objects.hashCode(this.tag);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (obj == this) {
+            return true;
+        }
+
+        if (!(obj instanceof CraftTag<?, ?> other)) {
+            return false;
+        }
+
+        return Objects.equals(this.registry, other.registry) && Objects.equals(this.tag, other.tag);
+    }
+
+    @Override
+    public String toString() {
+        return "CraftTag{" + this.tag + '}';
+    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/banner-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java	(date 1729674280302)
@@ -6,9 +6,8 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import org.bukkit.Bukkit;
@@ -32,7 +31,7 @@
 
     @Override
     public int getId() {
-        return this.worldMap.bridge$mapView().getId();
+        return this.worldMap.id.id();
     }
 
     @Override
@@ -53,14 +52,14 @@
     @Override
     public World getWorld() {
         ResourceKey<net.minecraft.world.level.Level> dimension = this.worldMap.dimension;
-        ServerLevel world = BukkitMethodHooks.getServer().getLevel(dimension);
+        ServerLevel world = MinecraftServer.getServer().getLevel(dimension);
 
         if (world != null) {
             return world.getWorld();
         }
 
-        if (this.worldMap.bridge$uniqueId() != null) {
-            return Bukkit.getServer().getWorld(this.worldMap.bridge$uniqueId());
+        if (this.worldMap.uniqueId != null) {
+            return Bukkit.getServer().getWorld(this.worldMap.uniqueId);
         }
         return null;
     }
@@ -68,7 +67,7 @@
     @Override
     public void setWorld(World world) {
         this.worldMap.dimension = ((CraftWorld) world).getHandle().dimension();
-        this.worldMap.banner$setUniqueId(world.getUID());
+        this.worldMap.uniqueId = world.getUID();
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/DelegatedGeneratorAccess.java	(date 1729674280334)
@@ -22,8 +22,6 @@
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.level.BlockGetter;
@@ -76,66 +74,49 @@
         return this.handle.getSeed();
     }
 
+    @Override
+    public boolean ensureCanWrite(BlockPos pos) {
+        return this.handle.ensureCanWrite(pos);
+    }
+
     @Override
     public void setCurrentlyGenerating(Supplier<String> structureName) {
         this.handle.setCurrentlyGenerating(structureName);
     }
 
-    @Override
-    public boolean ensureCanWrite(BlockPos pos) {
-        return this.handle.ensureCanWrite(pos);
-    }
-
     @Override
     public ServerLevel getLevel() {
         return this.handle.getLevel();
     }
 
-    // Banner TODO fixme
-    /*
-    @Override
-    public void addFreshEntityWithPassengers(Entity arg0, CreatureSpawnEvent.SpawnReason arg1) {
-        this.handle.addFreshEntityWithPassengers(arg0, arg1);
-    }*/
-
     @Override
     public void addFreshEntityWithPassengers(Entity entity) {
         this.handle.addFreshEntityWithPassengers(entity);
     }
 
+    @Override
+    public void addFreshEntityWithPassengers(Entity entity, CreatureSpawnEvent.SpawnReason reason) {
+        this.handle.addFreshEntityWithPassengers(entity, reason);
+    }
+
     @Override
     public ServerLevel getMinecraftWorld() {
         return this.handle.getMinecraftWorld();
     }
 
-    @Override
-    public DifficultyInstance getCurrentDifficultyAt(BlockPos pos) {
-        return this.handle.getCurrentDifficultyAt(pos);
-    }
-
-    @Override
-    public void neighborShapeChanged(Direction direction, BlockState neighborState, BlockPos pos, BlockPos neighborPos, int flags, int maxUpdateDepth) {
-        this.handle.neighborShapeChanged(direction, neighborState, pos, neighborPos, flags, maxUpdateDepth);
-    }
-
     @Override
     public long dayTime() {
         return this.handle.dayTime();
     }
 
     @Override
-    public LevelData getLevelData() {
-        return this.handle.getLevelData();
-    }
-
-    @Override
-    public boolean hasChunk(int chunkX, int chunkZ) {
-        return this.handle.hasChunk(chunkX, chunkZ);
+    public long nextSubTickCount() {
+        return this.handle.nextSubTickCount();
     }
 
     @Override
-    public ChunkSource getChunkSource() {
-        return this.handle.getChunkSource();
+    public LevelTickAccess<Block> getBlockTicks() {
+        return this.handle.getBlockTicks();
     }
 
     @Override
@@ -148,6 +129,11 @@
         this.handle.scheduleTick(pos, block, delay);
     }
 
+    @Override
+    public LevelTickAccess<Fluid> getFluidTicks() {
+        return this.handle.getFluidTicks();
+    }
+
     @Override
     public void scheduleTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority) {
         this.handle.scheduleTick(pos, fluid, delay, priority);
@@ -158,19 +144,34 @@
         this.handle.scheduleTick(pos, fluid, delay);
     }
 
+    @Override
+    public LevelData getLevelData() {
+        return this.handle.getLevelData();
+    }
+
+    @Override
+    public DifficultyInstance getCurrentDifficultyAt(BlockPos pos) {
+        return this.handle.getCurrentDifficultyAt(pos);
+    }
+
+    @Override
+    public MinecraftServer getServer() {
+        return this.handle.getServer();
+    }
+
     @Override
     public Difficulty getDifficulty() {
         return this.handle.getDifficulty();
     }
 
     @Override
-    public void blockUpdated(BlockPos pos, Block block) {
-        this.handle.blockUpdated(pos, block);
+    public ChunkSource getChunkSource() {
+        return this.handle.getChunkSource();
     }
 
     @Override
-    public MinecraftServer getServer() {
-        return this.handle.getServer();
+    public boolean hasChunk(int chunkX, int chunkZ) {
+        return this.handle.hasChunk(chunkX, chunkZ);
     }
 
     @Override
@@ -179,18 +180,13 @@
     }
 
     @Override
-    public LevelTickAccess<Block> getBlockTicks() {
-        return this.handle.getBlockTicks();
+    public void blockUpdated(BlockPos pos, Block block) {
+        this.handle.blockUpdated(pos, block);
     }
 
     @Override
-    public long nextSubTickCount() {
-        return this.handle.nextSubTickCount();
-    }
-
-    @Override
-    public LevelTickAccess<Fluid> getFluidTicks() {
-        return this.handle.getFluidTicks();
+    public void neighborShapeChanged(Direction direction, BlockPos pos, BlockPos neighborPos, BlockState neighborState, int flags, int maxUpdateDepth) {
+        this.handle.neighborShapeChanged(direction, pos, neighborPos, neighborState, flags, maxUpdateDepth);
     }
 
     @Override
@@ -204,8 +200,8 @@
     }
 
     @Override
-    public void levelEvent(int eventId, BlockPos pos, int data) {
-        this.handle.levelEvent(eventId, pos, data);
+    public void addParticle(ParticleOptions parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ) {
+        this.handle.addParticle(parameters, x, y, z, velocityX, velocityY, velocityZ);
     }
 
     @Override
@@ -214,8 +210,8 @@
     }
 
     @Override
-    public void addParticle(ParticleOptions parameters, double x, double y, double z, double velocityX, double velocityY, double velocityZ) {
-        this.handle.addParticle(parameters, x, y, z, velocityX, velocityY, velocityZ);
+    public void levelEvent(int eventId, BlockPos pos, int data) {
+        this.handle.levelEvent(eventId, pos, data);
     }
 
     @Override
@@ -224,8 +220,8 @@
     }
 
     @Override
-    public void gameEvent(Holder<GameEvent> event, BlockPos pos, GameEvent.Context emitter) {
-        this.handle.gameEvent(event, pos, emitter);
+    public void gameEvent(Entity entity, Holder<GameEvent> event, Vec3 pos) {
+        this.handle.gameEvent(entity, event, pos);
     }
 
     @Override
@@ -234,13 +230,13 @@
     }
 
     @Override
-    public void gameEvent(Entity entity, Holder<GameEvent> event, Vec3 pos) {
-        this.handle.gameEvent(entity, event, pos);
+    public void gameEvent(Holder<GameEvent> event, BlockPos pos, GameEvent.Context emitter) {
+        this.handle.gameEvent(event, pos, emitter);
     }
 
     @Override
-    public List<VoxelShape> getEntityCollisions(Entity entity, AABB box) {
-        return this.handle.getEntityCollisions(entity, box);
+    public void gameEvent(ResourceKey<GameEvent> event, BlockPos pos, GameEvent.Context emitter) {
+        this.handle.gameEvent(event, pos, emitter);
     }
 
     @Override
@@ -249,8 +245,8 @@
     }
 
     @Override
-    public BlockPos getHeightmapPos(Heightmap.Types heightmap, BlockPos pos) {
-        return this.handle.getHeightmapPos(heightmap, pos);
+    public List<VoxelShape> getEntityCollisions(Entity entity, AABB box) {
+        return this.handle.getEntityCollisions(entity, box);
     }
 
     @Override
@@ -259,114 +255,98 @@
     }
 
     @Override
-    public boolean hasNearbyAlivePlayer(double x, double y, double z, double range) {
-        return this.handle.hasNearbyAlivePlayer(x, y, z, range);
+    public BlockPos getHeightmapPos(Heightmap.Types heightmap, BlockPos pos) {
+        return this.handle.getHeightmapPos(heightmap, pos);
     }
 
     @Override
-    public List<? extends Player> players() {
-        return this.handle.players();
+    public float getMoonBrightness() {
+        return this.handle.getMoonBrightness();
     }
 
     @Override
-    public List<Entity> getEntities(Entity except, AABB box, Predicate<? super Entity> predicate) {
-        return this.handle.getEntities(except, box, predicate);
+    public float getTimeOfDay(float tickDelta) {
+        return this.handle.getTimeOfDay(tickDelta);
     }
 
     @Override
-    public <T extends Entity> List<T> getEntities(EntityTypeTest<Entity, T> filter, AABB box, Predicate<? super T> predicate) {
-        return this.handle.getEntities(filter, box, predicate);
+    public int getMoonPhase() {
+        return this.handle.getMoonPhase();
     }
 
     @Override
-    public List<Entity> getEntities(Entity except, AABB box) {
-        return this.handle.getEntities(except, box);
+    public ChunkAccess getChunk(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
+        return this.handle.getChunk(chunkX, chunkZ, leastStatus, create);
     }
 
     @Override
-    public <T extends Entity> List<T> getEntitiesOfClass(Class<T> entityClass, AABB box) {
-        return this.handle.getEntitiesOfClass(entityClass, box);
+    public int getHeight(Heightmap.Types heightmap, int x, int z) {
+        return this.handle.getHeight(heightmap, x, z);
     }
 
     @Override
-    public <T extends Entity> List<T> getEntitiesOfClass(Class<T> entityClass, AABB box, Predicate<? super T> predicate) {
-        return this.handle.getEntitiesOfClass(entityClass, box, predicate);
+    public int getSkyDarken() {
+        return this.handle.getSkyDarken();
     }
 
     @Override
-    public Player getNearestPlayer(TargetingConditions targetPredicate, LivingEntity entity, double x, double y, double z) {
-        return this.handle.getNearestPlayer(targetPredicate, entity, x, y, z);
+    public BiomeManager getBiomeManager() {
+        return this.handle.getBiomeManager();
     }
 
     @Override
-    public Player getNearestPlayer(TargetingConditions targetPredicate, double x, double y, double z) {
-        return this.handle.getNearestPlayer(targetPredicate, x, y, z);
+    public Holder<Biome> getBiome(BlockPos pos) {
+        return this.handle.getBiome(pos);
     }
 
     @Override
-    public Player getNearestPlayer(Entity entity, double maxDistance) {
-        return this.handle.getNearestPlayer(entity, maxDistance);
+    public Stream<BlockState> getBlockStatesIfLoaded(AABB box) {
+        return this.handle.getBlockStatesIfLoaded(box);
     }
 
     @Override
-    public Player getNearestPlayer(double x, double y, double z, double maxDistance, Predicate<Entity> targetPredicate) {
-        return this.handle.getNearestPlayer(x, y, z, maxDistance, targetPredicate);
+    public int getBlockTint(BlockPos pos, ColorResolver colorResolver) {
+        return this.handle.getBlockTint(pos, colorResolver);
     }
 
     @Override
-    public Player getNearestPlayer(double x, double y, double z, double maxDistance, boolean ignoreCreative) {
-        return this.handle.getNearestPlayer(x, y, z, maxDistance, ignoreCreative);
+    public Holder<Biome> getNoiseBiome(int biomeX, int biomeY, int biomeZ) {
+        return this.handle.getNoiseBiome(biomeX, biomeY, biomeZ);
     }
 
     @Override
-    public Player getNearestPlayer(TargetingConditions targetPredicate, LivingEntity entity) {
-        return this.handle.getNearestPlayer(targetPredicate, entity);
+    public Holder<Biome> getUncachedNoiseBiome(int biomeX, int biomeY, int biomeZ) {
+        return this.handle.getUncachedNoiseBiome(biomeX, biomeY, biomeZ);
     }
 
     @Override
-    public <T extends LivingEntity> T getNearestEntity(Class<? extends T> entityClass, TargetingConditions targetPredicate, LivingEntity entity, double x, double y, double z, AABB box) {
-        return this.handle.getNearestEntity(entityClass, targetPredicate, entity, x, y, z, box);
+    public boolean isClientSide() {
+        return this.handle.isClientSide();
     }
 
     @Override
-    public <T extends LivingEntity> T getNearestEntity(List<? extends T> entityList, TargetingConditions targetPredicate, LivingEntity entity, double x, double y, double z) {
-        return this.handle.getNearestEntity(entityList, targetPredicate, entity, x, y, z);
+    public int getSeaLevel() {
+        return this.handle.getSeaLevel();
     }
 
     @Override
-    public Player getPlayerByUUID(UUID uuid) {
-        return this.handle.getPlayerByUUID(uuid);
+    public DimensionType dimensionType() {
+        return this.handle.dimensionType();
     }
 
     @Override
-    public List<Player> getNearbyPlayers(TargetingConditions targetPredicate, LivingEntity entity, AABB box) {
-        return this.handle.getNearbyPlayers(targetPredicate, entity, box);
-    }
-
-    @Override
-    public <T extends LivingEntity> List<T> getNearbyEntities(Class<T> entityClass, TargetingConditions targetPredicate, LivingEntity targetingEntity, AABB box) {
-        return this.handle.getNearbyEntities(entityClass, targetPredicate, targetingEntity, box);
-    }
-
-    @Override
-    @Deprecated
-    public float getLightLevelDependentMagicValue(BlockPos pos) {
-        return this.handle.getLightLevelDependentMagicValue(pos);
-    }
-
-    @Override
-    public BlockGetter getChunkForCollisions(int chunkX, int chunkZ) {
-        return this.handle.getChunkForCollisions(chunkX, chunkZ);
+    public int getMinY() {
+        return this.handle.getMinY();
     }
 
     @Override
-    public int getMaxLocalRawBrightness(BlockPos pos) {
-        return this.handle.getMaxLocalRawBrightness(pos);
+    public int getHeight() {
+        return this.handle.getHeight();
     }
 
     @Override
-    public int getMaxLocalRawBrightness(BlockPos pos, int ambientDarkness) {
-        return this.handle.getMaxLocalRawBrightness(pos, ambientDarkness);
+    public boolean isEmptyBlock(BlockPos pos) {
+        return this.handle.isEmptyBlock(pos);
     }
 
     @Override
@@ -380,29 +360,28 @@
     }
 
     @Override
-    public Stream<BlockState> getBlockStatesIfLoaded(AABB box) {
-        return this.handle.getBlockStatesIfLoaded(box);
+    public float getLightLevelDependentMagicValue(BlockPos pos) {
+        return this.handle.getLightLevelDependentMagicValue(pos);
     }
 
     @Override
-    public Holder<Biome> getUncachedNoiseBiome(int biomeX, int biomeY, int biomeZ) {
-        return this.handle.getUncachedNoiseBiome(biomeX, biomeY, biomeZ);
+    public ChunkAccess getChunk(BlockPos pos) {
+        return this.handle.getChunk(pos);
     }
 
     @Override
-    @Deprecated
-    public int getSeaLevel() {
-        return this.handle.getSeaLevel();
+    public ChunkAccess getChunk(int chunkX, int chunkZ) {
+        return this.handle.getChunk(chunkX, chunkZ);
     }
 
     @Override
-    public boolean containsAnyLiquid(AABB box) {
-        return this.handle.containsAnyLiquid(box);
+    public ChunkAccess getChunk(int chunkX, int chunkZ, ChunkStatus status) {
+        return this.handle.getChunk(chunkX, chunkZ, status);
     }
 
     @Override
-    public int getMinBuildHeight() {
-        return this.handle.getMinBuildHeight();
+    public BlockGetter getChunkForCollisions(int chunkX, int chunkZ) {
+        return this.handle.getChunkForCollisions(chunkX, chunkZ);
     }
 
     @Override
@@ -411,118 +390,78 @@
     }
 
     @Override
-    public boolean isEmptyBlock(BlockPos pos) {
-        return this.handle.isEmptyBlock(pos);
-    }
-
-    @Override
-    public boolean isClientSide() {
-        return this.handle.isClientSide();
+    public boolean containsAnyLiquid(AABB box) {
+        return this.handle.containsAnyLiquid(box);
     }
 
     @Override
-    public DimensionType dimensionType() {
-        return this.handle.dimensionType();
+    public int getMaxLocalRawBrightness(BlockPos pos) {
+        return this.handle.getMaxLocalRawBrightness(pos);
     }
 
     @Override
-    public FeatureFlagSet enabledFeatures() {
-        return this.handle.enabledFeatures();
+    public int getMaxLocalRawBrightness(BlockPos pos, int ambientDarkness) {
+        return this.handle.getMaxLocalRawBrightness(pos, ambientDarkness);
     }
 
     @Override
-    @Deprecated
     public boolean hasChunkAt(int x, int z) {
         return this.handle.hasChunkAt(x, z);
     }
 
     @Override
-    @Deprecated
     public boolean hasChunkAt(BlockPos pos) {
         return this.handle.hasChunkAt(pos);
     }
 
     @Override
-    public <T> HolderLookup<T> holderLookup(ResourceKey<? extends Registry<? extends T>> registryRef) {
-        return this.handle.holderLookup(registryRef);
-    }
-
-    @Override
-    public RegistryAccess registryAccess() {
-        return this.handle.registryAccess();
-    }
-
-    @Override
-    public Holder<Biome> getNoiseBiome(int biomeX, int biomeY, int biomeZ) {
-        return this.handle.getNoiseBiome(biomeX, biomeY, biomeZ);
-    }
-
-    @Override
-    public int getBlockTint(BlockPos pos, ColorResolver colorResolver) {
-        return this.handle.getBlockTint(pos, colorResolver);
-    }
-
-    @Override
-    @Deprecated
     public boolean hasChunksAt(BlockPos min, BlockPos max) {
         return this.handle.hasChunksAt(min, max);
     }
 
     @Override
-    @Deprecated
     public boolean hasChunksAt(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
         return this.handle.hasChunksAt(minX, minY, minZ, maxX, maxY, maxZ);
     }
 
     @Override
-    @Deprecated
     public boolean hasChunksAt(int minX, int minZ, int maxX, int maxZ) {
         return this.handle.hasChunksAt(minX, minZ, maxX, maxZ);
     }
 
     @Override
-    public ChunkAccess getChunk(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
-        return this.handle.getChunk(chunkX, chunkZ, leastStatus, create);
+    public RegistryAccess registryAccess() {
+        return this.handle.registryAccess();
     }
 
     @Override
-    public ChunkAccess getChunk(int chunkX, int chunkZ, ChunkStatus status) {
-        return this.handle.getChunk(chunkX, chunkZ, status);
+    public FeatureFlagSet enabledFeatures() {
+        return this.handle.enabledFeatures();
     }
 
     @Override
-    public ChunkAccess getChunk(BlockPos pos) {
-        return this.handle.getChunk(pos);
+    public <T> HolderLookup<T> holderLookup(ResourceKey<? extends Registry<? extends T>> registryRef) {
+        return this.handle.holderLookup(registryRef);
     }
 
     @Override
-    public ChunkAccess getChunk(int chunkX, int chunkZ) {
-        return this.handle.getChunk(chunkX, chunkZ);
+    public float getShade(Direction direction, boolean shaded) {
+        return this.handle.getShade(direction, shaded);
     }
 
     @Override
-    public int getHeight(Heightmap.Types heightmap, int x, int z) {
-        return this.handle.getHeight(heightmap, x, z);
+    public LevelLightEngine getLightEngine() {
+        return this.handle.getLightEngine();
     }
 
     @Override
-    public int getHeight() {
-        return this.handle.getHeight();
+    public int getBrightness(LightLayer type, BlockPos pos) {
+        return this.handle.getBrightness(type, pos);
     }
 
     @Override
-    public Holder<Biome> getBiome(BlockPos pos) {
-        return this.handle.getBiome(pos);
-    }
-
-    @Override
-    public int getSkyDarken() {
-        return this.handle.getSkyDarken();
-    }
-
-    @Override
-    public BiomeManager getBiomeManager() {
-        return this.handle.getBiomeManager();
+    public int getRawBrightness(BlockPos pos, int ambientDarkness) {
+        return this.handle.getRawBrightness(pos, ambientDarkness);
     }
 
     @Override
@@ -531,238 +470,233 @@
     }
 
     @Override
-    public int getRawBrightness(BlockPos pos, int ambientDarkness) {
-        return this.handle.getRawBrightness(pos, ambientDarkness);
+    public WorldBorder getWorldBorder() {
+        return this.handle.getWorldBorder();
     }
 
     @Override
-    public LevelLightEngine getLightEngine() {
-        return this.handle.getLightEngine();
+    public boolean isUnobstructed(BlockState state, BlockPos pos, CollisionContext context) {
+        return this.handle.isUnobstructed(state, pos, context);
     }
 
     @Override
-    public int getBrightness(LightLayer type, BlockPos pos) {
-        return this.handle.getBrightness(type, pos);
+    public boolean isUnobstructed(Entity entity) {
+        return this.handle.isUnobstructed(entity);
     }
 
     @Override
-    public float getShade(Direction direction, boolean shaded) {
-        return this.handle.getShade(direction, shaded);
-    }
-
-    @Override
-    public BlockEntity getBlockEntity(BlockPos pos) {
-        return this.handle.getBlockEntity(pos);
+    public boolean noCollision(AABB box) {
+        return this.handle.noCollision(box);
     }
 
     @Override
-    public double getBlockFloorHeight(VoxelShape blockCollisionShape, Supplier<VoxelShape> belowBlockCollisionShapeGetter) {
-        return this.handle.getBlockFloorHeight(blockCollisionShape, belowBlockCollisionShapeGetter);
+    public boolean noCollision(Entity entity) {
+        return this.handle.noCollision(entity);
     }
 
     @Override
-    public double getBlockFloorHeight(BlockPos pos) {
-        return this.handle.getBlockFloorHeight(pos);
+    public boolean noCollision(Entity entity, AABB box) {
+        return this.handle.noCollision(entity, box);
     }
 
     @Override
-    public BlockHitResult clipWithInteractionOverride(Vec3 start, Vec3 end, BlockPos pos, VoxelShape shape, BlockState state) {
-        return this.handle.clipWithInteractionOverride(start, end, pos, shape, state);
+    public boolean noCollision(Entity entity, AABB box, boolean checkFluid) {
+        return this.handle.noCollision(entity, box, checkFluid);
     }
 
     @Override
-    public BlockState getBlockState(BlockPos pos) {
-        return this.handle.getBlockState(pos);
+    public boolean noBlockCollision(Entity entity, AABB box) {
+        return this.handle.noBlockCollision(entity, box);
     }
 
     @Override
-    public FluidState getFluidState(BlockPos pos) {
-        return this.handle.getFluidState(pos);
+    public Iterable<VoxelShape> getCollisions(Entity entity, AABB box) {
+        return this.handle.getCollisions(entity, box);
     }
 
     @Override
-    public int getLightEmission(BlockPos pos) {
-        return this.handle.getLightEmission(pos);
+    public Iterable<VoxelShape> getBlockCollisions(Entity entity, AABB box) {
+        return this.handle.getBlockCollisions(entity, box);
     }
 
     @Override
-    public BlockHitResult clip(ClipContext context) {
-        return this.handle.clip(context);
+    public Iterable<VoxelShape> getBlockAndLiquidCollisions(Entity entity, AABB box) {
+        return this.handle.getBlockAndLiquidCollisions(entity, box);
     }
 
     @Override
-    public BlockHitResult clip(ClipContext arg0, BlockPos arg1) {
-        return this.handle.clip(arg0, arg1);
+    public BlockHitResult clipIncludingBorder(ClipContext context) {
+        return this.handle.clipIncludingBorder(context);
     }
 
     @Override
-    public int getMaxLightLevel() {
-        return this.handle.getMaxLightLevel();
+    public boolean collidesWithSuffocatingBlock(Entity entity, AABB box) {
+        return this.handle.collidesWithSuffocatingBlock(entity, box);
     }
 
     @Override
-    public BlockHitResult isBlockInLine(ClipBlockStateContext context) {
-        return this.handle.isBlockInLine(context);
+    public Optional<BlockPos> findSupportingBlock(Entity entity, AABB box) {
+        return this.handle.findSupportingBlock(entity, box);
     }
 
     @Override
-    public Stream<BlockState> getBlockStates(AABB box) {
-        return this.handle.getBlockStates(box);
+    public Optional<Vec3> findFreePosition(Entity entity, VoxelShape shape, Vec3 target, double x, double y, double z) {
+        return this.handle.findFreePosition(entity, shape, target, x, y, z);
     }
 
     @Override
-    public boolean isOutsideBuildHeight(int y) {
-        return this.handle.isOutsideBuildHeight(y);
+    public int getDirectSignal(BlockPos pos, Direction direction) {
+        return this.handle.getDirectSignal(pos, direction);
     }
 
     @Override
-    public boolean isOutsideBuildHeight(BlockPos pos) {
-        return this.handle.isOutsideBuildHeight(pos);
+    public int getDirectSignalTo(BlockPos pos) {
+        return this.handle.getDirectSignalTo(pos);
     }
 
     @Override
-    public int getSectionIndexFromSectionY(int coord) {
-        return this.handle.getSectionIndexFromSectionY(coord);
+    public int getControlInputSignal(BlockPos pos, Direction direction, boolean onlyFromGate) {
+        return this.handle.getControlInputSignal(pos, direction, onlyFromGate);
     }
 
     @Override
-    public int getSectionYFromSectionIndex(int index) {
-        return this.handle.getSectionYFromSectionIndex(index);
+    public boolean hasSignal(BlockPos pos, Direction direction) {
+        return this.handle.hasSignal(pos, direction);
     }
 
     @Override
-    public int getMaxSection() {
-        return this.handle.getMaxSection();
+    public int getSignal(BlockPos pos, Direction direction) {
+        return this.handle.getSignal(pos, direction);
     }
 
     @Override
-    public int getMinSection() {
-        return this.handle.getMinSection();
+    public boolean hasNeighborSignal(BlockPos pos) {
+        return this.handle.hasNeighborSignal(pos);
     }
 
     @Override
-    public int getSectionIndex(int y) {
-        return this.handle.getSectionIndex(y);
+    public int getBestNeighborSignal(BlockPos pos) {
+        return this.handle.getBestNeighborSignal(pos);
     }
 
     @Override
-    public int getSectionsCount() {
-        return this.handle.getSectionsCount();
+    public BlockEntity getBlockEntity(BlockPos pos) {
+        return this.handle.getBlockEntity(pos);
     }
 
     @Override
-    public int getMaxBuildHeight() {
-        return this.handle.getMaxBuildHeight();
+    public BlockState getBlockState(BlockPos pos) {
+        return this.handle.getBlockState(pos);
     }
 
     @Override
-    public boolean isUnobstructed(BlockState state, BlockPos pos, CollisionContext context) {
-        return this.handle.isUnobstructed(state, pos, context);
+    public FluidState getFluidState(BlockPos pos) {
+        return this.handle.getFluidState(pos);
     }
 
     @Override
-    public boolean isUnobstructed(Entity entity) {
-        return this.handle.isUnobstructed(entity);
+    public int getLightEmission(BlockPos pos) {
+        return this.handle.getLightEmission(pos);
     }
 
     @Override
-    public WorldBorder getWorldBorder() {
-        return this.handle.getWorldBorder();
+    public Stream<BlockState> getBlockStates(AABB box) {
+        return this.handle.getBlockStates(box);
     }
 
     @Override
-    public Optional<Vec3> findFreePosition(Entity entity, VoxelShape shape, Vec3 target, double x, double y, double z) {
-        return this.handle.findFreePosition(entity, shape, target, x, y, z);
+    public BlockHitResult isBlockInLine(ClipBlockStateContext context) {
+        return this.handle.isBlockInLine(context);
     }
 
     @Override
-    public Iterable<VoxelShape> getCollisions(Entity entity, AABB box) {
-        return this.handle.getCollisions(entity, box);
+    public BlockHitResult clip(ClipContext raytrace1, BlockPos blockposition) {
+        return this.handle.clip(raytrace1, blockposition);
     }
 
     @Override
-    public Iterable<VoxelShape> getBlockCollisions(Entity entity, AABB box) {
-        return this.handle.getBlockCollisions(entity, box);
+    public BlockHitResult clip(ClipContext context) {
+        return this.handle.clip(context);
     }
 
     @Override
-    public boolean noCollision(AABB box) {
-        return this.handle.noCollision(box);
+    public BlockHitResult clipWithInteractionOverride(Vec3 start, Vec3 end, BlockPos pos, VoxelShape shape, BlockState state) {
+        return this.handle.clipWithInteractionOverride(start, end, pos, shape, state);
     }
 
     @Override
-    public boolean noCollision(Entity entity) {
-        return this.handle.noCollision(entity);
+    public double getBlockFloorHeight(VoxelShape blockCollisionShape, Supplier<VoxelShape> belowBlockCollisionShapeGetter) {
+        return this.handle.getBlockFloorHeight(blockCollisionShape, belowBlockCollisionShapeGetter);
     }
 
     @Override
-    public boolean noCollision(Entity entity, AABB box) {
-        return this.handle.noCollision(entity, box);
+    public double getBlockFloorHeight(BlockPos pos) {
+        return this.handle.getBlockFloorHeight(pos);
     }
 
     @Override
-    public boolean collidesWithSuffocatingBlock(Entity entity, AABB box) {
-        return this.handle.collidesWithSuffocatingBlock(entity, box);
+    public List<Entity> getEntities(Entity except, AABB box, Predicate<? super Entity> predicate) {
+        return this.handle.getEntities(except, box, predicate);
     }
 
     @Override
-    public Optional<BlockPos> findSupportingBlock(Entity entity, AABB box) {
-        return this.handle.findSupportingBlock(entity, box);
+    public <T extends Entity> List<T> getEntities(EntityTypeTest<Entity, T> filter, AABB box, Predicate<? super T> predicate) {
+        return this.handle.getEntities(filter, box, predicate);
     }
 
     @Override
-    public int getBestNeighborSignal(BlockPos pos) {
-        return this.handle.getBestNeighborSignal(pos);
+    public <T extends Entity> List<T> getEntitiesOfClass(Class<T> entityClass, AABB box, Predicate<? super T> predicate) {
+        return this.handle.getEntitiesOfClass(entityClass, box, predicate);
     }
 
     @Override
-    public int getControlInputSignal(BlockPos pos, Direction direction, boolean onlyFromGate) {
-        return this.handle.getControlInputSignal(pos, direction, onlyFromGate);
+    public List<? extends Player> players() {
+        return this.handle.players();
     }
 
     @Override
-    public int getDirectSignal(BlockPos pos, Direction direction) {
-        return this.handle.getDirectSignal(pos, direction);
+    public List<Entity> getEntities(Entity except, AABB box) {
+        return this.handle.getEntities(except, box);
     }
 
     @Override
-    public int getDirectSignalTo(BlockPos pos) {
-        return this.handle.getDirectSignalTo(pos);
+    public <T extends Entity> List<T> getEntitiesOfClass(Class<T> entityClass, AABB box) {
+        return this.handle.getEntitiesOfClass(entityClass, box);
     }
 
     @Override
-    public boolean hasNeighborSignal(BlockPos pos) {
-        return this.handle.hasNeighborSignal(pos);
+    public Player getNearestPlayer(double x, double y, double z, double maxDistance, Predicate<Entity> targetPredicate) {
+        return this.handle.getNearestPlayer(x, y, z, maxDistance, targetPredicate);
     }
 
     @Override
-    public boolean hasSignal(BlockPos pos, Direction direction) {
-        return this.handle.hasSignal(pos, direction);
+    public Player getNearestPlayer(Entity entity, double maxDistance) {
+        return this.handle.getNearestPlayer(entity, maxDistance);
     }
 
     @Override
-    public int getSignal(BlockPos pos, Direction direction) {
-        return this.handle.getSignal(pos, direction);
+    public Player getNearestPlayer(double x, double y, double z, double maxDistance, boolean ignoreCreative) {
+        return this.handle.getNearestPlayer(x, y, z, maxDistance, ignoreCreative);
     }
 
     @Override
-    public boolean isStateAtPosition(BlockPos pos, Predicate<BlockState> state) {
-        return this.handle.isStateAtPosition(pos, state);
+    public boolean hasNearbyAlivePlayer(double x, double y, double z, double range) {
+        return this.handle.hasNearbyAlivePlayer(x, y, z, range);
     }
 
     @Override
-    public boolean isFluidAtPosition(BlockPos pos, Predicate<FluidState> state) {
-        return this.handle.isFluidAtPosition(pos, state);
+    public Player getPlayerByUUID(UUID uuid) {
+        return this.handle.getPlayerByUUID(uuid);
     }
 
     @Override
-    public boolean addFreshEntity(Entity arg0, CreatureSpawnEvent.SpawnReason arg1) {
-        return this.handle.addFreshEntity(arg0, arg1);
+    public boolean setBlock(BlockPos pos, BlockState state, int flags, int maxUpdateDepth) {
+        return this.handle.setBlock(pos, state, flags, maxUpdateDepth);
     }
 
     @Override
-    public boolean addFreshEntity(Entity entity) {
-        return this.handle.addFreshEntity(entity);
+    public boolean setBlock(BlockPos pos, BlockState state, int flags) {
+        return this.handle.setBlock(pos, state, flags);
     }
 
     @Override
@@ -771,8 +705,8 @@
     }
 
     @Override
-    public boolean destroyBlock(BlockPos pos, boolean drop, Entity breakingEntity, int maxUpdateDepth) {
-        return this.handle.destroyBlock(pos, drop, breakingEntity, maxUpdateDepth);
+    public boolean destroyBlock(BlockPos pos, boolean drop) {
+        return this.handle.destroyBlock(pos, drop);
     }
 
     @Override
@@ -781,32 +715,77 @@
     }
 
     @Override
-    public boolean destroyBlock(BlockPos pos, boolean drop) {
-        return this.handle.destroyBlock(pos, drop);
+    public boolean destroyBlock(BlockPos pos, boolean drop, Entity breakingEntity, int maxUpdateDepth) {
+        return this.handle.destroyBlock(pos, drop, breakingEntity, maxUpdateDepth);
     }
 
     @Override
-    public boolean setBlock(BlockPos pos, BlockState state, int flags) {
-        return this.handle.setBlock(pos, state, flags);
+    public boolean addFreshEntity(Entity entity) {
+        return this.handle.addFreshEntity(entity);
     }
 
     @Override
-    public boolean setBlock(BlockPos pos, BlockState state, int flags, int maxUpdateDepth) {
-        return this.handle.setBlock(pos, state, flags, maxUpdateDepth);
+    public boolean addFreshEntity(Entity entity, CreatureSpawnEvent.SpawnReason reason) {
+        return this.handle.addFreshEntity(entity, reason);
     }
 
     @Override
-    public float getTimeOfDay(float tickDelta) {
-        return this.handle.getTimeOfDay(tickDelta);
+    public int getMaxY() {
+        return this.handle.getMaxY();
     }
 
     @Override
-    public float getMoonBrightness() {
-        return this.handle.getMoonBrightness();
+    public int getSectionsCount() {
+        return this.handle.getSectionsCount();
+    }
+
+    @Override
+    public int getMinSectionY() {
+        return this.handle.getMinSectionY();
+    }
+
+    @Override
+    public int getMaxSectionY() {
+        return this.handle.getMaxSectionY();
+    }
+
+    @Override
+    public boolean isInsideBuildHeight(int y) {
+        return this.handle.isInsideBuildHeight(y);
+    }
+
+    @Override
+    public boolean isOutsideBuildHeight(BlockPos pos) {
+        return this.handle.isOutsideBuildHeight(pos);
+    }
+
+    @Override
+    public boolean isOutsideBuildHeight(int y) {
+        return this.handle.isOutsideBuildHeight(y);
     }
 
     @Override
-    public int getMoonPhase() {
-        return this.handle.getMoonPhase();
+    public int getSectionIndex(int y) {
+        return this.handle.getSectionIndex(y);
+    }
+
+    @Override
+    public int getSectionIndexFromSectionY(int coord) {
+        return this.handle.getSectionIndexFromSectionY(coord);
+    }
+
+    @Override
+    public int getSectionYFromSectionIndex(int index) {
+        return this.handle.getSectionYFromSectionIndex(index);
+    }
+
+    @Override
+    public boolean isStateAtPosition(BlockPos pos, Predicate<BlockState> state) {
+        return this.handle.isStateAtPosition(pos, state);
+    }
+
+    @Override
+    public boolean isFluidAtPosition(BlockPos pos, Predicate<FluidState> state) {
+        return this.handle.isFluidAtPosition(pos, state);
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java	(date 1729674280163)
@@ -15,7 +15,7 @@
     public boolean setFacingDirection(BlockFace face, boolean force) {
         Preconditions.checkArgument(face == BlockFace.SELF, "%s is not a valid facing direction", face);
 
-        return force || this.getHandle().bridge$generation() || this.getHandle().survives();
+        return force || this.getHandle().generation || this.getHandle().survives();
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java	(date 1729674280156)
@@ -33,7 +33,7 @@
     public void setFoxType(Type type) {
         Preconditions.checkArgument(type != null, "type");
 
-        this.getHandle().setVariant(net.minecraft.world.entity.animal.Fox.Type.values()[type.ordinal()]);
+        this.getHandle().setVariant(net.minecraft.world.entity.animal.Fox.Variant.values()[type.ordinal()]);
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/Commodore.java	(date 1729674280326)
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.util;
 
+import com.google.common.base.Predicates;
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
 import com.google.common.io.ByteStreams;
@@ -16,6 +17,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.jar.JarOutputStream;
@@ -28,6 +30,7 @@
 import org.bukkit.craftbukkit.legacy.MaterialRerouting;
 import org.bukkit.craftbukkit.legacy.MethodRerouting;
 import org.bukkit.craftbukkit.legacy.enums.EnumEvil;
+import org.bukkit.craftbukkit.legacy.reroute.Reroute;
 import org.bukkit.craftbukkit.legacy.reroute.RerouteArgument;
 import org.bukkit.craftbukkit.legacy.reroute.RerouteBuilder;
 import org.bukkit.craftbukkit.legacy.reroute.RerouteMethodData;
@@ -87,18 +90,38 @@
             "org/bukkit/block/banner/PatternType", "NOP"
     );
 
-    private static Map<String, RerouteMethodData> createReroutes(Class<?> clazz) {
-        Map<String, RerouteMethodData> reroutes = RerouteBuilder.buildFromClass(clazz);
-        Commodore.REROUTES.add(reroutes);
-        return reroutes;
+    private final List<Reroute> reroutes = new ArrayList<>(); // only for testing
+    private Reroute materialReroute;
+    private Reroute reroute;
+
+    public Commodore() {
+    }
+
+    public Commodore(Predicate<String> compatibilityPresent) {
+        this.updateReroute(compatibilityPresent);
+    }
+
+    public void updateReroute(Predicate<String> compatibilityPresent) {
+        this.materialReroute = RerouteBuilder
+                .create(compatibilityPresent)
+                .forClass(MaterialRerouting.class)
+                .build();
+        this.reroute = RerouteBuilder
+                .create(compatibilityPresent)
+                .forClass(FieldRename.class)
+                .forClass(MethodRerouting.class)
+                .forClass(EnumEvil.class)
+                .build();
+
+        this.reroutes.clear();
+        this.reroutes.add(this.materialReroute);
+        this.reroutes.add(this.reroute);
     }
 
     @VisibleForTesting
-    public static final List<Map<String, RerouteMethodData>> REROUTES = new ArrayList<>(); // Only used for testing
-    private static final Map<String, RerouteMethodData> FIELD_RENAME_METHOD_REROUTE = Commodore.createReroutes(FieldRename.class);
-    private static final Map<String, RerouteMethodData> MATERIAL_METHOD_REROUTE = Commodore.createReroutes(MaterialRerouting.class);
-    private static final Map<String, RerouteMethodData> METHOD_REROUTE = Commodore.createReroutes(MethodRerouting.class);
-    private static final Map<String, RerouteMethodData> ENUM_METHOD_REROUTE = Commodore.createReroutes(EnumEvil.class);
+    public List<Reroute> getReroutes() {
+        return this.reroutes;
+    }
 
     public static void main(String[] args) {
         OptionParser parser = new OptionParser();
@@ -110,6 +133,8 @@
         File input = options.valueOf(inputFlag);
         File output = options.valueOf(outputFlag);
 
+        Commodore commodore = new Commodore(Predicates.alwaysTrue());
+
         if (input.isDirectory()) {
             if (!output.isDirectory()) {
                 System.err.println("If input directory specified, output directory required too");
@@ -118,15 +143,15 @@
 
             for (File in : input.listFiles()) {
                 if (in.getName().endsWith(".jar")) {
-                    Commodore.convert(in, new File(output, in.getName()));
+                    Commodore.convert(in, new File(output, in.getName()), commodore);
                 }
             }
         } else {
-            Commodore.convert(input, output);
+            Commodore.convert(input, output, commodore);
         }
     }
 
-    private static void convert(File in, File out) {
+    private static void convert(File in, File out, Commodore commodore) {
         System.out.println("Attempting to convert " + in + " to " + out);
 
         try {
@@ -144,7 +169,7 @@
                             byte[] b = ByteStreams.toByteArray(is);
 
                             if (entry.getName().endsWith(".class")) {
-                                b = Commodore.convert(b, "dummy", ApiVersion.NONE, Collections.emptySet());
+                                b = commodore.convert(b, "dummy", ApiVersion.NONE, Collections.emptySet());
                                 entry = new JarEntry(entry.getName());
                             }
 
@@ -162,11 +187,11 @@
         }
     }
 
-    public static byte[] convert(byte[] b, final String pluginName, final ApiVersion pluginVersion, final Set<String> activeCompatibilities) {
+    public byte[] convert(byte[] b, final String pluginName, final ApiVersion pluginVersion, final Set<String> activeCompatibilities) {
         final boolean modern = pluginVersion.isNewerThanOrSameAs(ApiVersion.FLATTENING);
         final boolean enumCompatibility = pluginVersion.isOlderThanOrSameAs(ApiVersion.getOrCreateVersion("1.20.6")) && activeCompatibilities.contains("enum-compatibility-mode");
         ClassReader cr = new ClassReader(b);
-        ClassWriter cw = new ClassWriter(0); // TODO 2024-06-22: Open PR to ASM to included interface in handle hash
+        ClassWriter cw = new ClassWriter(cr, 0);
 
         List<String> methodEnumSignatures = Commodore.getMethodSignatures(b);
         Multimap<String, String> enumLessToEnum = HashMultimap.create();
@@ -329,10 +354,7 @@
                     }
 
                     private void handleMethod(MethodPrinter visitor, int opcode, String owner, String name, String desc, boolean itf, Type samMethodType, Type instantiatedMethodType) {
-                        if (this.checkReroute(visitor, Commodore.FIELD_RENAME_METHOD_REROUTE, opcode, owner, name, desc, samMethodType, instantiatedMethodType)) {
-                            return;
-                        }
-                        if (this.checkReroute(visitor, Commodore.METHOD_REROUTE, opcode, owner, name, desc, samMethodType, instantiatedMethodType)) {
+                        if (this.checkReroute(visitor, Commodore.this.reroute, opcode, owner, name, desc, samMethodType, instantiatedMethodType)) {
                             return;
                         }
 
@@ -353,10 +375,6 @@
                             }
                         }
 
-                        if (this.checkReroute(visitor, Commodore.ENUM_METHOD_REROUTE, opcode, owner, name, desc, samMethodType, instantiatedMethodType)) {
-                            return;
-                        }
-
                         // SPIGOT-4496
                         if (owner.equals("org/bukkit/map/MapView") && name.equals("getId") && desc.equals("()S")) {
                             // Should be same size on stack so just call other method
@@ -448,15 +466,15 @@
                         }
 
                         // TODO 2024-05-21: Move this up, when material gets fully replaced with ItemType and BlockType
-                        if (owner.startsWith("org/bukkit") && this.checkReroute(visitor, Commodore.MATERIAL_METHOD_REROUTE, opcode, owner, name, desc, samMethodType, instantiatedMethodType)) {
+                        if (owner.startsWith("org/bukkit") && this.checkReroute(visitor, Commodore.this.materialReroute, opcode, owner, name, desc, samMethodType, instantiatedMethodType)) {
                             return;
                         }
 
                         visitor.visit(opcode, owner, name, desc, itf, samMethodType, instantiatedMethodType);
                     }
 
-                    private boolean checkReroute(MethodPrinter visitor, Map<String, RerouteMethodData> rerouteMethodDataMap, int opcode, String owner, String name, String desc, Type samMethodType, Type instantiatedMethodType) {
-                        return Commodore.rerouteMethods(activeCompatibilities, pluginVersion, rerouteMethodDataMap, opcode == Opcodes.INVOKESTATIC || opcode == Opcodes.H_INVOKESTATIC, owner, name, desc, data -> {
+                    private boolean checkReroute(MethodPrinter visitor, Reroute reroute, int opcode, String owner, String name, String desc, Type samMethodType, Type instantiatedMethodType) {
+                        return Commodore.rerouteMethods(pluginVersion, reroute, opcode == Opcodes.INVOKESTATIC || opcode == Opcodes.H_INVOKESTATIC, owner, name, desc, data -> {
                             visitor.visit(Opcodes.INVOKESTATIC, className, Commodore.buildMethodName(data), Commodore.buildMethodDesc(data), isInterface, samMethodType, instantiatedMethodType);
                             rerouteMethodData.add(data);
                         });
@@ -599,69 +617,8 @@
         };
     }
 
-    /*
-    This method looks (and probably is) overengineered, but it gives the most flexible when it comes to remapping normal methods to static one.
-    The problem with normal owner and desc replacement is that child classes have them as an owner, instead there parents for there parents methods
-
-    For example, if we have following two interfaces org.bukkit.BlockData and org.bukkit.Orientable extents BlockData
-    and BlockData has the method org.bukkit.Material getType which we want to reroute to the static method
-    org.bukkit.Material org.bukkit.craftbukkit.legacy.EnumEvil#getType(org.bukkit.BlockData)
-
-    If we now call BlockData#getType we get as the owner org/bukkit/BlockData and as desc ()Lorg/bukkit/Material;
-    Which we can nicely reroute by checking if the owner is BlockData and the name getType
-    The problem, starts if we use Orientable#getType no we get as owner org/bukkit/Orientable and as desc ()Lorg/bukkit/Material;
-    Now we can now longer safely say to which getType method we need to reroute (assume there are multiple getType methods from different classes,
-    which are not related to BlockData), simple using the owner class will not work, since would reroute to
-    EnumEvil#getType(org.bukkit.Orientable) which is not EnumEvil#getType(org.bukkit.BlockData) and will throw a method not found error
-    at runtime.
-
-    Meaning we would need to add checks for each subclass, which would be pur insanity.
-
-    To solve this, we go through each super class and interfaces (and their super class and interfaces etc.) and try to get an owner
-    which matches with one of our replacement methods. Based on how inheritance works in java, this method should be safe to use.
-
-    As a site note: This method could also be used for the other method reroute, e.g. legacy method rerouting, where only the replacement
-    method needs to be written, and this method figures out the rest, which could reduce the size and complexity of the Commodore class.
-    The question then becomes one about performance (since this is not the most performance way) and convenience.
-    But since it is only applied for each class and method call once when they get first loaded, it should not be that bad.
-    (Although some load time testing could be done)
-     */
-    public static boolean rerouteMethods(Set<String> activeCompatibilities, ApiVersion pluginVersion, Map<String, RerouteMethodData> rerouteMethodDataMap, boolean staticCall, String owner, String name, String desc, Consumer<RerouteMethodData> consumer) {
-        Type ownerType = Type.getObjectType(owner);
-        Class<?> ownerClass;
-        try {
-            ownerClass = Class.forName(ownerType.getClassName());
-        } catch (ClassNotFoundException e) {
-            return false;
-        }
-
-        ClassTraverser it = new ClassTraverser(ownerClass);
-        while (it.hasNext()) {
-            Class<?> clazz = it.next();
-
-            String methodKey = Type.getInternalName(clazz) + " " + desc + " " + name;
-
-            RerouteMethodData data = rerouteMethodDataMap.get(methodKey);
-            if (data == null) {
-                if (staticCall) {
-                    return false;
-                }
-                continue;
-            }
-
-            if (data.requiredCompatibility() != null && !activeCompatibilities.contains(data.requiredCompatibility())) {
-                return false;
-            }
-
-            if (data.requiredPluginVersion() != null && !data.requiredPluginVersion().test(pluginVersion)) {
-                return false;
-            }
-
-            consumer.accept(data);
-            return true;
-        }
-
-        return false;
+    public static boolean rerouteMethods(ApiVersion pluginVersion, Reroute reroute, boolean staticCall, String owner, String name, String desc, Consumer<RerouteMethodData> consumer) {
+        return reroute.apply(pluginVersion, owner, name, desc, staticCall, consumer);
     }
 
     private static List<String> getMethodSignatures(byte[] clazz) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java	(date 1729674280117)
@@ -3,7 +3,7 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
-public final class CraftWitherSkullWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
+public final class CraftWitherSkullWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.WallSkull, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftWitherSkullWall() {
         super();
@@ -31,4 +31,18 @@
     public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
         return this.getValues(CraftWitherSkullWall.FACING, org.bukkit.block.BlockFace.class);
     }
+
+    // org.bukkit.craftbukkit.block.data.CraftPowerable
+
+    private static final net.minecraft.world.level.block.state.properties.BooleanProperty POWERED = getBoolean(net.minecraft.world.level.block.WitherWallSkullBlock.class, "powered");
+
+    @Override
+    public boolean isPowered() {
+        return this.get(CraftWitherSkullWall.POWERED);
+    }
+
+    @Override
+    public void setPowered(boolean powered) {
+        this.set(CraftWitherSkullWall.POWERED, powered);
+    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java	(date 1729674280198)
@@ -2,10 +2,9 @@
 
 import com.google.common.base.Preconditions;
 import java.util.Locale;
-
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.world.entity.npc.VillagerProfession;
 import net.minecraft.world.entity.npc.VillagerType;
 import net.minecraft.world.level.block.BedBlock;
@@ -20,6 +19,7 @@
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.ZombieVillager;
 import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
 
 public class CraftVillager extends CraftAbstractVillager implements Villager {
 
@@ -95,7 +95,7 @@
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
         Preconditions.checkArgument(location.getWorld().equals(this.getWorld()), "Cannot sleep across worlds");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot sleep during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot sleep during world generation");
 
         BlockPos position = CraftLocation.toBlockPosition(location);
         BlockState iblockdata = this.getHandle().level().getBlockState(position);
@@ -110,7 +110,7 @@
     @Override
     public void wakeup() {
         Preconditions.checkState(this.isSleeping(), "Cannot wakeup if not sleeping");
-        Preconditions.checkState(!this.getHandle().bridge$generation(), "Cannot wakeup during world generation");
+        Preconditions.checkState(!this.getHandle().generation, "Cannot wakeup during world generation");
 
         this.getHandle().stopSleeping();
     }
@@ -122,7 +122,7 @@
 
     @Override
     public ZombieVillager zombify() {
-        net.minecraft.world.entity.monster.ZombieVillager entityzombievillager = BukkitMethodHooks.zombifyVillager(this.getHandle().level().getMinecraftWorld(), this.getHandle(), this.getHandle().blockPosition(), this.isSilent(), CreatureSpawnEvent.SpawnReason.CUSTOM);
+        net.minecraft.world.entity.monster.ZombieVillager entityzombievillager = Zombie.convertVillagerToZombieVillager(this.getHandle().level().getMinecraftWorld(), this.getHandle(), this.getHandle().blockPosition(), this.isSilent(), EntityTransformEvent.TransformReason.INFECTION, CreatureSpawnEvent.SpawnReason.CUSTOM);
         return (entityzombievillager != null) ? (ZombieVillager) entityzombievillager.getBukkitEntity() : null;
     }
 
Index: banner-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java	(date 1729674280287)
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.legacy;
 
 import com.google.common.base.Preconditions;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
 import com.mojang.serialization.Dynamic;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -16,6 +15,7 @@
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.datafix.fixes.BlockStateData;
 import net.minecraft.util.datafix.fixes.ItemIdFix;
@@ -265,7 +265,7 @@
 
     static {
         System.err.println("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!");
-        if (BukkitMethodHooks.getServer() != null && BukkitMethodHooks.getServer().isDebugging()) {
+        if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isDebugging()) {
             new Exception().printStackTrace();
         }
 
@@ -331,7 +331,7 @@
             }
 
             // Handle blocks
-            if (material.isBlock()) {
+            if (isBlock(material)) { // Use custom method instead of Material#isBlock since it relies on this being already run
                 for (byte data = 0; data < 16; data++) {
                     MaterialData matData = new MaterialData(material, data);
                     Dynamic blockTag = BlockStateData.getTag(material.getId() << 4 | data);
@@ -342,7 +342,7 @@
                     }
 
                     String name = blockTag.get("Name").asString("");
-                    Block block = BuiltInRegistries.BLOCK.get(ResourceLocation.parse(name));
+                    Block block = BuiltInRegistries.BLOCK.getValue(ResourceLocation.parse(name));
                     if (block == null) {
                         continue;
                     }
@@ -416,7 +416,7 @@
                 }
 
                 // Preconditions.checkState(newId.contains("minecraft:"), "Unknown new material for " + matData);
-                Item newMaterial = BuiltInRegistries.ITEM.get(ResourceLocation.parse(newId));
+                Item newMaterial = BuiltInRegistries.ITEM.getValue(ResourceLocation.parse(newId));
 
                 if (newMaterial == Items.AIR) {
                     continue;
@@ -438,6 +438,12 @@
         }
     }
 
+    private static boolean isBlock(Material material) {
+        // From Material#isBlock before the rewrite to ItemType / BlockType
+        // Git hash: 42f6cdf4c5dcdd52a27543403dcd17fb60311621
+        return 0 <= material.getId() && material.getId() < 256;
+    }
+
     public static void main(String[] args) {
         System.err.println("");
     }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java	(date 1729674280332)
@@ -6,11 +6,10 @@
 public class CraftSpawnCategory {
 
     public static boolean isValidForLimits(SpawnCategory spawnCategory) {
-        return spawnCategory != null && (spawnCategory.isMods || spawnCategory.ordinal() < SpawnCategory.MISC.ordinal()); // Banner - use original
+        return spawnCategory != null && spawnCategory != SpawnCategory.MISC;
     }
 
     public static String getConfigNameSpawnLimit(SpawnCategory spawnCategory) {
-        if (spawnCategory.isMods) return "spawn-limits.mods." + spawnCategory.name().toLowerCase();
         return switch (spawnCategory) {
             case MONSTER -> "spawn-limits.monsters";
             case ANIMAL -> "spawn-limits.animals";
@@ -24,7 +23,6 @@
     }
 
     public static String getConfigNameTicksPerSpawn(SpawnCategory spawnCategory) {
-        if (spawnCategory.isMods) return "ticks-per." + spawnCategory.name().toLowerCase();
         return switch (spawnCategory) {
             case MONSTER -> "ticks-per.monster-spawns";
             case ANIMAL -> "ticks-per.animal-spawns";
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/Versioning.java	(date 1729674280337)
@@ -9,6 +9,21 @@
 
 public final class Versioning {
     public static String getBukkitVersion() {
-        return "1.21-R0.1-SNAPSHOT";
+        String result = "Unknown-Version";
+
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.spigotmc/spigot-api/pom.properties");
+        Properties properties = new Properties();
+
+        if (stream != null) {
+            try {
+                properties.load(stream);
+
+                result = properties.getProperty("version");
+            } catch (IOException ex) {
+                Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Bukkit version!", ex);
+            }
+        }
+
+        return result;
     }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java	(date 1729674280337)
@@ -16,7 +16,7 @@
             this.server.close();
         } finally {
             try {
-                this.server.bridge$reader().getTerminal().restore();
+                this.server.reader.getTerminal().restore();
             } catch (Exception e) {
             }
         }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftStructureTransformer.java	(date 1729674280333)
@@ -86,7 +86,7 @@
         if (region == null) {
             return true;
         }
-        entity.banner$setGeneration(true);
+        entity.generation = true;
         CraftEntity craftEntity = entity.getBukkitEntity();
         int x = entity.getBlockX();
         int y = entity.getBlockY();
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/TransformerGeneratorAccess.java	(date 1729674280337)
@@ -47,15 +47,13 @@
         super.addFreshEntityWithPassengers(entity);
     }
 
-    // Banner TODO fixme
-    /*
     @Override
     public void addFreshEntityWithPassengers(Entity arg0, SpawnReason arg1) {
         if (this.structureTransformer != null && !this.structureTransformer.transformEntity(arg0)) {
             return;
         }
         super.addFreshEntityWithPassengers(arg0, arg1);
-    }*/
+    }
 
     public boolean setCraftBlock(BlockPos position, CraftBlockState craftBlockState, int i, int j) {
         if (this.structureTransformer != null) {
Index: banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java	(date 1729674280331)
@@ -6,7 +6,7 @@
 import com.google.common.io.Files;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
-import com.mohistmc.banner.bukkit.BukkitMethodHooks;
+import com.google.gson.JsonParser;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
@@ -28,7 +28,7 @@
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.ServerAdvancementManager;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.util.datafix.fixes.References;
 import net.minecraft.world.item.Item;
@@ -73,7 +73,9 @@
 
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
-    public static final UnsafeValues INSTANCE = new CraftMagicNumbers();
+    public static final CraftMagicNumbers INSTANCE = new CraftMagicNumbers();
+
+    private final Commodore commodore = new Commodore();
 
     private CraftMagicNumbers() {}
 
@@ -102,10 +104,10 @@
     }
 
     // ========================================================================
-    public static final Map<Block, Material> BLOCK_MATERIAL = new HashMap<>();
-    public static final Map<Item, Material> ITEM_MATERIAL = new HashMap<>();
-    public static final Map<Material, Item> MATERIAL_ITEM = new HashMap<>();
-    public static final Map<Material, Block> MATERIAL_BLOCK = new HashMap<>();
+    private static final Map<Block, Material> BLOCK_MATERIAL = new HashMap<>();
+    private static final Map<Item, Material> ITEM_MATERIAL = new HashMap<>();
+    private static final Map<Material, Item> MATERIAL_ITEM = new HashMap<>();
+    private static final Map<Material, Block> MATERIAL_BLOCK = new HashMap<>();
 
     static {
         for (Block block : BuiltInRegistries.BLOCK) {
@@ -164,6 +166,10 @@
         return CraftLegacy.toLegacyData(data);
     }
 
+    public Commodore getCommodore() {
+        return this.commodore;
+    }
+
     @Override
     public Material toLegacy(Material material) {
         return CraftLegacy.toLegacy(material);
@@ -225,7 +231,7 @@
      * @return string
      */
     public String getMappingsVersion() {
-        return "7092ff1ff9352ad7e2260dc150e6a3ec";
+        return "ec8b033a89c54252f1dfcb809eab710a";
     }
 
     @Override
@@ -238,7 +244,7 @@
         net.minecraft.world.item.ItemStack nmsStack = CraftItemStack.asNMSCopy(stack);
 
         try {
-            nmsStack.applyComponents(new ItemParser(Commands.createValidationContext(BukkitMethodHooks.getDefaultRegistryAccess())).parse(new StringReader(arguments)).components());
+            nmsStack.applyComponents(new ItemParser(Commands.createValidationContext(MinecraftServer.getDefaultRegistryAccess())).parse(new StringReader(arguments)).components());
         } catch (CommandSyntaxException ex) {
             Logger.getLogger(CraftMagicNumbers.class.getName()).log(Level.SEVERE, null, ex);
         }
@@ -249,7 +255,7 @@
     }
 
     private static File getBukkitDataPackFolder() {
-        return new File(BukkitMethodHooks.getServer().getWorldPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+        return new File(MinecraftServer.getServer().getWorldPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
     }
 
     @Override
@@ -257,10 +263,10 @@
         Preconditions.checkArgument(Bukkit.getAdvancement(key) == null, "Advancement %s already exists", key);
         ResourceLocation minecraftkey = CraftNamespacedKey.toMinecraft(key);
 
-        JsonElement jsonelement = ServerAdvancementManager.GSON.fromJson(advancement, JsonElement.class);
+        JsonElement jsonelement = JsonParser.parseString(advancement);
         net.minecraft.advancements.Advancement nms = net.minecraft.advancements.Advancement.CODEC.parse(JsonOps.INSTANCE, jsonelement).getOrThrow(JsonParseException::new);
         if (nms != null) {
-            BukkitMethodHooks.getServer().getAdvancements().advancements.put(minecraftkey, new AdvancementHolder(minecraftkey, nms));
+            MinecraftServer.getServer().getAdvancements().advancements.put(minecraftkey, new AdvancementHolder(minecraftkey, nms));
             Advancement bukkit = Bukkit.getAdvancement(key);
 
             if (bukkit != null) {
@@ -273,7 +279,7 @@
                     Bukkit.getLogger().log(Level.SEVERE, "Error saving advancement " + key, ex);
                 }
 
-                BukkitMethodHooks.getServer().getPlayerList().reloadResources();
+                MinecraftServer.getServer().getPlayerList().reloadResources();
 
                 return bukkit;
             }
@@ -291,7 +297,7 @@
     @Override
     public void checkSupported(PluginDescriptionFile pdf) throws InvalidPluginException {
         ApiVersion toCheck = ApiVersion.getOrCreateVersion(pdf.getAPIVersion());
-        ApiVersion minimumVersion = BukkitMethodHooks.getServer().bridge$server().minimumAPI;
+        ApiVersion minimumVersion = MinecraftServer.getServer().server.minimumAPI;
 
         if (toCheck.isNewerThan(ApiVersion.CURRENT)) {
             // Newer than supported
@@ -319,7 +325,7 @@
     @Override
     public byte[] processClass(PluginDescriptionFile pdf, String path, byte[] clazz) {
         try {
-            clazz = Commodore.convert(clazz, pdf.getName(), ApiVersion.getOrCreateVersion(pdf.getAPIVersion()), ((CraftServer) Bukkit.getServer()).activeCompatibilities);
+            clazz = this.commodore.convert(clazz, pdf.getName(), ApiVersion.getOrCreateVersion(pdf.getAPIVersion()), ((CraftServer) Bukkit.getServer()).activeCompatibilities);
         } catch (Exception ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Fatal error trying to convert " + pdf.getFullName() + ":" + path, ex);
         }
@@ -356,7 +362,7 @@
     @Override
     public String getTranslationKey(ItemStack itemStack) {
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(itemStack);
-        return nmsItemStack.getItem().getDescriptionId(nmsItemStack);
+        return nmsItemStack.getItem().getDescriptionId();
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java	(date 1729674280155)
@@ -26,121 +26,121 @@
 
     @Override
     public int getMinWaitTime() {
-        return this.getHandle().bridge$minWaitTime();
+        return this.getHandle().minWaitTime;
     }
 
     @Override
     public void setMinWaitTime(int minWaitTime) {
         Preconditions.checkArgument(minWaitTime >= 0 && minWaitTime <= this.getMaxWaitTime(), "The minimum wait time should be between %s and %s (the maximum wait time)", 0, this.getMaxWaitTime());
         FishingHook hook = this.getHandle();
-        hook.banner$setMinWaitTime(minWaitTime);
+        hook.minWaitTime = minWaitTime;
     }
 
     @Override
     public int getMaxWaitTime() {
-        return this.getHandle().bridge$maxWaitTime();
+        return this.getHandle().maxWaitTime;
     }
 
     @Override
     public void setMaxWaitTime(int maxWaitTime) {
         Preconditions.checkArgument(maxWaitTime >= 0 && maxWaitTime >= this.getMinWaitTime(), "The maximum wait time should be between %s and %s (the minimum wait time)", 0, this.getMinWaitTime());
         FishingHook hook = this.getHandle();
-        hook.banner$setMaxWaitTime(maxWaitTime);
+        hook.maxWaitTime = maxWaitTime;
     }
 
     @Override
     public void setWaitTime(int min, int max) {
         Preconditions.checkArgument(min >= 0 && max >= 0 && min <= max, "The minimum/maximum wait time should be higher than or equal to 0 and the minimum wait time");
-        this.getHandle().banner$setMinWaitTime(min);
-        this.getHandle().banner$setMaxWaitTime(max);
+        this.getHandle().minWaitTime = min;
+        this.getHandle().maxWaitTime = max;
     }
 
     @Override
     public int getMinLureTime() {
-        return this.getHandle().bridge$minLureTime();
+        return this.getHandle().minLureTime;
     }
 
     @Override
     public void setMinLureTime(int minLureTime) {
         Preconditions.checkArgument(minLureTime >= 0 && minLureTime <= this.getMaxLureTime(), "The minimum lure time (%s) should be between 0 and %s (the maximum wait time)", minLureTime, this.getMaxLureTime());
-        this.getHandle().banner$setMinLureTime(minLureTime);
+        this.getHandle().minLureTime = minLureTime;
     }
 
     @Override
     public int getMaxLureTime() {
-        return this.getHandle().bridge$maxLureTime();
+        return this.getHandle().maxLureTime;
     }
 
     @Override
     public void setMaxLureTime(int maxLureTime) {
         Preconditions.checkArgument(maxLureTime >= 0 && maxLureTime >= this.getMinLureTime(), "The maximum lure time (%s) should be higher than or equal to 0 and %s (the minimum wait time)", maxLureTime, this.getMinLureTime());
-        this.getHandle().banner$setMaxLureTime(maxLureTime);
+        this.getHandle().maxLureTime = maxLureTime;
     }
 
     @Override
     public void setLureTime(int min, int max) {
         Preconditions.checkArgument(min >= 0 && max >= 0 && min <= max, "The minimum/maximum lure time should be higher than or equal to 0 and the minimum wait time.");
-        this.getHandle().banner$setMinLureTime(min);
-        this.getHandle().banner$setMaxLureTime(max);
+        this.getHandle().minLureTime = min;
+        this.getHandle().maxLureTime = max;
     }
 
     @Override
     public float getMinLureAngle() {
-        return this.getHandle().bridge$minLureAngle();
+        return this.getHandle().minLureAngle;
     }
 
     @Override
     public void setMinLureAngle(float minLureAngle) {
         Preconditions.checkArgument(minLureAngle <= this.getMaxLureAngle(), "The minimum lure angle (%s) should be less than %s (the maximum lure angle)", minLureAngle, this.getMaxLureAngle());
-        this.getHandle().banner$setMinLureAnglee(minLureAngle);
+        this.getHandle().minLureAngle = minLureAngle;
     }
 
     @Override
     public float getMaxLureAngle() {
-        return this.getHandle().bridge$maxLureAngle();
+        return this.getHandle().maxLureAngle;
     }
 
     @Override
     public void setMaxLureAngle(float maxLureAngle) {
         Preconditions.checkArgument(maxLureAngle >= this.getMinLureAngle(), "The minimum lure angle (%s) should be less than %s (the maximum lure angle)", maxLureAngle, this.getMinLureAngle());
-        this.getHandle().banner$setMaxLureAnglee(maxLureAngle);
+        this.getHandle().maxLureAngle = maxLureAngle;
     }
 
     @Override
     public void setLureAngle(float min, float max) {
         Preconditions.checkArgument(min <= max, "The minimum lure (%s) angle should be less than the maximum lure angle (%s)", min, max);
-        this.getHandle().banner$setMinLureAnglee(min);
-        this.getHandle().banner$setMaxLureAnglee(max);
+        this.getHandle().minLureAngle = min;
+        this.getHandle().maxLureAngle = max;
     }
 
     @Override
     public boolean isSkyInfluenced() {
-        return this.getHandle().bridge$skyInfluenced();
+        return this.getHandle().skyInfluenced;
     }
 
     @Override
     public void setSkyInfluenced(boolean skyInfluenced) {
-        this.getHandle().banner$setSkyInfluenced(skyInfluenced);
+        this.getHandle().skyInfluenced = skyInfluenced;
     }
 
     @Override
     public boolean isRainInfluenced() {
-        return this.getHandle().bridge$rainInfluenced();
+        return this.getHandle().rainInfluenced;
     }
 
     @Override
     public void setRainInfluenced(boolean rainInfluenced) {
-        this.getHandle().banner$setRainInfluenced(rainInfluenced);
+        this.getHandle().rainInfluenced = rainInfluenced;
     }
 
     @Override
     public boolean getApplyLure() {
-        return this.getHandle().bridge$applyLure();
+        return this.getHandle().applyLure;
     }
 
     @Override
     public void setApplyLure(boolean applyLure) {
-        this.getHandle().banner$setApplyLure(applyLure);
+        this.getHandle().applyLure = applyLure;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java	(date 1729674280167)
@@ -28,24 +28,24 @@
 
     @Override
     public double getMaxSpeed() {
-        return this.getHandle().bridge$maxSpeed();
+        return this.getHandle().maxSpeed;
     }
 
     @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
-            this.getHandle().banner$setMaxSpeed(speed);
+            this.getHandle().maxSpeed = speed;
         }
     }
 
     @Override
     public boolean isSlowWhenEmpty() {
-        return this.getHandle().bridge$slowWhenEmpty();
+        return this.getHandle().slowWhenEmpty;
     }
 
     @Override
     public void setSlowWhenEmpty(boolean slow) {
-        this.getHandle().banner$setSlowWhenEmpty(slow);
+        this.getHandle().slowWhenEmpty = slow;
     }
 
     @Override
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java	(date 1729674280133)
@@ -1,82 +1,81 @@
 package org.bukkit.craftbukkit.entity;
 
-import com.google.common.base.Preconditions;
 import java.util.stream.Collectors;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.vehicle.AbstractBoat;
 import org.bukkit.TreeSpecies;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Boat;
 import org.bukkit.entity.Entity;
 
-public class CraftBoat extends CraftVehicle implements Boat {
+public abstract class CraftBoat extends CraftVehicle implements Boat {
 
-    public CraftBoat(CraftServer server, net.minecraft.world.entity.vehicle.Boat entity) {
+    public CraftBoat(CraftServer server, AbstractBoat entity) {
         super(server, entity);
     }
 
     @Override
     public TreeSpecies getWoodType() {
-        return CraftBoat.getTreeSpecies(this.getHandle().getVariant());
+        return CraftBoat.getTreeSpecies(this.getHandle().getType());
     }
 
     @Override
     public void setWoodType(TreeSpecies species) {
-        this.getHandle().setVariant(CraftBoat.getBoatType(species));
+        throw new UnsupportedOperationException("Not supported - you must spawn a new entity to change boat type.");
     }
 
     @Override
     public Type getBoatType() {
-        return CraftBoat.boatTypeFromNms(this.getHandle().getVariant());
+        return CraftBoat.boatTypeFromNms(this.getHandle().getType());
     }
 
     @Override
     public void setBoatType(Type type) {
-        Preconditions.checkArgument(type != null, "Boat.Type cannot be null");
-
-        this.getHandle().setVariant(CraftBoat.boatTypeToNms(type));
+        throw new UnsupportedOperationException("Not supported - you must spawn a new entity to change boat type.");
     }
 
     @Override
     public double getMaxSpeed() {
-        return this.getHandle().bridge$maxSpeed();
+        return this.getHandle().maxSpeed;
     }
 
     @Override
     public void setMaxSpeed(double speed) {
         if (speed >= 0D) {
-            this.getHandle().banner$setMaxSpeed(speed);
+            this.getHandle().maxSpeed = speed;
         }
     }
 
     @Override
     public double getOccupiedDeceleration() {
-        return this.getHandle().bridge$occupiedDeceleration();
+        return this.getHandle().occupiedDeceleration;
     }
 
     @Override
     public void setOccupiedDeceleration(double speed) {
         if (speed >= 0D) {
-            this.getHandle().banner$setOccupiedDeceleration(speed);
+            this.getHandle().occupiedDeceleration = speed;
         }
     }
 
     @Override
     public double getUnoccupiedDeceleration() {
-        return this.getHandle().bridge$unoccupiedDeceleration();
+        return this.getHandle().unoccupiedDeceleration;
     }
 
     @Override
     public void setUnoccupiedDeceleration(double speed) {
-        this.getHandle().banner$setUnoccupiedDeceleration(speed);
+        this.getHandle().unoccupiedDeceleration = speed;
     }
 
     @Override
     public boolean getWorkOnLand() {
-        return this.getHandle().bridge$landBoats();
+        return this.getHandle().landBoats;
     }
 
     @Override
     public void setWorkOnLand(boolean workOnLand) {
-        this.getHandle().banner$setLandBoats(workOnLand);
+        this.getHandle().landBoats = workOnLand;
     }
 
     @Override
@@ -85,8 +84,8 @@
     }
 
     @Override
-    public net.minecraft.world.entity.vehicle.Boat getHandle() {
-        return (net.minecraft.world.entity.vehicle.Boat) this.entity;
+    public AbstractBoat getHandle() {
+        return (AbstractBoat) this.entity;
     }
 
     @Override
@@ -94,37 +93,47 @@
         return "CraftBoat{boatType=" + this.getBoatType() + ",status=" + this.getStatus() + ",passengers=" + this.getPassengers().stream().map(Entity::toString).collect(Collectors.joining("-", "{", "}")) + "}";
     }
 
-    public static Boat.Type boatTypeFromNms(net.minecraft.world.entity.vehicle.Boat.Type boatType) {
-        return switch (boatType) {
-            default -> throw new EnumConstantNotPresentException(Type.class, boatType.name());
-            case OAK -> Type.OAK;
-            case BIRCH -> Type.BIRCH;
-            case ACACIA -> Type.ACACIA;
-            case CHERRY -> Type.CHERRY;
-            case JUNGLE -> Type.JUNGLE;
-            case SPRUCE -> Type.SPRUCE;
-            case DARK_OAK -> Type.DARK_OAK;
-            case MANGROVE -> Type.MANGROVE;
-            case BAMBOO -> Type.BAMBOO;
-        };
-    }
+    public static Boat.Type boatTypeFromNms(EntityType<?> boatType) {
+        if (boatType == EntityType.OAK_BOAT || boatType == EntityType.OAK_CHEST_BOAT) {
+            return Type.OAK;
+        }
+
+        if (boatType == EntityType.BIRCH_BOAT || boatType == EntityType.BIRCH_CHEST_BOAT) {
+            return Type.BIRCH;
+        }
+
+        if (boatType == EntityType.ACACIA_BOAT || boatType == EntityType.ACACIA_CHEST_BOAT) {
+            return Type.ACACIA;
+        }
+
+        if (boatType == EntityType.CHERRY_BOAT || boatType == EntityType.CHERRY_CHEST_BOAT) {
+            return Type.CHERRY;
+        }
+
+        if (boatType == EntityType.JUNGLE_BOAT || boatType == EntityType.JUNGLE_CHEST_BOAT) {
+            return Type.JUNGLE;
+        }
+
+        if (boatType == EntityType.SPRUCE_BOAT || boatType == EntityType.SPRUCE_CHEST_BOAT) {
+            return Type.SPRUCE;
+        }
+
+        if (boatType == EntityType.DARK_OAK_BOAT || boatType == EntityType.DARK_OAK_CHEST_BOAT) {
+            return Type.DARK_OAK;
+        }
+
+        if (boatType == EntityType.MANGROVE_BOAT || boatType == EntityType.MANGROVE_CHEST_BOAT) {
+            return Type.MANGROVE;
+        }
+
+        if (boatType == EntityType.BAMBOO_RAFT || boatType == EntityType.BAMBOO_CHEST_RAFT) {
+            return Type.BAMBOO;
+        }
 
-    public static net.minecraft.world.entity.vehicle.Boat.Type boatTypeToNms(Boat.Type type) {
-        return switch (type) {
-            default -> throw new EnumConstantNotPresentException(net.minecraft.world.entity.vehicle.Boat.Type.class, type.name());
-            case BAMBOO -> net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO;
-            case MANGROVE -> net.minecraft.world.entity.vehicle.Boat.Type.MANGROVE;
-            case SPRUCE -> net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE;
-            case DARK_OAK -> net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK;
-            case JUNGLE -> net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE;
-            case CHERRY -> net.minecraft.world.entity.vehicle.Boat.Type.CHERRY;
-            case ACACIA -> net.minecraft.world.entity.vehicle.Boat.Type.ACACIA;
-            case BIRCH -> net.minecraft.world.entity.vehicle.Boat.Type.BIRCH;
-            case OAK -> net.minecraft.world.entity.vehicle.Boat.Type.OAK;
-        };
+        throw new EnumConstantNotPresentException(Type.class, boatType.toString());
     }
 
-    public static Status boatStatusFromNms(net.minecraft.world.entity.vehicle.Boat.Status enumStatus) {
+    public static Status boatStatusFromNms(net.minecraft.world.entity.vehicle.Boat.EnumStatus enumStatus) {
         return switch (enumStatus) {
             default -> throw new EnumConstantNotPresentException(Status.class, enumStatus.name());
             case IN_AIR -> Status.IN_AIR;
@@ -136,40 +145,27 @@
     }
 
     @Deprecated
-    public static TreeSpecies getTreeSpecies(net.minecraft.world.entity.vehicle.Boat.Type boatType) {
-        switch (boatType) {
-            case SPRUCE:
-                return TreeSpecies.REDWOOD;
-            case BIRCH:
-                return TreeSpecies.BIRCH;
-            case JUNGLE:
-                return TreeSpecies.JUNGLE;
-            case ACACIA:
-                return TreeSpecies.ACACIA;
-            case DARK_OAK:
-                return TreeSpecies.DARK_OAK;
-            case OAK:
-            default:
-                return TreeSpecies.GENERIC;
-        }
+    public static TreeSpecies getTreeSpecies(EntityType<?> boatType) {
+        if (boatType == EntityType.SPRUCE_BOAT || boatType == EntityType.SPRUCE_CHEST_BOAT) {
+            return TreeSpecies.REDWOOD;
+        }
+
+        if (boatType == EntityType.BIRCH_BOAT || boatType == EntityType.BIRCH_CHEST_BOAT) {
+            return TreeSpecies.BIRCH;
+        }
+
+        if (boatType == EntityType.JUNGLE_BOAT || boatType == EntityType.JUNGLE_CHEST_BOAT) {
+            return TreeSpecies.JUNGLE;
+        }
+
+        if (boatType == EntityType.ACACIA_BOAT || boatType == EntityType.ACACIA_CHEST_BOAT) {
+            return TreeSpecies.ACACIA;
+        }
+
+        if (boatType == EntityType.DARK_OAK_BOAT || boatType == EntityType.DARK_OAK_CHEST_BOAT) {
+            return TreeSpecies.DARK_OAK;
+        }
+
+        return TreeSpecies.GENERIC;
     }
-
-    @Deprecated
-    public static net.minecraft.world.entity.vehicle.Boat.Type getBoatType(TreeSpecies species) {
-        switch (species) {
-            case REDWOOD:
-                return net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE;
-            case BIRCH:
-                return net.minecraft.world.entity.vehicle.Boat.Type.BIRCH;
-            case JUNGLE:
-                return net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE;
-            case ACACIA:
-                return net.minecraft.world.entity.vehicle.Boat.Type.ACACIA;
-            case DARK_OAK:
-                return net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK;
-            case GENERIC:
-            default:
-                return net.minecraft.world.entity.vehicle.Boat.Type.OAK;
-        }
-    }
 }
Index: banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
--- a/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java	(revision 04a7481a14d7847eaeebe7af38109b4982bb7b24)
+++ b/banner-server/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java	(date 1729674280160)
@@ -12,9 +12,11 @@
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ClientboundOpenScreenPacket;
 import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.MenuProvider;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.player.Player;
@@ -44,11 +46,10 @@
 import org.bukkit.craftbukkit.inventory.CraftInventoryPlayer;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.inventory.CraftItemType;
 import org.bukkit.craftbukkit.inventory.CraftMerchantCustom;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.Firework;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.entity.Villager;
@@ -159,6 +160,14 @@
         this.getHandle().stopSleepInBed(true, setSpawnLocation);
     }
 
+    @Override
+    public void startRiptideAttack(int duration, float damage, ItemStack attackItem) {
+        Preconditions.checkArgument(duration > 0, "Duration must be greater than 0");
+        Preconditions.checkArgument(damage >= 0, "Damage must not be negative");
+
+        this.getHandle().startAutoSpinAttack(duration, damage, CraftItemStack.asNMSCopy(attackItem));
+    }
+
     @Override
     public Location getBedLocation() {
         Preconditions.checkState(this.isSleeping(), "Not sleeping");
@@ -309,14 +318,14 @@
         if (this.getHandle().containerMenu == formerContainer) {
             return null;
         }
-        this.getHandle().containerMenu.banner$setCheckReachable(false);
+        this.getHandle().containerMenu.checkReachable = false;
         return this.getHandle().containerMenu.getBukkitView();
     }
 
     private static void openCustomInventory(Inventory inventory, ServerPlayer player, MenuType<?> windowType) {
         if (player.connection == null) return;
         Preconditions.checkArgument(windowType != null, "Unknown windowType");
-        AbstractContainerMenu container = new CraftContainer(inventory, player, player.nextContainerCounterInt());
+        AbstractContainerMenu container = new CraftContainer(inventory, player, player.nextContainerCounter());
 
         container = CraftEventFactory.callInventoryOpenEvent(player, container);
         if (container == null) return;
@@ -341,7 +350,7 @@
         }
         this.getHandle().openMenu(Blocks.CRAFTING_TABLE.defaultBlockState().getMenuProvider(this.getHandle().level(), CraftLocation.toBlockPosition(location)));
         if (force) {
-            this.getHandle().containerMenu.banner$setCheckReachable(false);
+            this.getHandle().containerMenu.checkReachable = false;
         }
         return this.getHandle().containerMenu.getBukkitView();
     }
@@ -363,13 +372,14 @@
         this.getHandle().openMenu(Blocks.ENCHANTING_TABLE.defaultBlockState().getMenuProvider(this.getHandle().level(), pos));
 
         if (force) {
-            this.getHandle().containerMenu.banner$setCheckReachable(false);
+            this.getHandle().containerMenu.checkReachable = false;
         }
         return this.getHandle().containerMenu.getBukkitView();
     }
 
     @Override
     public void openInventory(InventoryView inventory) {
+        Preconditions.checkArgument(this.equals(inventory.getPlayer()), "InventoryView must belong to the opening player");
         if (!(this.getHandle() instanceof ServerPlayer)) return; // TODO: NPC support?
         if (((ServerPlayer) this.getHandle()).connection == null) return;
         if (this.getHandle().containerMenu != this.getHandle().inventoryMenu) {
@@ -381,7 +391,7 @@
         if (inventory instanceof CraftInventoryView) {
             container = ((CraftInventoryView) inventory).getHandle();
         } else {
-            container = new CraftContainer(inventory, this.getHandle(), player.nextContainerCounterInt());
+            container = new CraftContainer(inventory, this.getHandle(), player.nextContainerCounter());
         }
 
         // Trigger an INVENTORY_OPEN event
@@ -483,7 +493,7 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
-        return this.getHandle().getCooldowns().isOnCooldown(CraftItemType.bukkitToMinecraft(material));
+        return this.hasCooldown(new ItemStack(material));
     }
 
     @Override
@@ -491,17 +501,40 @@
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
-        ItemCooldowns.CooldownInstance cooldown = this.getHandle().getCooldowns().cooldowns.get(CraftItemType.bukkitToMinecraft(material));
-        return (cooldown == null) ? 0 : Math.max(0, cooldown.endTime - this.getHandle().getCooldowns().tickCount);
+        return this.getCooldown(new ItemStack(material));
     }
 
     @Override
     public void setCooldown(Material material, int ticks) {
-        Preconditions.checkArgument(material != null, "Material cannot be null");
-        Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
+        this.setCooldown(new ItemStack(material), ticks);
+    }
+
+    @Override
+    public boolean hasCooldown(ItemStack item) {
+        Preconditions.checkArgument(item != null, "Material cannot be null");
+
+        return this.getHandle().getCooldowns().isOnCooldown(CraftItemStack.asNMSCopy(item));
+    }
+
+    @Override
+    public int getCooldown(ItemStack item) {
+        Preconditions.checkArgument(item != null, "Material cannot be null");
+
+        ResourceLocation group = this.getHandle().getCooldowns().getCooldownGroup(CraftItemStack.asNMSCopy(item));
+        if (group == null) {
+            return 0;
+        }
+
+        ItemCooldowns.CooldownInstance cooldown = this.getHandle().getCooldowns().cooldowns.get(group);
+        return (cooldown == null) ? 0 : Math.max(0, cooldown.endTime - this.getHandle().getCooldowns().tickCount);
+    }
+
+    @Override
+    public void setCooldown(ItemStack item, int ticks) {
+        Preconditions.checkArgument(item != null, "Material cannot be null");
         Preconditions.checkArgument(ticks >= 0, "Cannot have negative cooldown");
 
-        this.getHandle().getCooldowns().addCooldown(CraftItemType.bukkitToMinecraft(material), ticks);
+        this.getHandle().getCooldowns().addCooldown(CraftItemStack.asNMSCopy(item), ticks);
     }
 
     @Override
@@ -539,7 +572,7 @@
         RecipeManager manager = this.getHandle().level().getServer().getRecipeManager();
 
         for (NamespacedKey recipeKey : recipeKeys) {
-            Optional<? extends RecipeHolder<?>> recipe = manager.byKey(CraftNamespacedKey.toMinecraft(recipeKey));
+            Optional<? extends RecipeHolder<?>> recipe = manager.byKey(CraftRecipe.toMinecraft(recipeKey));
             if (!recipe.isPresent()) {
                 continue;
             }
@@ -553,7 +586,7 @@
     @Override
     public org.bukkit.entity.Entity getShoulderEntityLeft() {
         if (!this.getHandle().getShoulderEntityLeft().isEmpty()) {
-            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityLeft(), this.getHandle().level());
+            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityLeft(), this.getHandle().level(), EntitySpawnReason.LOAD);
 
             return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
         }
@@ -572,7 +605,7 @@
     @Override
     public org.bukkit.entity.Entity getShoulderEntityRight() {
         if (!this.getHandle().getShoulderEntityRight().isEmpty()) {
-            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityRight(), this.getHandle().level());
+            Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityRight(), this.getHandle().level(), EntitySpawnReason.LOAD);
 
             return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
         }
@@ -626,32 +659,32 @@
 
     @Override
     public int getSaturatedRegenRate() {
-        return this.getHandle().getFoodData().bridge$saturatedRegenRate();
+        return this.getHandle().getFoodData().saturatedRegenRate;
     }
 
     @Override
     public void setSaturatedRegenRate(int i) {
-        this.getHandle().getFoodData().banner$setSaturatedRegenRate(i);
+        this.getHandle().getFoodData().saturatedRegenRate = i;
     }
 
     @Override
     public int getUnsaturatedRegenRate() {
-        return this.getHandle().getFoodData().bridge$unsaturatedRegenRate();
+        return this.getHandle().getFoodData().unsaturatedRegenRate;
     }
 
     @Override
     public void setUnsaturatedRegenRate(int i) {
-        this.getHandle().getFoodData().banner$setUnsaturatedRegenRate(i);
+        this.getHandle().getFoodData().unsaturatedRegenRate = i;
     }
 
     @Override
     public int getStarvationRate() {
-        return this.getHandle().getFoodData().bridge$starvationRate();
+        return this.getHandle().getFoodData().starvationRate;
     }
 
     @Override
     public void setStarvationRate(int i) {
-        this.getHandle().getFoodData().banner$setSaturatedRegenRate(i);
+        this.getHandle().getFoodData().starvationRate = i;
     }
 
     @Override

--- a/net/minecraft/server/level/EntityTrackerEntry.java
+++ b/net/minecraft/server/level/EntityTrackerEntry.java
@@ -50,6 +50,12 @@
 import net.minecraft.world.phys.Vec3D;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.server.network.ServerPlayerConnection;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerVelocityEvent;
+// CraftBukkit end
+
 public class EntityTrackerEntry {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -74,8 +80,12 @@
     private boolean wasOnGround;
     @Nullable
     private List<DataWatcher.c<?>> trackedDataValues;
+    // CraftBukkit start
+    private final Set<ServerPlayerConnection> trackedPlayers;
 
-    public EntityTrackerEntry(WorldServer worldserver, Entity entity, int i, boolean flag, Consumer<Packet<?>> consumer) {
+    public EntityTrackerEntry(WorldServer worldserver, Entity entity, int i, boolean flag, Consumer<Packet<?>> consumer, Set<ServerPlayerConnection> trackedPlayers) {
+        this.trackedPlayers = trackedPlayers;
+        // CraftBukkit end
         this.level = worldserver;
         this.broadcast = consumer;
         this.entity = entity;
@@ -94,7 +104,7 @@
         List<Entity> list = this.entity.getPassengers();
 
         if (!list.equals(this.lastPassengers)) {
-            this.broadcast.accept(new PacketPlayOutMount(this.entity));
+            this.broadcastAndSend(new PacketPlayOutMount(this.entity)); // CraftBukkit
             removedPassengers(list, this.lastPassengers).forEach((entity) -> {
                 if (entity instanceof EntityPlayer entityplayer) {
                     entityplayer.connection.teleport(entityplayer.getX(), entityplayer.getY(), entityplayer.getZ(), entityplayer.getYRot(), entityplayer.getXRot());
@@ -107,18 +117,18 @@
         Entity entity = this.entity;
 
         if (entity instanceof EntityItemFrame entityitemframe) {
-            if (this.tickCount % 10 == 0) {
+            if (true || this.tickCount % 10 == 0) { // CraftBukkit - Moved below, should always enter this block
                 ItemStack itemstack = entityitemframe.getItem();
 
-                if (itemstack.getItem() instanceof ItemWorldMap) {
+                if (this.tickCount % 10 == 0 && itemstack.getItem() instanceof ItemWorldMap) { // CraftBukkit - Moved this.tickCounter % 10 logic here so item frames do not enter the other blocks
                     MapId mapid = (MapId) itemstack.get(DataComponents.MAP_ID);
                     WorldMap worldmap = ItemWorldMap.getSavedData(mapid, this.level);
 
                     if (worldmap != null) {
-                        Iterator iterator = this.level.players().iterator();
+                        Iterator<ServerPlayerConnection> iterator = this.trackedPlayers.iterator(); // CraftBukkit
 
                         while (iterator.hasNext()) {
-                            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+                            EntityPlayer entityplayer = iterator.next().getPlayer(); // CraftBukkit
 
                             worldmap.tickCarriedBy(entityplayer, itemstack);
                             Packet<?> packet = worldmap.getUpdatePacket(mapid, entityplayer);
@@ -248,6 +258,27 @@
 
         ++this.tickCount;
         if (this.entity.hurtMarked) {
+            // CraftBukkit start - Create PlayerVelocity event
+            boolean cancelled = false;
+
+            if (this.entity instanceof EntityPlayer) {
+                Player player = (Player) this.entity.getBukkitEntity();
+                org.bukkit.util.Vector velocity = player.getVelocity();
+
+                PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                this.entity.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    cancelled = true;
+                } else if (!velocity.equals(event.getVelocity())) {
+                    player.setVelocity(event.getVelocity());
+                }
+            }
+
+            if (cancelled) {
+                return;
+            }
+            // CraftBukkit end
             this.entity.hurtMarked = false;
             this.broadcastAndSend(new PacketPlayOutEntityVelocity(this.entity));
         }
@@ -298,7 +329,10 @@
 
     public void sendPairingData(EntityPlayer entityplayer, Consumer<Packet<PacketListenerPlayOut>> consumer) {
         if (this.entity.isRemoved()) {
-            EntityTrackerEntry.LOGGER.warn("Fetching packet for removed entity {}", this.entity);
+            // CraftBukkit start - Remove useless error spam, just return
+            // EntityTrackerEntry.LOGGER.warn("Fetching packet for removed entity {}", this.entity);
+            return;
+            // CraftBukkit end
         }
 
         Packet<PacketListenerPlayOut> packet = this.entity.getAddEntityPacket(this);
@@ -313,6 +347,12 @@
         if (this.entity instanceof EntityLiving) {
             Collection<AttributeModifiable> collection = ((EntityLiving) this.entity).getAttributes().getSyncableAttributes();
 
+            // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
+            if (this.entity.getId() == entityplayer.getId()) {
+                ((EntityPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(collection, false);
+            }
+            // CraftBukkit end
+
             if (!collection.isEmpty()) {
                 consumer.accept(new PacketPlayOutUpdateAttributes(this.entity.getId(), collection));
             }
@@ -344,6 +384,7 @@
             if (!list.isEmpty()) {
                 consumer.accept(new PacketPlayOutEntityEquipment(this.entity.getId(), list));
             }
+            ((EntityLiving) this.entity).detectEquipmentUpdatesPublic(); // CraftBukkit - SPIGOT-3789: sync again immediately after sending
         }
 
         if (!this.entity.getPassengers().isEmpty()) {
@@ -396,6 +437,11 @@
             Set<AttributeModifiable> set = ((EntityLiving) this.entity).getAttributes().getAttributesToSync();
 
             if (!set.isEmpty()) {
+                // CraftBukkit start - Send scaled max health
+                if (this.entity instanceof EntityPlayer) {
+                    ((EntityPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(set, false);
+                }
+                // CraftBukkit end
                 this.broadcastAndSend(new PacketPlayOutUpdateAttributes(this.entity.getId(), set));
             }
 

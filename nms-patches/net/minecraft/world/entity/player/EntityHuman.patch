--- a/net/minecraft/world/entity/player/EntityHuman.java
+++ b/net/minecraft/world/entity/player/EntityHuman.java
@@ -119,6 +119,19 @@
 import net.minecraft.world.scores.ScoreboardTeam;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.nbt.NBTBase;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.CraftVector;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.player.PlayerVelocityEvent;
+// CraftBukkit end
+
 public abstract class EntityHuman extends EntityLiving {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -139,7 +152,8 @@
     private static final int CURRENT_IMPULSE_CONTEXT_RESET_GRACE_TIME_TICKS = 40;
     public static final Vec3D DEFAULT_VEHICLE_ATTACHMENT = new Vec3D(0.0D, 0.6D, 0.0D);
     public static final EntitySize STANDING_DIMENSIONS = EntitySize.scalable(0.6F, 1.8F).withEyeHeight(1.62F).withAttachments(EntityAttachments.builder().attach(EntityAttachment.VEHICLE, EntityHuman.DEFAULT_VEHICLE_ATTACHMENT));
-    private static final Map<EntityPose, EntitySize> POSES = ImmutableMap.builder().put(EntityPose.STANDING, EntityHuman.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, EntityHuman.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SWIMMING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SPIN_ATTACK, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.CROUCHING, EntitySize.scalable(0.6F, 1.5F).withEyeHeight(1.27F).withAttachments(EntityAttachments.builder().attach(EntityAttachment.VEHICLE, EntityHuman.DEFAULT_VEHICLE_ATTACHMENT))).put(EntityPose.DYING, EntitySize.fixed(0.2F, 0.2F).withEyeHeight(1.62F)).build();
+    // CraftBukkit - decompile error
+    private static final Map<EntityPose, EntitySize> POSES = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, EntityHuman.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SWIMMING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SPIN_ATTACK, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.CROUCHING, EntitySize.scalable(0.6F, 1.5F).withEyeHeight(1.27F).withAttachments(EntityAttachments.builder().attach(EntityAttachment.VEHICLE, EntityHuman.DEFAULT_VEHICLE_ATTACHMENT))).put(EntityPose.DYING, EntitySize.fixed(0.2F, 0.2F).withEyeHeight(1.62F)).build();
     private static final DataWatcherObject<Float> DATA_PLAYER_ABSORPTION_ID = DataWatcher.defineId(EntityHuman.class, DataWatcherRegistry.FLOAT);
     private static final DataWatcherObject<Integer> DATA_SCORE_ID = DataWatcher.defineId(EntityHuman.class, DataWatcherRegistry.INT);
     protected static final DataWatcherObject<Byte> DATA_PLAYER_MODE_CUSTOMISATION = DataWatcher.defineId(EntityHuman.class, DataWatcherRegistry.BYTE);
@@ -148,7 +162,7 @@
     protected static final DataWatcherObject<NBTTagCompound> DATA_SHOULDER_RIGHT = DataWatcher.defineId(EntityHuman.class, DataWatcherRegistry.COMPOUND_TAG);
     private long timeEntitySatOnShoulder;
     final PlayerInventory inventory = new PlayerInventory(this);
-    protected InventoryEnderChest enderChestInventory = new InventoryEnderChest();
+    protected InventoryEnderChest enderChestInventory = new InventoryEnderChest(this); // CraftBukkit - add "this" to constructor
     public final ContainerPlayer inventoryMenu;
     public Container containerMenu;
     protected FoodMetaData foodData = new FoodMetaData();
@@ -186,6 +200,16 @@
     private boolean ignoreFallDamageFromCurrentImpulse;
     private int currentImpulseContextResetGraceTime;
 
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public int oldLevel = -1;
+
+    @Override
+    public CraftHumanEntity getBukkitEntity() {
+        return (CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+
     public EntityHuman(World world, BlockPosition blockposition, float f, GameProfile gameprofile) {
         super(EntityTypes.PLAYER, world);
         this.lastItemInMainHand = ItemStack.EMPTY;
@@ -350,7 +374,7 @@
     }
 
     private void turtleHelmetTick() {
-        this.addEffect(new MobEffect(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
+        this.addEffect(new MobEffect(MobEffects.WATER_BREATHING, 200, 0, false, false, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TURTLE_HELMET); // CraftBukkit
     }
 
     private boolean isEquipped(Item item) {
@@ -520,8 +544,14 @@
     public void rideTick() {
         if (!this.level().isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
             this.stopRiding();
-            this.setShiftKeyDown(false);
-        } else {
+            // CraftBukkit start - SPIGOT-7316: no longer passenger, dismount and return
+            if (!this.isPassenger()) {
+                this.setShiftKeyDown(false);
+                return;
+            }
+        }
+        {
+            // CraftBukkit end
             super.rideTick();
             this.oBob = this.bob;
             this.bob = 0.0F;
@@ -716,6 +746,13 @@
 
     @Nullable
     public EntityItem drop(ItemStack itemstack, boolean flag, boolean flag1) {
+        // CraftBukkit start - SPIGOT-2942: Add boolean to call event
+        return drop(itemstack, flag, flag1, true);
+    }
+
+    @Nullable
+    public EntityItem drop(ItemStack itemstack, boolean flag, boolean flag1, boolean callEvent) {
+        // CraftBukkit end
         if (!itemstack.isEmpty() && this.level().isClientSide) {
             this.swing(EnumHand.MAIN_HAND);
         }
@@ -806,7 +843,7 @@
         }
 
         if (nbttagcompound.contains("LastDeathLocation", 10)) {
-            DataResult dataresult = GlobalPos.CODEC.parse(DynamicOpsNBT.INSTANCE, nbttagcompound.get("LastDeathLocation"));
+            DataResult<GlobalPos> dataresult = GlobalPos.CODEC.parse(DynamicOpsNBT.INSTANCE, nbttagcompound.get("LastDeathLocation")); // CraftBukkit - decompile error
             Logger logger = EntityHuman.LOGGER;
 
             Objects.requireNonNull(logger);
@@ -814,7 +851,7 @@
         }
 
         if (nbttagcompound.contains("current_explosion_impact_pos", 9)) {
-            DataResult dataresult1 = Vec3D.CODEC.parse(DynamicOpsNBT.INSTANCE, nbttagcompound.get("current_explosion_impact_pos"));
+            DataResult<Vec3D> dataresult1 = Vec3D.CODEC.parse(DynamicOpsNBT.INSTANCE, nbttagcompound.get("current_explosion_impact_pos")); // CraftBukkit - decompile error
             Logger logger1 = EntityHuman.LOGGER;
 
             Objects.requireNonNull(logger1);
@@ -851,7 +888,7 @@
         }
 
         this.getLastDeathLocation().flatMap((globalpos) -> {
-            DataResult dataresult = GlobalPos.CODEC.encodeStart(DynamicOpsNBT.INSTANCE, globalpos);
+            DataResult<NBTBase> dataresult = GlobalPos.CODEC.encodeStart(DynamicOpsNBT.INSTANCE, globalpos); // CraftBukkit - decompile error
             Logger logger = EntityHuman.LOGGER;
 
             Objects.requireNonNull(logger);
@@ -883,10 +920,10 @@
             if (this.isDeadOrDying()) {
                 return false;
             } else {
-                this.removeEntitiesOnShoulder();
+                // this.removeEntitiesOnShoulder(); // CraftBukkit - moved down
                 if (damagesource.scalesWithDifficulty()) {
                     if (worldserver.getDifficulty() == EnumDifficulty.PEACEFUL) {
-                        f = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (worldserver.getDifficulty() == EnumDifficulty.EASY) {
@@ -898,7 +935,13 @@
                     }
                 }
 
-                return f == 0.0F ? false : super.hurtServer(worldserver, damagesource, f);
+                // CraftBukkit start - Don't filter out 0 damage
+                boolean damaged = super.hurtServer(worldserver, damagesource, f);
+                if (damaged) {
+                    this.removeEntitiesOnShoulder();
+                }
+                return damaged;
+                // CraftBukkit end
             }
         }
     }
@@ -920,10 +963,29 @@
     }
 
     public boolean canHarmPlayer(EntityHuman entityhuman) {
-        ScoreboardTeam scoreboardteam = this.getTeam();
-        ScoreboardTeam scoreboardteam1 = entityhuman.getTeam();
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+        if (entityhuman instanceof EntityPlayer) {
+            EntityPlayer thatPlayer = (EntityPlayer) entityhuman;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        } else {
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = entityhuman.level().getCraftServer().getOfflinePlayer(entityhuman.getScoreboardName());
+            team = entityhuman.level().getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        }
 
-        return scoreboardteam == null ? true : (!scoreboardteam.isAlliedTo(scoreboardteam1) ? true : scoreboardteam.isAllowFriendlyFire());
+        if (this instanceof EntityPlayer) {
+            return !team.hasPlayer(((EntityPlayer) this).getBukkitEntity());
+        }
+        return !team.hasPlayer(this.level().getCraftServer().getOfflinePlayer(this.getScoreboardName()));
+        // CraftBukkit end
     }
 
     @Override
@@ -963,8 +1025,13 @@
         }
     }
 
+    // CraftBukkit start
     @Override
-    protected void actuallyHurt(WorldServer worldserver, DamageSource damagesource, float f) {
+    protected boolean actuallyHurt(WorldServer worldserver, DamageSource damagesource, float f, EntityDamageEvent event) { // void -> boolean
+        if (true) {
+            return super.actuallyHurt(worldserver, damagesource, f, event);
+        }
+        // CraftBukkit end
         if (!this.isInvulnerableTo(worldserver, damagesource)) {
             f = this.getDamageAfterArmorAbsorb(damagesource, f);
             f = this.getDamageAfterMagicAbsorb(damagesource, f);
@@ -979,7 +1046,7 @@
             }
 
             if (f != 0.0F) {
-                this.causeFoodExhaustion(damagesource.getFoodExhaustion());
+                this.causeFoodExhaustion(damagesource.getFoodExhaustion(), EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
                 this.getCombatTracker().recordDamage(damagesource, f);
                 this.setHealth(this.getHealth() - f);
                 if (f < 3.4028235E37F) {
@@ -989,6 +1056,7 @@
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
             }
         }
+        return false; // CraftBukkit
     }
 
     public boolean isTextFilteringEnabled() {
@@ -1141,10 +1209,15 @@
 
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                this.resetAttackStrengthTicker();
+                // this.resetAttackStrengthTicker(); // CraftBukkit - Moved to EntityLiving to reset the cooldown after the damage is dealt
                 if (entity.getType().is(TagsEntity.REDIRECTABLE_PROJECTILE) && entity instanceof IProjectile) {
                     IProjectile iprojectile = (IProjectile) entity;
 
+                    // CraftBukkit start
+                    if (CraftEventFactory.handleNonLivingEntityDamageEvent(entity, damagesource, f1, false)) {
+                        return;
+                    }
+                    // CraftBukkit end
                     if (iprojectile.deflect(ProjectileDeflection.AIM_DEFLECT, this, this, true)) {
                         this.level().playSound((EntityHuman) null, this.getX(), this.getY(), this.getZ(), SoundEffects.PLAYER_ATTACK_NODAMAGE, this.getSoundSource());
                         return;
@@ -1220,8 +1293,13 @@
                                 if (entityliving2 != this && entityliving2 != entity && !this.isAlliedTo((Entity) entityliving2) && (!(entityliving2 instanceof EntityArmorStand) || !((EntityArmorStand) entityliving2).isMarker()) && this.distanceToSqr((Entity) entityliving2) < 9.0D) {
                                     float f7 = this.getEnchantedDamage(entityliving2, f6, damagesource) * f2;
 
+                                    // CraftBukkit start - Only apply knockback if the damage hits
+                                    if (!entityliving2.hurtServer((WorldServer) this.level(), this.damageSources().playerAttack(this).sweep(), f7)) {
+                                        continue;
+                                    }
+                                    // CraftBukkit end
                                     entityliving2.knockback(0.4000000059604645D, (double) MathHelper.sin(this.getYRot() * 0.017453292F), (double) (-MathHelper.cos(this.getYRot() * 0.017453292F)));
-                                    entityliving2.hurt(damagesource, f7);
+                                    // entityliving2.hurt(damagesource, f7); // CraftBukkit - moved up
                                     World world = this.level();
 
                                     if (world instanceof WorldServer) {
@@ -1237,9 +1315,26 @@
                         }
 
                         if (entity instanceof EntityPlayer && entity.hurtMarked) {
+                            // CraftBukkit start - Add Velocity Event
+                            boolean cancelled = false;
+                            Player player = (Player) entity.getBukkitEntity();
+                            org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
+
+                            PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                            if (event.isCancelled()) {
+                                cancelled = true;
+                            } else if (!velocity.equals(event.getVelocity())) {
+                                player.setVelocity(event.getVelocity());
+                            }
+
+                            if (!cancelled) {
                             ((EntityPlayer) entity).connection.send(new PacketPlayOutEntityVelocity(entity));
                             entity.hurtMarked = false;
                             entity.setDeltaMovement(vec3d);
+                            }
+                            // CraftBukkit end
                         }
 
                         if (flag2) {
@@ -1305,9 +1400,14 @@
                             }
                         }
 
-                        this.causeFoodExhaustion(0.1F);
+                        this.causeFoodExhaustion(0.1F, EntityExhaustionEvent.ExhaustionReason.ATTACK); // CraftBukkit - EntityExhaustionEvent
                     } else {
                         this.level().playSound((EntityHuman) null, this.getX(), this.getY(), this.getZ(), SoundEffects.PLAYER_ATTACK_NODAMAGE, this.getSoundSource(), 1.0F, 1.0F);
+                        // CraftBukkit start - resync on cancelled event
+                        if (this instanceof EntityPlayer) {
+                            ((EntityPlayer) this).getBukkitEntity().updateInventory();
+                        }
+                        // CraftBukkit end
                     }
                 }
 
@@ -1348,7 +1448,14 @@
 
     @Override
     public void remove(Entity.RemovalReason entity_removalreason) {
-        super.remove(entity_removalreason);
+        // CraftBukkit start - add Bukkit remove cause
+        this.remove(entity_removalreason, null);
+    }
+
+    @Override
+    public void remove(Entity.RemovalReason entity_removalreason, EntityRemoveEvent.Cause cause) {
+        super.remove(entity_removalreason, cause);
+        // CraftBukkit end
         this.inventoryMenu.removed(this);
         if (this.containerMenu != null && this.hasContainerOpen()) {
             this.doCloseContainer();
@@ -1388,6 +1495,12 @@
     }
 
     public Either<EntityHuman.EnumBedResult, Unit> startSleepInBed(BlockPosition blockposition) {
+        // CraftBukkit start
+        return this.startSleepInBed(blockposition, false);
+    }
+
+    public Either<EntityHuman.EnumBedResult, Unit> startSleepInBed(BlockPosition blockposition, boolean force) {
+        // CraftBukkit end
         this.startSleeping(blockposition);
         this.sleepCounter = 0;
         return Either.right(Unit.INSTANCE);
@@ -1542,12 +1655,24 @@
     }
 
     public void startFallFlying() {
-        this.setSharedFlag(7, true);
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) {
+            this.setSharedFlag(7, true);
+        } else {
+            // SPIGOT-5542: must toggle like below
+            this.setSharedFlag(7, true);
+            this.setSharedFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     public void stopFallFlying() {
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
         this.setSharedFlag(7, true);
         this.setSharedFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -1662,10 +1787,21 @@
         return this.experienceLevel >= 30 ? 112 + (this.experienceLevel - 30) * 9 : (this.experienceLevel >= 15 ? 37 + (this.experienceLevel - 15) * 5 : 7 + this.experienceLevel * 2);
     }
 
+    // CraftBukkit start
     public void causeFoodExhaustion(float f) {
+        this.causeFoodExhaustion(f, EntityExhaustionEvent.ExhaustionReason.UNKNOWN);
+    }
+
+    public void causeFoodExhaustion(float f, EntityExhaustionEvent.ExhaustionReason reason) {
+        // CraftBukkit end
         if (!this.abilities.invulnerable) {
             if (!this.level().isClientSide) {
-                this.foodData.addExhaustion(f);
+                // CraftBukkit start
+                EntityExhaustionEvent event = CraftEventFactory.callPlayerExhaustionEvent(this, reason, f);
+                if (!event.isCancelled()) {
+                    this.foodData.addExhaustion(event.getExhaustion());
+                }
+                // CraftBukkit end
             }
 
         }
@@ -1745,13 +1881,20 @@
 
     @Override
     public void setItemSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
+        // CraftBukkit start
+        setItemSlot(enumitemslot, itemstack, false);
+    }
+
+    @Override
+    public void setItemSlot(EnumItemSlot enumitemslot, ItemStack itemstack, boolean silent) {
+        // CraftBukkit end
         this.verifyEquippedItem(itemstack);
         if (enumitemslot == EnumItemSlot.MAINHAND) {
-            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.items.set(this.inventory.selected, itemstack), itemstack);
+            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.items.set(this.inventory.selected, itemstack), itemstack, silent); // CraftBukkit
         } else if (enumitemslot == EnumItemSlot.OFFHAND) {
-            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.offhand.set(0, itemstack), itemstack);
+            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.offhand.set(0, itemstack), itemstack, silent); // CraftBukkit
         } else if (enumitemslot.getType() == EnumItemSlot.Function.HUMANOID_ARMOR) {
-            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.armor.set(enumitemslot.getIndex(), itemstack), itemstack);
+            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.armor.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
         }
 
     }
@@ -1795,26 +1938,31 @@
 
     protected void removeEntitiesOnShoulder() {
         if (this.timeEntitySatOnShoulder + 20L < this.level().getGameTime()) {
-            this.respawnEntityOnShoulder(this.getShoulderEntityLeft());
-            this.setShoulderEntityLeft(new NBTTagCompound());
-            this.respawnEntityOnShoulder(this.getShoulderEntityRight());
-            this.setShoulderEntityRight(new NBTTagCompound());
+            // CraftBukkit start
+            if (this.respawnEntityOnShoulder(this.getShoulderEntityLeft())) {
+                this.setShoulderEntityLeft(new NBTTagCompound());
+            }
+            if (this.respawnEntityOnShoulder(this.getShoulderEntityRight())) {
+                this.setShoulderEntityRight(new NBTTagCompound());
+            }
+            // CraftBukkit end
         }
 
     }
 
-    private void respawnEntityOnShoulder(NBTTagCompound nbttagcompound) {
+    private boolean respawnEntityOnShoulder(NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean
         if (!this.level().isClientSide && !nbttagcompound.isEmpty()) {
-            EntityTypes.create(nbttagcompound, this.level(), EntitySpawnReason.LOAD).ifPresent((entity) -> {
+            return EntityTypes.create(nbttagcompound, this.level(), EntitySpawnReason.LOAD).map((entity) -> { // CraftBukkit
                 if (entity instanceof EntityTameableAnimal) {
                     ((EntityTameableAnimal) entity).setOwnerUUID(this.uuid);
                 }
 
                 entity.setPos(this.getX(), this.getY() + 0.699999988079071D, this.getZ());
-                ((WorldServer) this.level()).addWithUUID(entity);
-            });
+                return ((WorldServer) this.level()).addWithUUID(entity, CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY); // CraftBukkit
+            }).orElse(true); // CraftBukkit
         }
 
+        return true; // CraftBukkit
     }
 
     @Override

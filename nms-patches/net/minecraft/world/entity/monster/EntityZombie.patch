--- a/net/minecraft/world/entity/monster/EntityZombie.java
+++ b/net/minecraft/world/entity/monster/EntityZombie.java
@@ -67,6 +67,15 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.IBlockData;
 
+// CraftBukkit start
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.entity.Zombie;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+// CraftBukkit end
+
 public class EntityZombie extends EntityMonster {
 
     private static final MinecraftKey SPEED_MODIFIER_BABY_ID = MinecraftKey.withDefaultNamespace("baby");
@@ -91,6 +100,7 @@
     private boolean canBreakDoors;
     private int inWaterTime;
     public int conversionTime;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
 
     public EntityZombie(EntityTypes<? extends EntityZombie> entitytypes, World world) {
         super(entitytypes, world);
@@ -203,7 +213,10 @@
     public void tick() {
         if (!this.level().isClientSide && this.isAlive() && !this.isNoAi()) {
             if (this.isUnderWaterConverting()) {
-                --this.conversionTime;
+                // CraftBukkit start - Use wall time instead of ticks for conversion
+                int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+                this.conversionTime -= elapsedTicks;
+                // CraftBukkit end
                 if (this.conversionTime < 0) {
                     this.doUnderWaterConversion();
                 }
@@ -220,6 +233,7 @@
         }
 
         super.tick();
+        this.lastTick = MinecraftServer.currentTick; // CraftBukkit
     }
 
     @Override
@@ -254,6 +268,7 @@
     }
 
     public void startUnderWaterConversion(int i) {
+        this.lastTick = MinecraftServer.currentTick; // CraftBukkit
         this.conversionTime = i;
         this.getEntityData().set(EntityZombie.DATA_DROWNED_CONVERSION_ID, true);
     }
@@ -267,26 +282,39 @@
     }
 
     protected void convertToZombieType(EntityTypes<? extends EntityZombie> entitytypes) {
-        this.convertTo(entitytypes, ConversionParams.single(this, true, true), (entityzombie) -> {
+        EntityZombie converted = this.convertTo(entitytypes, ConversionParams.single(this, true, true), (entityzombie) -> { // CraftBukkit
             entityzombie.handleAttributes(entityzombie.level().getCurrentDifficultyAt(entityzombie.blockPosition()).getSpecialMultiplier());
-        });
+        // CraftBukkit start
+        }, EntityTransformEvent.TransformReason.DROWNED, CreatureSpawnEvent.SpawnReason.DROWNED);
+        if (converted == null) {
+            ((Zombie) getBukkitEntity()).setConversionTime(-1); // CraftBukkit - SPIGOT-5208: End conversion to stop event spam
+        }
+        // CraftBukkit end
     }
 
     @VisibleForTesting
     public boolean convertVillagerToZombieVillager(WorldServer worldserver, EntityVillager entityvillager) {
+        // CraftBukkit start
+        return convertVillagerToZombieVillager(worldserver, entityvillager, this.blockPosition(), this.isSilent(), EntityTransformEvent.TransformReason.INFECTION, CreatureSpawnEvent.SpawnReason.INFECTION) != null;
+    }
+
+    public static EntityZombieVillager convertVillagerToZombieVillager(WorldServer worldserver, EntityVillager entityvillager, net.minecraft.core.BlockPosition blockPosition, boolean silent, EntityTransformEvent.TransformReason transformReason, CreatureSpawnEvent.SpawnReason spawnReason) {
+        // CraftBukkit end
         EntityZombieVillager entityzombievillager = (EntityZombieVillager) entityvillager.convertTo(EntityTypes.ZOMBIE_VILLAGER, ConversionParams.single(entityvillager, true, true), (entityzombievillager1) -> {
             entityzombievillager1.finalizeSpawn(worldserver, worldserver.getCurrentDifficultyAt(entityzombievillager1.blockPosition()), EntitySpawnReason.CONVERSION, new EntityZombie.GroupDataZombie(false, true));
             entityzombievillager1.setVillagerData(entityvillager.getVillagerData());
             entityzombievillager1.setGossips((NBTBase) entityvillager.getGossips().store(DynamicOpsNBT.INSTANCE));
             entityzombievillager1.setTradeOffers(entityvillager.getOffers().copy());
             entityzombievillager1.setVillagerXp(entityvillager.getVillagerXp());
-            if (!this.isSilent()) {
-                worldserver.levelEvent((EntityHuman) null, 1026, this.blockPosition(), 0);
+            // CraftBukkit start
+            if (!silent) {
+                worldserver.levelEvent((EntityHuman) null, 1026, blockPosition, 0);
             }
 
-        });
+        }, transformReason, spawnReason);
 
-        return entityzombievillager != null;
+        return entityzombievillager;
+        // CraftBukkit end
     }
 
     protected boolean isSunSensitive() {
@@ -324,9 +352,9 @@
                     if (EntityPositionTypes.isSpawnPositionOk(entitytypes, worldserver, blockposition) && EntityPositionTypes.checkSpawnRules(entitytypes, worldserver, EntitySpawnReason.REINFORCEMENT, blockposition, worldserver.random)) {
                         entityzombie.setPos((double) i1, (double) j1, (double) k1);
                         if (!worldserver.hasNearbyAlivePlayer((double) i1, (double) j1, (double) k1, 7.0D) && worldserver.isUnobstructed(entityzombie) && worldserver.noCollision((Entity) entityzombie) && (entityzombie.canSpawnInLiquids() || !worldserver.containsAnyLiquid(entityzombie.getBoundingBox()))) {
-                            entityzombie.setTarget(entityliving);
+                            entityzombie.setTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true); // CraftBukkit
                             entityzombie.finalizeSpawn(worldserver, worldserver.getCurrentDifficultyAt(entityzombie.blockPosition()), EntitySpawnReason.REINFORCEMENT, (GroupDataEntity) null);
-                            worldserver.addFreshEntityWithPassengers(entityzombie);
+                            worldserver.addFreshEntityWithPassengers(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                             AttributeModifiable attributemodifiable = this.getAttribute(GenericAttributes.SPAWN_REINFORCEMENTS_CHANCE);
                             AttributeModifier attributemodifier = attributemodifiable.getModifier(EntityZombie.REINFORCEMENT_CALLER_CHARGE_ID);
                             double d0 = attributemodifier != null ? attributemodifier.amount() : 0.0D;
@@ -352,7 +380,14 @@
             float f = this.level().getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();
 
             if (this.getMainHandItem().isEmpty() && this.isOnFire() && this.random.nextFloat() < f * 0.3F) {
-                entity.igniteForSeconds((float) (2 * (int) f));
+                // CraftBukkit start
+                EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), (float) (2 * (int) f)); // PAIL: fixme
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    entity.igniteForSeconds(event.getDuration(), false);
+                }
+                // CraftBukkit end
             }
         }
 
@@ -385,7 +420,7 @@
 
     @Override
     public EntityTypes<? extends EntityZombie> getType() {
-        return super.getType();
+        return (EntityTypes<? extends EntityZombie>) super.getType(); // CraftBukkit - decompile error
     }
 
     protected boolean canSpawnInLiquids() {
@@ -496,7 +531,7 @@
                             entitychicken1.finalizeSpawn(worldaccess, difficultydamagescaler, EntitySpawnReason.JOCKEY, (GroupDataEntity) null);
                             entitychicken1.setChickenJockey(true);
                             this.startRiding(entitychicken1);
-                            worldaccess.addFreshEntity(entitychicken1);
+                            worldaccess.addFreshEntity(entitychicken1, CreatureSpawnEvent.SpawnReason.MOUNT); // CraftBukkit
                         }
                     }
                 }
